// Generated by purs bundle 0.13.6
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  exports["Alt"] = Alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["unlessM"] = unlessM;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($91) {
                      return $90(Data_Either.Left.create($91));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $92 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($93) {
              return ExceptT($92(Data_Either.Right.create($93)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $102 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($103) {
              return ExceptT($102(Data_Either.Left.create($103)));
          };
      })());
  };
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                         
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
  exports["monoidArray"] = monoidArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v = Effect_Ref.read(r)();
                      if (v instanceof Loop) {
                          var e = f(v.value0)();
                          Effect_Ref.write(e)(r)();
                          return false;
                      };
                      if (v instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEffect"] = monadRecEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];                    
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["greaterThan"] = greaterThan;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($120) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 402, column 3 - line 402, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  var and = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["and"] = and;
  exports["all"] = all;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["minimumBy"] = minimumBy;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };    
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  exports["null"] = $$null;
  exports["last"] = last;
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Functor = $PS["Data.Functor"];                  
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var runFreeM = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (k) {
              var go = function (f) {
                  var v = toView(f);
                  if (v instanceof Return) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
                  };
                  if (v instanceof Bind) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
          };
      };
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  var substFree = function (k) {
      var go = function (f) {
          var v = toView(f);
          if (v instanceof Return) {
              return Control_Applicative.pure(freeApplicative)(v.value0);
          };
          if (v instanceof Bind) {
              return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [ v.constructor.name ]);
      };
      return go;
  };
  var hoistFree = function (k) {
      return substFree(function ($125) {
          return liftF(k($125));
      });
  };
  exports["liftF"] = liftF;
  exports["hoistFree"] = hoistFree;
  exports["runFreeM"] = runFreeM;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.poke = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  exports.unsafeThaw = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["poke"] = $foreign.poke;
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
  exports["unsafeThaw"] = $foreign.unsafeThaw;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAtIndices = function (dictFoldable) {
      return function (us) {
          return function (xs) {
              return Data_Array_ST.withArray(function (res) {
                  return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                      return Data_Array_ST.poke(v.value0)(v.value1)(res);
                  })(us);
              })(xs)();
          };
      };
  };
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var takeEnd = function (n) {
      return function (xs) {
          return $foreign.drop($foreign.length(xs) - n | 0)(xs);
      };
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                      return function __do() {
                          var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $87 = (function (dictPartial) {
                                  var $89 = Data_Maybe.fromJust();
                                  return function ($90) {
                                      return $89(last($90));
                                  };
                              })();
                              return function ($88) {
                                  return Data_Tuple.snd($87($88));
                              };
                          })())(Data_Array_ST.unsafeFreeze(result))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(result)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $94 = Data_Maybe.maybe([  ])(singleton);
          return function ($95) {
              return $94(f($95));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["insertAt"] = insertAt;
  exports["updateAt"] = updateAt;
  exports["updateAtIndices"] = updateAtIndices;
  exports["modifyAt"] = modifyAt;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sortWith"] = sortWith;
  exports["takeEnd"] = takeEnd;
  exports["nub"] = nub;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var singleton = function ($49) {
      return unsafeFromArray(Data_Array.singleton($49));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var init = adaptMaybe(Data_Array.init);
  var last = adaptMaybe(Data_Array.last);
  var tail = adaptMaybe(Data_Array.tail);    
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $68 = adaptAny(f);
      return function ($69) {
          return unsafeFromArray($68($69));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];                                          
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Const"] = $PS["Data.Const"] || {};
  var exports = $PS["Data.Const"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];                                      
  var Const = function (x) {
      return x;
  };
  var newtypeConst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Const);
  var functorConst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return m;
      };
  });
  var applyConst = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorConst;
      }, function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var applicativeConst = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyConst(dictMonoid.Semigroup0());
      }, function (v) {
          return Data_Monoid.mempty(dictMonoid);
      });
  };
  exports["Const"] = Const;
  exports["newtypeConst"] = newtypeConst;
  exports["applicativeConst"] = applicativeConst;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (f) {
      return function (z) {
          var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($54) {
              return $52($53($54));
          };
      };
  });
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  var allWithIndex = function (dictFoldableWithIndex) {
      return function (dictHeytingAlgebra) {
          return function (t) {
              var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
              var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                  var $67 = t(i);
                  return function ($68) {
                      return Data_Monoid_Conj.Conj($67($68));
                  };
              });
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["allWithIndex"] = allWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor.Variant"] = $PS["Data.Functor.Variant"] || {};
  var exports = $PS["Data.Functor.Variant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var onMatch = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  return function (value) {
                      return {
                          type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                          value: value,
                          map: Data_Functor.map(dictFunctor)
                      };
                  };
              };
          };
      };
  };
  var functorVariantF = new Data_Functor.Functor(function (f) {
      return function (a) {
          return {
              type: a.type,
              value: a.map(f)(a.value),
              map: a.map
          };
      };
  });
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
  }; 
  var match = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["onMatch"] = onMatch;
  exports["match"] = match;
  exports["functorVariantF"] = functorVariantF;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["acos"] = $foreign.acos;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  exports["floor"] = floor;
  exports["even"] = even;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Int.Bits"] = $PS["Data.Int.Bits"] || {};
  var exports = $PS["Data.Int.Bits"];
  var $foreign = $PS["Data.Int.Bits"];
  exports["xor"] = $foreign.xor;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["Choice"] = Choice;
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["Strong"] = Strong;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Internal.Wander"] = $PS["Data.Lens.Internal.Wander"] || {};
  var exports = $PS["Data.Lens.Internal.Wander"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  };
  var wanderFunction = new Wander(function () {
      return Data_Profunctor_Choice.choiceFn;
  }, function () {
      return Data_Profunctor_Strong.strongFn;
  }, function (t) {
      return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
  });
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["Wander"] = Wander;
  exports["wanderFunction"] = wanderFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                          
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["delete"] = $$delete;
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var Index = function (ix) {
      this.ix = ix;
  };
  var ix = function (dict) {
      return dict.ix;
  }; 
  var indexMap = function (dictOrd) {
      return new Index(function (k) {
          return function (dictWander) {
              return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                  return function (coalg) {
                      return function (m) {
                          return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(m))((function () {
                              var $27 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                                  return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                              });
                              return function ($28) {
                                  return $27(coalg($28));
                              };
                          })())(Data_Map_Internal.lookup(dictOrd)(k)(m));
                      };
                  };
              });
          };
      });
  }; 
  var indexArray = new Index(function (n) {
      return function (dictWander) {
          return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return function (coalg) {
                  return function (xs) {
                      return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(xs))((function () {
                          var $31 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (x) {
                              return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(n)(x)(xs));
                          });
                          return function ($32) {
                              return $31(coalg($32));
                          };
                      })())(Data_Array.index(xs)(n));
                  };
              };
          });
      };
  });
  exports["ix"] = ix;
  exports["indexArray"] = indexArray;
  exports["indexMap"] = indexMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.At"] = $PS["Data.Lens.At"] || {};
  var exports = $PS["Data.Lens.At"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var At = function (Index0, at) {
      this.Index0 = Index0;
      this.at = at;
  }; 
  var atMap = function (dictOrd) {
      return new At(function () {
          return Data_Lens_Index.indexMap(dictOrd);
      }, function (k) {
          return function (dictStrong) {
              return Data_Lens_Lens.lens(Data_Map_Internal.lookup(dictOrd)(k))(function (m) {
                  return Data_Maybe.maybe(Data_Map_Internal["delete"](dictOrd)(k)(m))(function (v) {
                      return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                  });
              })(dictStrong);
          };
      });
  }; 
  var at = function (dict) {
      return dict.at;
  };
  exports["at"] = at;
  exports["atMap"] = atMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Const = $PS["Data.Const"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  var choiceForget = function (dictMonoid) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorForget;
      }, function (v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
      }, function (v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
      });
  };
  var wanderForget = function (dictMonoid) {
      return new Data_Lens_Internal_Wander.Wander(function () {
          return choiceForget(dictMonoid);
      }, function () {
          return strongForget;
      }, function (f) {
          return function (v) {
              return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
          };
      });
  };
  exports["newtypeForget"] = newtypeForget;
  exports["profunctorForget"] = profunctorForget;
  exports["strongForget"] = strongForget;
  exports["wanderForget"] = wanderForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Data_Function = $PS["Data.Function"];
  var Data_Semiring = $PS["Data.Semiring"];          
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  var addOver = function (dictSemiring) {
      return function (p) {
          var $64 = over(p);
          var $65 = Data_Semiring.add(dictSemiring);
          return function ($66) {
              return $64($65($66));
          };
      };
  };
  exports["over"] = over;
  exports["set"] = set;
  exports["addOver"] = addOver;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                         
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
})(PS);
(function(exports) {
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var fail = (function () {
      var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($108) {
          return $107(Data_List_NonEmpty.singleton($108));
      };
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  var readString = unsafeReadTagged("String");
  exports["TypeMismatch"] = TypeMismatch;
  exports["readString"] = readString;
  exports["readBoolean"] = readBoolean;
  exports["readNumber"] = readNumber;
  exports["fail"] = fail;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  exports["readProp"] = readProp;
})(PS);
(function(exports) {
  exports.setTimeout = ms => fn => () => setTimeout (fn, ms);
})(PS["Pha.Effects.Delay"] = PS["Pha.Effects.Delay"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Run"] = $PS["Run"] || {};
  var exports = $PS["Run"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Newtype = $PS["Data.Newtype"];                  
  var Run = function (x) {
      return x;
  };
  var newtypeRun = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Run);
  var resume = function (k1) {
      return function (k2) {
          var $43 = Control_Monad_Free["resume'"](function (x) {
              return function (f) {
                  return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(function ($46) {
                      return Run(f($46));
                  })(x));
              };
          })(k2);
          var $44 = Data_Newtype.unwrap(newtypeRun);
          return function ($45) {
              return $43($44($45));
          };
      };
  };
  var runCont = function (k1) {
      return function (k2) {
          var loop = resume(function (b) {
              return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(loop)(b));
          })(k2);
          return loop;
      };
  };  
  var monadRun = Control_Monad_Free.freeMonad;
  var lift = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  var $52 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(p);
                  return function ($53) {
                      return Run(Control_Monad_Free.liftF($52($53)));
                  };
              };
          };
      };
  };
  var functorRun = Control_Monad_Free.freeFunctor;
  var bindRun = Control_Monad_Free.freeBind;
  var applyRun = Control_Monad_Free.freeApply;
  var applicativeRun = Control_Monad_Free.freeApplicative;
  var monadRecRun = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadRun;
  }, function (f) {
      var loop = function (a) {
          return Control_Bind.bind(bindRun)(f(a))(function (b) {
              if (b instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeRun)(b.value0);
              };
              if (b instanceof Control_Monad_Rec_Class.Loop) {
                  return loop(b.value0);
              };
              throw new Error("Failed pattern match at Run (line 108, column 7 - line 110, column 24): " + [ b.constructor.name ]);
          });
      };
      return loop;
  });
  exports["Run"] = Run;
  exports["lift"] = lift;
  exports["runCont"] = runCont;
  exports["functorRun"] = functorRun;
  exports["applyRun"] = applyRun;
  exports["applicativeRun"] = applicativeRun;
  exports["bindRun"] = bindRun;
  exports["monadRun"] = monadRun;
  exports["monadRecRun"] = monadRecRun;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Effects.Delay"] = $PS["Pha.Effects.Delay"] || {};
  var exports = $PS["Pha.Effects.Delay"];
  var $foreign = $PS["Pha.Effects.Delay"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Run = $PS["Run"];                
  var Delay = (function () {
      function Delay(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Delay.create = function (value0) {
          return function (value1) {
              return new Delay(value0, value1);
          };
      };
      return Delay;
  })();
  var interpretDelay = function (v) {
      return $foreign.setTimeout(v.value0)(v.value1);
  };
  var functorDelay = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Delay(m.value0, f(m.value1));
      };
  });
  var _delay = Data_Symbol.SProxy.value;
  var delay = function (ms) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "delay";
      }))(functorDelay)(_delay)(new Delay(ms, Data_Unit.unit));
  };
  exports["delay"] = delay;
  exports["interpretDelay"] = interpretDelay;
})(PS);
(function(exports) {
  exports.mathRandom = Math.random;
})(PS["Pha.Effects.Random"] = PS["Pha.Effects.Random"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Random"] = $PS["Pha.Random"] || {};
  var exports = $PS["Pha.Random"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var RandomInt = (function () {
      function RandomInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RandomInt.create = function (value0) {
          return function (value1) {
              return new RandomInt(value0, value1);
          };
      };
      return RandomInt;
  })();
  var RandomNumber = (function () {
      function RandomNumber(value0) {
          this.value0 = value0;
      };
      RandomNumber.create = function (value0) {
          return new RandomNumber(value0);
      };
      return RandomNumber;
  })();                                                                                                           
  var int$prime = function (n) {
      return Control_Monad_Free.liftF(new RandomInt(n, Control_Category.identity(Control_Category.categoryFn)));
  };
  var shuffle = function (array) {
      return Control_Bind.bind(Control_Monad_Free.freeBind)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Free.freeApplicative)(Data_Array.mapWithIndex(function (i) {
          return function (x) {
              return Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Tuple.Tuple.create(x))(int$prime(i + 1 | 0));
          };
      })(array)))(function (rnds) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (t) {
              return function (v) {
                  return Data_Maybe.fromMaybe([  ])(Data_Array.insertAt(v.value1)(v.value0)(t));
              };
          })([  ])(rnds));
      });
  };
  var $$int = function ($copy_n) {
      return function ($copy_m) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, m) {
              if (m < n) {
                  $tco_var_n = m;
                  $copy_m = n;
                  return;
              };
              if (Data_Boolean.otherwise) {
                  $tco_done = true;
                  return Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(int$prime((m + 1 | 0) - n | 0))(function (v) {
                      return v + n | 0;
                  });
              };
              throw new Error("Failed pattern match at Pha.Random (line 19, column 1 - line 19, column 29): " + [ n.constructor.name, m.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_m);
          };
          return $tco_result;
      };
  };
  var functorRng = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof RandomInt) {
              return new RandomInt(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
          };
          if (m instanceof RandomNumber) {
              return new RandomNumber(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
          };
          throw new Error("Failed pattern match at Pha.Random (line 11, column 1 - line 11, column 45): " + [ m.constructor.name ]);
      };
  });
  var element$prime = function (t) {
      return Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Array.index(t))(int$prime(Data_Array.length(t)));
  };
  var bool = Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(int$prime(2))(Data_Eq.eq(Data_Eq.eqInt)(0));
  exports["int"] = $$int;
  exports["int'"] = int$prime;
  exports["bool"] = bool;
  exports["shuffle"] = shuffle;
  exports["element'"] = element$prime;
  exports["RandomInt"] = RandomInt;
  exports["RandomNumber"] = RandomNumber;
  exports["functorRng"] = functorRng;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Update"] = $PS["Pha.Update"] || {};
  var exports = $PS["Pha.Update"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Run = $PS["Run"];                
  var SetState = (function () {
      function SetState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetState.create = function (value0) {
          return function (value1) {
              return new SetState(value0, value1);
          };
      };
      return SetState;
  })();
  var GetState = (function () {
      function GetState(value0) {
          this.value0 = value0;
      };
      GetState.create = function (value0) {
          return new GetState(value0);
      };
      return GetState;
  })();
  var functorSetState = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new SetState(m.value0, f(m.value1));
      };
  });
  var setState = function (fn) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "setState";
      }))(functorSetState)(Data_Symbol.SProxy.value)(new SetState(fn, Data_Unit.unit));
  };
  var purely = setState;
  var functorGetState = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new GetState(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
      };
  });
  var getState = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "getState";
  }))(functorGetState)(Data_Symbol.SProxy.value)(new GetState(Control_Category.identity(Control_Category.categoryFn)));
  exports["purely"] = purely;
  exports["getState"] = getState;
  exports["setState"] = setState;
  exports["GetState"] = GetState;
  exports["SetState"] = SetState;
  exports["functorGetState"] = functorGetState;
  exports["functorSetState"] = functorSetState;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Effects.Random"] = $PS["Pha.Effects.Random"] || {};
  var exports = $PS["Pha.Effects.Random"];
  var $foreign = $PS["Pha.Effects.Random"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect = $PS["Effect"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var GenWrapper = (function () {
      function GenWrapper(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GenWrapper.create = function (value0) {
          return function (value1) {
              return new GenWrapper(value0, value1);
          };
      };
      return GenWrapper;
  })();
  var runRng = (function () {
      var go = function (v) {
          if (v instanceof Pha_Random.RandomInt) {
              return function __do() {
                  var x = $foreign.mathRandom();
                  return v.value1(Data_Int.floor(x * Data_Int.toNumber(v.value0)));
              };
          };
          if (v instanceof Pha_Random.RandomNumber) {
              return Data_Functor.mapFlipped(Effect.functorEffect)($foreign.mathRandom)(v.value0);
          };
          throw new Error("Failed pattern match at Pha.Effects.Random (line 40, column 5 - line 42, column 44): " + [ v.constructor.name ]);
      };
      return Control_Monad_Free.runFreeM(Pha_Random.functorRng)(Control_Monad_Rec_Class.monadRecEffect)(go);
  })();
  var test = function (v) {
      return Control_Bind.bind(Effect.bindEffect)(runRng(v.value0))(v.value1);
  };
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  var interpretRng = function (a) {
      return runExists(test)(a);
  };
  var functorRng = new Data_Functor.Functor(function (f) {
      return runExists(function (v) {
          return mkExists(new GenWrapper(v.value0, function ($14) {
              return f(v.value1($14));
          }));
      });
  });
  var _rng = Data_Symbol.SProxy.value;
  var randomGenerate = function (d) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "rng";
      }))(functorRng)(_rng)(mkExists(new GenWrapper(d, Control_Category.identity(Control_Category.categoryFn))));
  };
  var randomly = function (f) {
      return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (st) {
          return Control_Bind.bind(Run.bindRun)(randomGenerate(f(st)))(function (st2) {
              return Pha_Update.setState(function (v) {
                  return st2;
              });
          });
      });
  };
  exports["randomGenerate"] = randomGenerate;
  exports["randomly"] = randomly;
  exports["interpretRng"] = interpretRng;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Core"] = $PS["Game.Core"] || {};
  var exports = $PS["Game.Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var Turn1 = (function () {
      function Turn1() {

      };
      Turn1.value = new Turn1();
      return Turn1;
  })();
  var Turn2 = (function () {
      function Turn2() {

      };
      Turn2.value = new Turn2();
      return Turn2;
  })();
  var SizeLimit = (function () {
      function SizeLimit(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      SizeLimit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new SizeLimit(value0, value1, value2, value3);
                  };
              };
          };
      };
      return SizeLimit;
  })();
  var AlwaysShowWin = (function () {
      function AlwaysShowWin() {

      };
      AlwaysShowWin.value = new AlwaysShowWin();
      return AlwaysShowWin;
  })();
  var NeverShowWin = (function () {
      function NeverShowWin() {

      };
      NeverShowWin.value = new NeverShowWin();
      return NeverShowWin;
  })();
  var ShowWinOnNewRecord = (function () {
      function ShowWinOnNewRecord() {

      };
      ShowWinOnNewRecord.value = new ShowWinOnNewRecord();
      return ShowWinOnNewRecord;
  })();
  var Minimize = (function () {
      function Minimize() {

      };
      Minimize.value = new Minimize();
      return Minimize;
  })();
  var Maximize = (function () {
      function Maximize() {

      };
      Maximize.value = new Maximize();
      return Maximize;
  })();
  var SoloMode = (function () {
      function SoloMode() {

      };
      SoloMode.value = new SoloMode();
      return SoloMode;
  })();
  var RandomMode = (function () {
      function RandomMode() {

      };
      RandomMode.value = new RandomMode();
      return RandomMode;
  })();
  var ExpertMode = (function () {
      function ExpertMode() {

      };
      ExpertMode.value = new ExpertMode();
      return ExpertMode;
  })();
  var DuelMode = (function () {
      function DuelMode() {

      };
      DuelMode.value = new DuelMode();
      return DuelMode;
  })();
  var Drag = (function () {
      function Drag(value0) {
          this.value0 = value0;
      };
      Drag.create = function (value0) {
          return new Drag(value0);
      };
      return Drag;
  })();
  var Drop = (function () {
      function Drop(value0) {
          this.value0 = value0;
      };
      Drop.create = function (value0) {
          return new Drop(value0);
      };
      return Drop;
  })();
  var Leave = (function () {
      function Leave() {

      };
      Leave.value = new Leave();
      return Leave;
  })();
  var DropOnBoard = (function () {
      function DropOnBoard() {

      };
      DropOnBoard.value = new DropOnBoard();
      return DropOnBoard;
  })();
  var Rules = (function () {
      function Rules() {

      };
      Rules.value = new Rules();
      return Rules;
  })();
  var NoDialog = (function () {
      function NoDialog() {

      };
      NoDialog.value = new NoDialog();
      return NoDialog;
  })();
  var ConfirmNewGameDialog = (function () {
      function ConfirmNewGameDialog(value0) {
          this.value0 = value0;
      };
      ConfirmNewGameDialog.create = function (value0) {
          return new ConfirmNewGameDialog(value0);
      };
      return ConfirmNewGameDialog;
  })();
  var ScoreDialog = (function () {
      function ScoreDialog() {

      };
      ScoreDialog.value = new ScoreDialog();
      return ScoreDialog;
  })();
  var CustomDialog = (function () {
      function CustomDialog() {

      };
      CustomDialog.value = new CustomDialog();
      return CustomDialog;
  })();
  var State = (function () {
      function State(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      State.create = function (value0) {
          return function (value1) {
              return new State(value0, value1);
          };
      };
      return State;
  })();
  var Undo = (function () {
      function Undo() {

      };
      Undo.value = new Undo();
      return Undo;
  })();
  var Redo = (function () {
      function Redo() {

      };
      Redo.value = new Redo();
      return Redo;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var ToggleHelp = (function () {
      function ToggleHelp() {

      };
      ToggleHelp.value = new ToggleHelp();
      return ToggleHelp;
  })();
  var SetMode = (function () {
      function SetMode(value0) {
          this.value0 = value0;
      };
      SetMode.create = function (value0) {
          return new SetMode(value0);
      };
      return SetMode;
  })();
  var SetGridSize = (function () {
      function SetGridSize(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetGridSize.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetGridSize(value0, value1, value2);
              };
          };
      };
      return SetGridSize;
  })();
  var SetCustomSize = (function () {
      function SetCustomSize(value0) {
          this.value0 = value0;
      };
      SetCustomSize.create = function (value0) {
          return new SetCustomSize(value0);
      };
      return SetCustomSize;
  })();
  var SetNoDialog = (function () {
      function SetNoDialog() {

      };
      SetNoDialog.value = new SetNoDialog();
      return SetNoDialog;
  })();
  var SetRulesDialog = (function () {
      function SetRulesDialog() {

      };
      SetRulesDialog.value = new SetRulesDialog();
      return SetRulesDialog;
  })();
  var SetScoreDialog = (function () {
      function SetScoreDialog() {

      };
      SetScoreDialog.value = new SetScoreDialog();
      return SetScoreDialog;
  })();
  var ConfirmNewGame = (function () {
      function ConfirmNewGame() {

      };
      ConfirmNewGame.value = new ConfirmNewGame();
      return ConfirmNewGame;
  })();
  var SetPointer = (function () {
      function SetPointer(value0) {
          this.value0 = value0;
      };
      SetPointer.create = function (value0) {
          return new SetPointer(value0);
      };
      return SetPointer;
  })();
  var ComputerStarts = (function () {
      function ComputerStarts() {

      };
      ComputerStarts.value = new ComputerStarts();
      return ComputerStarts;
  })();
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var MsgWithDnd = function (dndmsg) {
      this.dndmsg = dndmsg;
  };
  var MsgWithCore = function (core) {
      this.core = core;
  };
  var Game = function (computerMove, initialPosition, isLevelFinished, onNewGame, onPositionChange, play, sizeLimit, updateScore) {
      this.computerMove = computerMove;
      this.initialPosition = initialPosition;
      this.isLevelFinished = isLevelFinished;
      this.onNewGame = onNewGame;
      this.onPositionChange = onPositionChange;
      this.play = play;
      this.sizeLimit = sizeLimit;
      this.updateScore = updateScore;
  };
  var ScoreGame = function (Game0, isCustomGame, objective, scoreFn, scoreHash) {
      this.Game0 = Game0;
      this.isCustomGame = isCustomGame;
      this.objective = objective;
      this.scoreFn = scoreFn;
      this.scoreHash = scoreHash;
  };
  var TwoPlayersGame = function (Game0, isLosingPosition, possibleMoves) {
      this.Game0 = Game0;
      this.isLosingPosition = isLosingPosition;
      this.possibleMoves = possibleMoves;
  };
  var updateScore = function (dict) {
      return dict.updateScore;
  };
  var sizeLimit = function (dict) {
      return dict.sizeLimit;
  };
  var scoreHash = function (dict) {
      return dict.scoreHash;
  };
  var scoreFn = function (dict) {
      return dict.scoreFn;
  };
  var possibleMoves = function (dict) {
      return dict.possibleMoves;
  };
  var play = function (dict) {
      return dict.play;
  };
  var oppositeTurn = function (v) {
      if (v instanceof Turn1) {
          return Turn2.value;
      };
      return Turn1.value;
  };
  var onPositionChange = function (dict) {
      return dict.onPositionChange;
  };
  var onNewGame = function (dict) {
      return dict.onNewGame;
  };
  var objective = function (dict) {
      return dict.objective;
  };
  var isLosingPosition = function (dict) {
      return dict.isLosingPosition;
  };
  var isLevelFinished = function (dict) {
      return dict.isLevelFinished;
  };
  var isCustomGame = function (dict) {
      return dict.isCustomGame;
  };
  var scoreHash$prime = function (dictScoreGame) {
      return function (state) {
          if (isCustomGame(dictScoreGame)(state)) {
              return "custom";
          };
          if (Data_Boolean.otherwise) {
              return scoreHash(dictScoreGame)(state);
          };
          throw new Error("Failed pattern match at Game.Core (line 337, column 1 - line 337, column 75): " + [ state.constructor.name ]);
      };
  };
  var initialPosition = function (dict) {
      return dict.initialPosition;
  };
  var eqTurn = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Turn1 && y instanceof Turn1) {
              return true;
          };
          if (x instanceof Turn2 && y instanceof Turn2) {
              return true;
          };
          return false;
      };
  });
  var eqSws = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof AlwaysShowWin && y instanceof AlwaysShowWin) {
              return true;
          };
          if (x instanceof NeverShowWin && y instanceof NeverShowWin) {
              return true;
          };
          if (x instanceof ShowWinOnNewRecord && y instanceof ShowWinOnNewRecord) {
              return true;
          };
          return false;
      };
  });
  var eqObjective = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Minimize && y instanceof Minimize) {
              return true;
          };
          if (x instanceof Maximize && y instanceof Maximize) {
              return true;
          };
          return false;
      };
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SoloMode && y instanceof SoloMode) {
              return true;
          };
          if (x instanceof RandomMode && y instanceof RandomMode) {
              return true;
          };
          if (x instanceof ExpertMode && y instanceof ExpertMode) {
              return true;
          };
          if (x instanceof DuelMode && y instanceof DuelMode) {
              return true;
          };
          return false;
      };
  });
  var dndmsg = function (dict) {
      return dict.dndmsg;
  };
  var defaultSizeLimit = function (v) {
      return new SizeLimit(0, 0, 0, 0);
  };
  var defaultOnNewGame = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
  var defaultCoreState = function (p) {
      return {
          position: p,
          history: Data_List_Types.Nil.value,
          redoHistory: Data_List_Types.Nil.value,
          dialog: Rules.value,
          turn: Turn1.value,
          nbRows: 0,
          nbColumns: 0,
          customSize: false,
          help: false,
          mode: SoloMode.value,
          locked: false,
          showWin: false,
          scores: Data_Map_Internal.empty,
          pointer: Data_Maybe.Nothing.value
      };
  };
  var genState = function (p) {
      return function (f) {
          return function (ext) {
              return new State(f(defaultCoreState(p)), ext);
          };
      };
  };
  var core = function (dict) {
      return dict.core;
  };
  var computerMove = function (dict) {
      return dict.computerMove;
  };
  var canPlay = function (dictGame) {
      return function (st) {
          return function (mov) {
              return Data_Maybe.isJust(play(dictGame)(st)(mov));
          };
      };
  };
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (e) {
              return new State(v.value0, e);
          };
      })(dictStrong);
  };
  var _core = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value0;
      })(function (v) {
          return function (c) {
              return new State(c, v.value1);
          };
      })(dictStrong);
  };
  var _customSize = function (dictStrong) {
      var $171 = _core(dictStrong);
      var $172 = Data_Lens_Lens.lens(function (v) {
          return v.customSize;
      })(function (v) {
          return function (v1) {
              return {
                  customSize: v1,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($173) {
          return $171($172($173));
      };
  };
  var _dialog = function (dictStrong) {
      var $174 = _core(dictStrong);
      var $175 = Data_Lens_Lens.lens(function (v) {
          return v.dialog;
      })(function (v) {
          return function (v1) {
              return {
                  dialog: v1,
                  customSize: v.customSize,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($176) {
          return $174($175($176));
      };
  };
  var _help = function (dictStrong) {
      var $177 = _core(dictStrong);
      var $178 = Data_Lens_Lens.lens(function (v) {
          return v.help;
      })(function (v) {
          return function (v1) {
              return {
                  help: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($179) {
          return $177($178($179));
      };
  };
  var _history = function (dictStrong) {
      var $180 = _core(dictStrong);
      var $181 = Data_Lens_Lens.lens(function (v) {
          return v.history;
      })(function (v) {
          return function (v1) {
              return {
                  history: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($182) {
          return $180($181($182));
      };
  };
  var _locked = function (dictStrong) {
      var $183 = _core(dictStrong);
      var $184 = Data_Lens_Lens.lens(function (v) {
          return v.locked;
      })(function (v) {
          return function (v1) {
              return {
                  locked: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($185) {
          return $183($184($185));
      };
  };
  var lockAction = function (act) {
      return Control_Monad.unlessM(Run.monadRun)(Data_Functor.map(Run.functorRun)(Data_Lens_Getter.view(_locked(Data_Lens_Internal_Forget.strongForget)))(Pha_Update.getState))(Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(true)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(act)(function () {
              return Pha_Update.setState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(false));
          });
      }));
  };
  var _mode = function (dictStrong) {
      var $186 = _core(dictStrong);
      var $187 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($188) {
          return $186($187($188));
      };
  };
  var _nbColumns = function (dictStrong) {
      var $189 = _core(dictStrong);
      var $190 = Data_Lens_Lens.lens(function (v) {
          return v.nbColumns;
      })(function (v) {
          return function (v1) {
              return {
                  nbColumns: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($191) {
          return $189($190($191));
      };
  };
  var _nbRows = function (dictStrong) {
      var $192 = _core(dictStrong);
      var $193 = Data_Lens_Lens.lens(function (v) {
          return v.nbRows;
      })(function (v) {
          return function (v1) {
              return {
                  nbRows: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($194) {
          return $192($193($194));
      };
  };
  var _pointer = function (dictStrong) {
      var $195 = _core(dictStrong);
      var $196 = Data_Lens_Lens.lens(function (v) {
          return v.pointer;
      })(function (v) {
          return function (v1) {
              return {
                  pointer: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($197) {
          return $195($196($197));
      };
  };
  var _position = function (dictStrong) {
      var $198 = _core(dictStrong);
      var $199 = Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (v1) {
              return {
                  position: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($200) {
          return $198($199($200));
      };
  };
  var _redoHistory = function (dictStrong) {
      var $201 = _core(dictStrong);
      var $202 = Data_Lens_Lens.lens(function (v) {
          return v.redoHistory;
      })(function (v) {
          return function (v1) {
              return {
                  redoHistory: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($203) {
          return $201($202($203));
      };
  };
  var pushToHistory = function (state) {
      return Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Cons.create(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state));
  };
  var _scores = function (dictStrong) {
      var $204 = _core(dictStrong);
      var $205 = Data_Lens_Lens.lens(function (v) {
          return v.scores;
      })(function (v) {
          return function (v1) {
              return {
                  scores: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($206) {
          return $204($205($206));
      };
  };
  var bestScore = function (dictScoreGame) {
      return function (state) {
          return Data_Lens_Getter.viewOn(state)((function () {
              var $207 = _scores(Data_Lens_Internal_Forget.strongForget);
              var $208 = Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(scoreHash$prime(dictScoreGame)(state))(Data_Lens_Internal_Forget.strongForget);
              return function ($209) {
                  return $207($208($209));
              };
          })());
      };
  };
  var newGameAux = function (dictGame) {
      return function (f) {
          return function (state) {
              var state2 = f(state);
              return Control_Bind.bind(Control_Monad_Free.freeBind)(onNewGame(dictGame)(state2))(function (state3) {
                  return Control_Bind.bind(Control_Monad_Free.freeBind)(initialPosition(dictGame)(state3))(function (position) {
                      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set((function () {
                          var $210 = _scores(Data_Profunctor_Strong.strongFn);
                          var $211 = Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))("custom")(Data_Profunctor_Strong.strongFn);
                          return function ($212) {
                              return $210($211($212));
                          };
                      })())(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(_help(Data_Profunctor_Strong.strongFn))(false)(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(position)(state3))))));
                  });
              });
          };
      };
  };
  var newGame = function (dictGame) {
      return function (f) {
          return Pha_Effects_Random.randomly(function (state) {
              var rstate = newGameAux(dictGame)(f)(state);
              var $124 = Data_List["null"](Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget))) || isLevelFinished(dictGame)(state);
              if ($124) {
                  return rstate;
              };
              return Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(rstate)(function (s) {
                  return Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(new ConfirmNewGameDialog(s))(state);
              });
          });
      };
  };
  var updateScore$prime = function (dictScoreGame) {
      return function (strat) {
          return function (state) {
              var score = scoreFn(dictScoreGame)(state);
              var oldScore = bestScore(dictScoreGame)(state);
              var hash = scoreHash$prime(dictScoreGame)(state);
              var cmp = (function () {
                  var $125 = Data_Eq.eq(eqObjective)(objective(dictScoreGame)(state))(Minimize.value);
                  if ($125) {
                      return Data_Ord.lessThan(Data_Ord.ordInt);
                  };
                  return Data_Ord.greaterThan(Data_Ord.ordInt);
              })();
              var isNewRecord = Data_Maybe.maybe(true)((function () {
                  var $213 = cmp(score);
                  return function ($214) {
                      return $213(Data_Tuple.fst($214));
                  };
              })())(oldScore);
              var isNewRecord$prime = isNewRecord && Data_Eq.eq(eqSws)(strat)(ShowWinOnNewRecord.value) || Data_Eq.eq(eqSws)(strat)(AlwaysShowWin.value);
              var st2 = Data_Lens_Setter.over((function () {
                  var $215 = _scores(Data_Profunctor_Strong.strongFn);
                  var $216 = Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(hash)(Data_Profunctor_Strong.strongFn);
                  return function ($217) {
                      return $215($216($217));
                  };
              })())((function () {
                  if (isNewRecord) {
                      return function (v) {
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(score, Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))));
                      };
                  };
                  return Control_Category.identity(Control_Category.categoryFn);
              })())(state);
              return new Data_Tuple.Tuple(st2, isNewRecord$prime);
          };
      };
  };
  var _showWin = function (dictStrong) {
      var $218 = _core(dictStrong);
      var $219 = Data_Lens_Lens.lens(function (v) {
          return v.showWin;
      })(function (v) {
          return function (v1) {
              return {
                  showWin: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($220) {
          return $218($219($220));
      };
  };
  var showVictory = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(true)))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(1000))(function () {
          return Pha_Update.setState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(false));
      });
  });
  var _turn = function (dictStrong) {
      var $221 = _core(dictStrong);
      var $222 = Data_Lens_Lens.lens(function (v) {
          return v.turn;
      })(function (v) {
          return function (v1) {
              return {
                  turn: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin
              };
          };
      })(dictStrong);
      return function ($223) {
          return $221($222($223));
      };
  };
  var changeTurn = function (state) {
      return Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(function (x) {
          var $127 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(DuelMode.value);
          if ($127) {
              return oppositeTurn(x);
          };
          return Turn1.value;
      })(state);
  };
  var playAux = function (dictGame) {
      return function (move) {
          return function (state) {
              return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(play(dictGame)(state)(move))(function (pos) {
                  return onPositionChange(dictGame)(Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(oppositeTurn)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(pos)(state)));
              });
          };
      };
  };
  var computerMove$prime = function (dictTwoPlayersGame) {
      return function (state) {
          if (isLevelFinished(dictTwoPlayersGame.Game0())(state)) {
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              var moves = possibleMoves(dictTwoPlayersGame)(state);
              var bestMove = (function () {
                  var $129 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
                  if ($129) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Foldable.find(Data_Foldable.foldableArray)((function () {
                      var $224 = Data_Maybe.maybe(false)(isLosingPosition(dictTwoPlayersGame));
                      var $225 = Data_Function.flip(playAux(dictTwoPlayersGame.Game0()))(state);
                      return function ($226) {
                          return $224($225($226));
                      };
                  })())(moves);
              })();
              if (bestMove instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(bestMove);
              };
              if (bestMove instanceof Data_Maybe.Nothing) {
                  return Pha_Random["element'"](moves);
              };
              throw new Error("Failed pattern match at Game.Core (line 313, column 13 - line 315, column 43): " + [ bestMove.constructor.name ]);
          };
          throw new Error("Failed pattern match at Game.Core (line 302, column 1 - line 302, column 95): " + [ state.constructor.name ]);
      };
  };
  var computerPlay = function (dictGame) {
      return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (state) {
          return Control_Bind.bind(Run.bindRun)(Pha_Effects_Random.randomGenerate(computerMove(dictGame)(state)))(function (move) {
              var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Function.flip(playAux(dictGame))(state))(move);
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Function["const"](v.value0)))(function () {
                      return Control_Applicative.when(Run.applicativeRun)(isLevelFinished(dictGame)(v.value0))(showVictory);
                  });
              };
              throw new Error("Failed pattern match at Game.Core (line 232, column 5 - line 236, column 51): " + [ v.constructor.name ]);
          });
      });
  };
  var coreUpdate = function (dictGame) {
      return function (v) {
          if (v instanceof Undo) {
              return Pha_Update.purely(function (state) {
                  var v1 = Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget));
                  if (v1 instanceof Data_List_Types.Nil) {
                      return state;
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return onPositionChange(dictGame)(Data_Lens_Setter.over(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Cons.create(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(v1.value1)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1.value0)(changeTurn(state)))));
                  };
                  throw new Error("Failed pattern match at Game.Core (line 161, column 35 - line 168, column 33): " + [ v1.constructor.name ]);
              });
          };
          if (v instanceof Redo) {
              return Pha_Update.purely(function (state) {
                  var v1 = Data_Lens_Getter.viewOn(state)(_redoHistory(Data_Lens_Internal_Forget.strongForget));
                  if (v1 instanceof Data_List_Types.Nil) {
                      return state;
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return onPositionChange(dictGame)(Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Cons.create(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(v1.value1)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1.value0)(changeTurn(state)))));
                  };
                  throw new Error("Failed pattern match at Game.Core (line 170, column 35 - line 177, column 33): " + [ v1.constructor.name ]);
              });
          };
          if (v instanceof Reset) {
              return Pha_Update.purely(function (state) {
                  var v1 = Data_List.last(Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget)));
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return state;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return onPositionChange(dictGame)(Data_Lens_Setter.set(_turn(Data_Profunctor_Strong.strongFn))(Turn1.value)(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1.value0)(state)))));
                  };
                  throw new Error("Failed pattern match at Game.Core (line 179, column 36 - line 185, column 39): " + [ v1.constructor.name ]);
              });
          };
          if (v instanceof ToggleHelp) {
              return Pha_Update.purely(Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
          };
          if (v instanceof SetMode) {
              return newGame(dictGame)(Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn))(v.value0));
          };
          if (v instanceof SetGridSize) {
              var setSize$prime = function (state) {
                  var v1 = sizeLimit(dictGame)(state);
                  var $145 = v.value0 >= v1.value0 && (v.value0 <= v1.value2 && (v.value1 >= v1.value1 && v.value1 <= v1.value3));
                  if ($145) {
                      return Data_Lens_Setter.set(_nbColumns(Data_Profunctor_Strong.strongFn))(v.value1)(Data_Lens_Setter.set(_nbRows(Data_Profunctor_Strong.strongFn))(v.value0)(state));
                  };
                  return state;
              };
              return newGame(dictGame)((function () {
                  var $227 = Data_Lens_Setter.set(_customSize(Data_Profunctor_Strong.strongFn))(v.value2);
                  return function ($228) {
                      return setSize$prime($227($228));
                  };
              })());
          };
          if (v instanceof SetCustomSize) {
              return Pha_Update.purely(Data_Lens_Setter.set(_customSize(Data_Profunctor_Strong.strongFn))(v.value0));
          };
          if (v instanceof SetNoDialog) {
              return Pha_Update.purely(Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(NoDialog.value));
          };
          if (v instanceof SetRulesDialog) {
              return Pha_Update.purely(Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(Rules.value));
          };
          if (v instanceof SetScoreDialog) {
              return Pha_Update.purely(Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(ScoreDialog.value));
          };
          if (v instanceof ConfirmNewGame) {
              return Pha_Update.purely(function (state) {
                  var v1 = Data_Lens_Getter.viewOn(state)(_dialog(Data_Lens_Internal_Forget.strongForget));
                  if (v1 instanceof ConfirmNewGameDialog) {
                      return v1.value0;
                  };
                  return state;
              });
          };
          if (v instanceof SetPointer) {
              return Pha_Update.purely(Data_Lens_Setter.set(_pointer(Data_Profunctor_Strong.strongFn))(v.value0));
          };
          if (v instanceof ComputerStarts) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState((function () {
                  var $229 = Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(oppositeTurn);
                  return function ($230) {
                      return $229(pushToHistory($230));
                  };
              })()))(function () {
                  return computerPlay(dictGame);
              });
          };
          if (v instanceof Init) {
              return newGame(dictGame)(Control_Category.identity(Control_Category.categoryFn));
          };
          throw new Error("Failed pattern match at Game.Core (line 160, column 1 - line 160, column 85): " + [ v.constructor.name ]);
      };
  };
  var playA = function (dictGame) {
      return function (move) {
          return lockAction(Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (state) {
              var v = playAux(dictGame)(move)(pushToHistory(state));
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(function (v1) {
                      return v.value0;
                  }))(function () {
                      var $158 = isLevelFinished(dictGame)(v.value0);
                      if ($158) {
                          var v1 = updateScore(dictGame)(v.value0);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(function (v2) {
                              return v1.value0;
                          }))(function () {
                              return Control_Applicative.when(Run.applicativeRun)(v1.value1)(showVictory);
                          });
                      };
                      var $162 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(v.value0)(_mode(Data_Lens_Internal_Forget.strongForget)))(ExpertMode.value) || Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(v.value0)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
                      if ($162) {
                          return Control_Apply.applySecond(Run.applyRun)(Pha_Effects_Delay.delay(1000))(computerPlay(dictGame));
                      };
                      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                  });
              };
              throw new Error("Failed pattern match at Game.Core (line 241, column 5 - line 252, column 26): " + [ v.constructor.name ]);
          }));
      };
  };
  var dropA = function (dictEq) {
      return function (dictGame) {
          return function (dragLens) {
              return function (to) {
                  return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (state) {
                      var v = Data_Lens_Getter.viewOn(state)(dragLens(Data_Lens_Internal_Forget.strongForget));
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set(dragLens(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)))(function () {
                              var $165 = Data_Eq.notEq(dictEq)(v.value0)(to);
                              if ($165) {
                                  return playA(dictGame)({
                                      from: v.value0,
                                      to: to
                                  });
                              };
                              return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                          });
                      };
                      throw new Error("Failed pattern match at Game.Core (line 379, column 5 - line 383, column 71): " + [ v.constructor.name ]);
                  });
              };
          };
      };
  };
  var dndUpdate = function (dictEq) {
      return function (dictGame) {
          return function (_dragged) {
              return function (v) {
                  if (v instanceof Drag) {
                      return Pha_Update.purely(Data_Lens_Setter.set(_dragged(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v.value0)));
                  };
                  if (v instanceof Drop) {
                      return dropA(dictEq)(dictGame)(function (dictStrong) {
                          return _dragged(dictStrong);
                      })(v.value0);
                  };
                  if (v instanceof Leave) {
                      return Pha_Update.purely(Data_Lens_Setter.set(_dragged(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value));
                  };
                  if (v instanceof DropOnBoard) {
                      return Pha_Update.purely(Data_Lens_Setter.set(_dragged(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value));
                  };
                  throw new Error("Failed pattern match at Game.Core (line 368, column 1 - line 369, column 79): " + [ _dragged.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  exports["core"] = core;
  exports["dndmsg"] = dndmsg;
  exports["isLevelFinished"] = isLevelFinished;
  exports["possibleMoves"] = possibleMoves;
  exports["scoreFn"] = scoreFn;
  exports["sizeLimit"] = sizeLimit;
  exports["Rules"] = Rules;
  exports["ConfirmNewGameDialog"] = ConfirmNewGameDialog;
  exports["ScoreDialog"] = ScoreDialog;
  exports["CustomDialog"] = CustomDialog;
  exports["RandomMode"] = RandomMode;
  exports["ExpertMode"] = ExpertMode;
  exports["DuelMode"] = DuelMode;
  exports["Turn1"] = Turn1;
  exports["Turn2"] = Turn2;
  exports["genState"] = genState;
  exports["_ext"] = _ext;
  exports["_position"] = _position;
  exports["_history"] = _history;
  exports["_redoHistory"] = _redoHistory;
  exports["_mode"] = _mode;
  exports["_help"] = _help;
  exports["_turn"] = _turn;
  exports["_dialog"] = _dialog;
  exports["_nbRows"] = _nbRows;
  exports["_nbColumns"] = _nbColumns;
  exports["_customSize"] = _customSize;
  exports["_locked"] = _locked;
  exports["_showWin"] = _showWin;
  exports["_pointer"] = _pointer;
  exports["SizeLimit"] = SizeLimit;
  exports["Game"] = Game;
  exports["canPlay"] = canPlay;
  exports["defaultSizeLimit"] = defaultSizeLimit;
  exports["defaultOnNewGame"] = defaultOnNewGame;
  exports["Undo"] = Undo;
  exports["Redo"] = Redo;
  exports["Reset"] = Reset;
  exports["ToggleHelp"] = ToggleHelp;
  exports["SetMode"] = SetMode;
  exports["SetGridSize"] = SetGridSize;
  exports["SetCustomSize"] = SetCustomSize;
  exports["SetNoDialog"] = SetNoDialog;
  exports["SetRulesDialog"] = SetRulesDialog;
  exports["SetScoreDialog"] = SetScoreDialog;
  exports["ConfirmNewGame"] = ConfirmNewGame;
  exports["SetPointer"] = SetPointer;
  exports["ComputerStarts"] = ComputerStarts;
  exports["Init"] = Init;
  exports["MsgWithCore"] = MsgWithCore;
  exports["coreUpdate"] = coreUpdate;
  exports["playA"] = playA;
  exports["lockAction"] = lockAction;
  exports["newGame"] = newGame;
  exports["TwoPlayersGame"] = TwoPlayersGame;
  exports["computerMove'"] = computerMove$prime;
  exports["Minimize"] = Minimize;
  exports["Maximize"] = Maximize;
  exports["AlwaysShowWin"] = AlwaysShowWin;
  exports["NeverShowWin"] = NeverShowWin;
  exports["ShowWinOnNewRecord"] = ShowWinOnNewRecord;
  exports["ScoreGame"] = ScoreGame;
  exports["updateScore'"] = updateScore$prime;
  exports["bestScore"] = bestScore;
  exports["Drag"] = Drag;
  exports["Drop"] = Drop;
  exports["Leave"] = Leave;
  exports["DropOnBoard"] = DropOnBoard;
  exports["MsgWithDnd"] = MsgWithDnd;
  exports["dndUpdate"] = dndUpdate;
  exports["eqMode"] = eqMode;
  exports["eqTurn"] = eqTurn;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  exports["unsafeUnionFn"] = $foreign.unsafeUnionFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var merge = function (dictUnion) {
      return function (dictNub) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  exports["merge"] = merge;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Lib.Util"] = $PS["Lib.Util"] || {};
  var exports = $PS["Lib.Util"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Record = $PS["Record"];                
  var PartialRecord = function (partialUpdate) {
      this.partialUpdate = partialUpdate;
  };
  var swap = function (i) {
      return function (j) {
          return function (array) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(i))(function (x) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(j))(function (y) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.updateAt(i)(y)(array))(Data_Array.updateAt(j)(x));
                  });
              });
          };
      };
  };
  var range$prime = function (n) {
      return function (m) {
          var $2 = n > m;
          if ($2) {
              return [  ];
          };
          return Data_Array.range(n)(m);
      };
  };
  var repeat = function (n) {
      return function (f) {
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(range$prime(0)(n - 1 | 0))(f);
      };
  };
  var rangeWithStep = function (begin) {
      return function (end) {
          return function (step) {
              return repeat(Data_Ord.max(Data_Ord.ordInt)(0)(1 + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(end - begin | 0)(step) | 0))(function (i) {
                  return begin + (i * step | 0) | 0;
              });
          };
      };
  };
  var rangeWithStep$prime = function (begin) {
      return function (end) {
          return function (step) {
              return repeat(Data_Ord.max(Data_Ord.ordInt)(0)(Data_Int.floor(1.0 + (end - begin) / step)))(function (i) {
                  return begin + Data_Int.toNumber(i) * step;
              });
          };
      };
  };
  var repeat2 = function (n) {
      return function (m) {
          return function (f) {
              return repeat(n * m | 0)(function (i) {
                  return f(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(m))(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(m));
              });
          };
      };
  };
  var precord = function (dictUnion) {
      return function (dictNub) {
          return new PartialRecord(Record.merge()());
      };
  };
  var partialUpdate = function (dict) {
      return dict.partialUpdate;
  };
  var pairwise = function (list) {
      return Data_Maybe.maybe([  ])(Data_Array.zip(list))(Data_Array.tail(list));
  };
  var map3 = function (t1) {
      return function (t2) {
          return function (t3) {
              return function (fn) {
                  return Data_Array.zipWith(Data_Function.apply)(Data_Array.zipWith(Data_Function.apply)(Data_Array.mapWithIndex(fn)(t1))(t2))(t3);
              };
          };
      };
  };
  var map2 = function (t1) {
      return function (t2) {
          return function (fn) {
              return Data_Array.zipWith(Data_Function.apply)(Data_Array.mapWithIndex(fn)(t1))(t2);
          };
      };
  };
  var coords = function (cols) {
      return function (i) {
          return {
              row: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(cols),
              col: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(cols)
          };
      };
  };
  var dCoords = function (cols) {
      return function (x) {
          return function (y) {
              var q = coords(cols)(y);
              var p = coords(cols)(x);
              return {
                  row: p.row - q.row | 0,
                  col: p.col - q.col | 0
              };
          };
      };
  };
  var abs = function (x) {
      var $3 = x < 0;
      if ($3) {
          return -x | 0;
      };
      return x;
  };
  exports["partialUpdate"] = partialUpdate;
  exports["abs"] = abs;
  exports["range'"] = range$prime;
  exports["repeat"] = repeat;
  exports["repeat2"] = repeat2;
  exports["map2"] = map2;
  exports["map3"] = map3;
  exports["rangeWithStep"] = rangeWithStep;
  exports["rangeWithStep'"] = rangeWithStep$prime;
  exports["pairwise"] = pairwise;
  exports["swap"] = swap;
  exports["coords"] = coords;
  exports["dCoords"] = dCoords;
  exports["precord"] = precord;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Baseball.Model"] = $PS["Game.Baseball.Model"] || {};
  var exports = $PS["Game.Baseball.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Random = $PS["Pha.Random"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetNbBases = (function () {
      function SetNbBases(value0) {
          this.value0 = value0;
      };
      SetNbBases.create = function (value0) {
          return new SetNbBases(value0);
      };
      return SetNbBases;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      nbBases: 5,
      missingPeg: 0
  });
  var _ext$prime = function (dictStrong) {
      var $18 = Game_Core["_ext"](dictStrong);
      var $19 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($20) {
          return $18($19($20));
      };
  };
  var _missingPeg = function (dictStrong) {
      var $21 = _ext$prime(dictStrong);
      var $22 = Data_Lens_Lens.lens(function (v) {
          return v.missingPeg;
      })(function (v) {
          return function (v1) {
              return {
                  missingPeg: v1,
                  nbBases: v.nbBases
              };
          };
      })(dictStrong);
      return function ($23) {
          return $21($22($23));
      };
  };
  var _nbBases = function (dictStrong) {
      var $24 = _ext$prime(dictStrong);
      var $25 = Data_Lens_Lens.lens(function (v) {
          return v.nbBases;
      })(function (v) {
          return function (v1) {
              return {
                  nbBases: v1,
                  missingPeg: v.missingPeg
              };
          };
      })(dictStrong);
      return function ($26) {
          return $24($25($26));
      };
  };
  var game = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      return Pha_Random.shuffle(Lib_Util["range'"](0)((2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0) - 1 | 0));
  }, function (state) {
      return Data_FoldableWithIndex.allWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (i) {
          return function (j) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(2) === Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(j)(2);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      return Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(Pha_Random["int'"](2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0))(function (i) {
          return Data_Lens_Setter.set(_missingPeg(Data_Profunctor_Strong.strongFn))(i)(state);
      });
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (i) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var nbBases = Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget));
          var j = Data_Lens_Getter.viewOn(state)(_missingPeg(Data_Lens_Internal_Forget.strongForget));
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(i))(function (x) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(j))(function (y) {
                  var $13 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(x)(2) - Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(y)(2) | 0)([ 1, nbBases - 1 | 0, -1 | 0, 1 - nbBases | 0 ]);
                  if ($13) {
                      return Data_Maybe.Just.create(Data_Array.updateAtIndices(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(i, y), new Data_Tuple.Tuple(j, x) ])(position));
                  };
                  return Data_Maybe.Nothing.value;
              });
          });
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(game)(v.value0);
      };
      if (v instanceof SetNbBases) {
          return Game_Core.newGame(game)(Data_Lens_Setter.set(_nbBases(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Game_Core.playA(game)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Baseball.Model (line 71, column 1 - line 71, column 33): " + [ v.constructor.name ]);
  };
  exports["_nbBases"] = _nbBases;
  exports["_missingPeg"] = _missingPeg;
  exports["istate"] = istate;
  exports["SetNbBases"] = SetNbBases;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["game"] = game;
  exports["withcore"] = withcore;
})(PS);
(function(exports) {
  const LAZY_NODE = 2
  const TEXT_NODE = 3

  const compose = (f, g) => f && g ? x => f(g(x)) : f || g; 

  const h = name => ps => children => {
      const style = {};
      const props = {style};
      const vdom = { name, children: children.filter(x => x), props, node: null };
      const n = ps.length;
      for (let i = 0; i < n; i++) {
          const [t, k, v] = ps[i];
          if (t === 0)
              vdom.key = k;
          else if (t == 1)
              props[k] = v;
          else if (t === 2)
              props.class = (props.class ? props.class + " " : "") + k;
          else if (t === 3)
              style[k] = v;
      }
      return vdom;
  }

  const createTextVNode = text => ({
      name: text,
      props: {},
      children: [],
      type: 3
  })

  const lazy = st => view => ({
      type: LAZY_NODE,
      lazy: {
          view: (x => view(x.state)),
          state: st
      }
  });

  exports.mapView = mapf => vnode => Object.assign({}, vnode, {mapf: compose(vnode.mapf, mapf)})
  exports.emptyNode = null
  exports.key = key => [0, key]
  exports.attr = k => v => [1, k, v]
  exports.class_ = cls => [2, cls]
  exports.noProp = [-1]
  exports.unsafeOnWithEffect = k => v => [1, k, v]
  exports.style = k => v => [3, k, v]
  exports.h = h
  exports.text = createTextVNode
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                
  var when = function (cond) {
      return function (vdom) {
          if (cond) {
              return vdom(Data_Unit.unit);
          };
          return $foreign.emptyNode;
      };
  };
  var on_ = function (n) {
      return function (handler) {
          return $foreign.unsafeOnWithEffect(n)(function (ev) {
              return {
                  effect: Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit),
                  msg: handler(ev)
              };
          });
      };
  };
  var maybeN = Data_Maybe.fromMaybe($foreign.emptyNode);
  var maybe = function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v1(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return $foreign.emptyNode;
          };
          throw new Error("Failed pattern match at Pha (line 77, column 1 - line 77, column 52): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var functorVDom = new Data_Functor.Functor(function (fn) {
      var mapH = function (handler) {
          return function (ev) {
              var v = handler(ev);
              return {
                  effect: v.effect,
                  msg: Data_Functor.map(Data_Maybe.functorMaybe)(fn)(v.msg)
              };
          };
      };
      return $foreign.mapView(mapH);
  });
  var class$prime = function (c) {
      return function (b) {
          if (b) {
              return $foreign.class_(c);
          };
          return $foreign.noProp;
      };
  };
  exports["on_"] = on_;
  exports["class'"] = class$prime;
  exports["when"] = when;
  exports["maybeN"] = maybeN;
  exports["maybe"] = maybe;
  exports["functorVDom"] = functorVDom;
  exports["h"] = $foreign.h;
  exports["text"] = $foreign.text;
  exports["emptyNode"] = $foreign.emptyNode;
  exports["key"] = $foreign.key;
  exports["attr"] = $foreign.attr;
  exports["style"] = $foreign.style;
  exports["class_"] = $foreign.class_;
  exports["unsafeOnWithEffect"] = $foreign.unsafeOnWithEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Elements"] = $PS["Pha.Elements"] || {};
  var exports = $PS["Pha.Elements"];
  var Pha = $PS["Pha"];
  var span = Pha.h("span");      
  var p = Pha.h("p");  
  var h2 = Pha.h("h2");
  var h1 = Pha.h("h1");        
  var div = Pha.h("div");
  var button = Pha.h("button");
  var br = Pha.h("br")([  ])([  ]);
  var a = Pha.h("a");
  exports["a"] = a;
  exports["br"] = br;
  exports["button"] = button;
  exports["div"] = div;
  exports["h1"] = h1;
  exports["h2"] = h2;
  exports["p"] = p;
  exports["span"] = span;
})(PS);
(function(exports) {
  exports.preventDefaultE = e => () => e && e.preventDefault && e.preventDefault();
  exports.stopPropagationE = e => () => e && e.stopPropagation && e.stopPropagation();                     
  exports.releasePointerCaptureE = ev => () => ev && ev.target && ev.pointerId != null &&
                          ev.target.releasePointerCapture && ev.target.releasePointerCapture(ev.pointerId);
})(PS["Pha.Events"] = PS["Pha.Events"] || {});
(function(exports) {
  exports.getBoundingClientRectAux = e => e && e.getBoundingClientRect && e.getBoundingClientRect();
})(PS["Pha.Events.Decoder"] = PS["Pha.Events.Decoder"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Events.Decoder"] = $PS["Pha.Events.Decoder"] || {};
  var exports = $PS["Pha.Events.Decoder"];
  var $foreign = $PS["Pha.Events.Decoder"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];                
  var shiftKey = Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("shiftKey"))(Foreign.readBoolean);
  var key = Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("key"))(Foreign.readString);
  var getBoundingClientRect = function (f) {
      var rect = $foreign.getBoundingClientRectAux(f);
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("left")(rect))(Foreign.readNumber))(function (left) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("top")(rect))(Foreign.readNumber))(function (top) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("width")(rect))(Foreign.readNumber))(function (width) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("height")(rect))(Foreign.readNumber))(function (height) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                          left: left,
                          top: top,
                          width: width,
                          height: height
                      });
                  });
              });
          });
      });
  };
  var currentTarget = Foreign_Index.readProp("currentTarget");                                                                                                                                                                                                                                    
  var always = (function () {
      var $0 = Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity));
      return function ($1) {
          return Data_Function["const"]($0($1));
      };
  })();
  exports["always"] = always;
  exports["currentTarget"] = currentTarget;
  exports["shiftKey"] = shiftKey;
  exports["key"] = key;
  exports["getBoundingClientRect"] = getBoundingClientRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Events"] = $PS["Pha.Events"] || {};
  var exports = $PS["Pha.Events"];
  var $foreign = $PS["Pha.Events"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Foreign = $PS["Foreign"];
  var Pha = $PS["Pha"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];                
  var releasePointerCaptureOn = function (eventname) {
      return function (decoder) {
          var handler = function (ev) {
              var v = Control_Monad_Except.runExcept(decoder(Foreign.unsafeToForeign(ev)));
              if (v instanceof Data_Either.Right) {
                  return {
                      msg: v.value0,
                      effect: $foreign.releasePointerCaptureE(ev)
                  };
              };
              return {
                  effect: Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit),
                  msg: Data_Maybe.Nothing.value
              };
          };
          return Pha.unsafeOnWithEffect(eventname)(handler);
      };
  };
  var on$prime = function (eventname) {
      return function (decoder) {
          var handler = function (ev) {
              var v = Control_Monad_Except.runExcept(decoder(Foreign.unsafeToForeign(ev)));
              if (v instanceof Data_Either.Right) {
                  return v.value0;
              };
              return Data_Maybe.Nothing.value;
          };
          return Pha.on_(eventname)(handler);
      };
  };
  var onclick$prime = (function () {
      var $20 = on$prime("click");
      return function ($21) {
          return $20(Pha_Events_Decoder.always($21));
      };
  })();
  var onpointerdown$prime = (function () {
      var $30 = on$prime("pointerdown");
      return function ($31) {
          return $30(Pha_Events_Decoder.always($31));
      };
  })();
  var on = function (eventname) {
      return function (decoder) {
          return on$prime(eventname)((function () {
              var $38 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create);
              return function ($39) {
                  return $38(decoder($39));
              };
          })());
      };
  };
  var onclick = (function () {
      var $42 = on("click");
      return function ($43) {
          return $42(Pha_Events_Decoder.always($43));
      };
  })();
  var onpointerdown = (function () {
      var $52 = on("pointerdown");
      return function ($53) {
          return $52(Pha_Events_Decoder.always($53));
      };
  })();
  var onpointerenter = (function () {
      var $54 = on("pointerenter");
      return function ($55) {
          return $54(Pha_Events_Decoder.always($55));
      };
  })();
  var onpointerleave = (function () {
      var $56 = on("pointerleave");
      return function ($57) {
          return $56(Pha_Events_Decoder.always($57));
      };
  })();
  var onpointerup = (function () {
      var $58 = on("pointerup");
      return function ($59) {
          return $58(Pha_Events_Decoder.always($59));
      };
  })();
  var custom = function (eventname) {
      return function (decoder) {
          var handler = function (ev) {
              var v = Control_Monad_Except.runExcept(decoder(Foreign.unsafeToForeign(ev)));
              if (v instanceof Data_Either.Right) {
                  return {
                      effect: function __do() {
                          Control_Applicative.when(Effect.applicativeEffect)(v.value0.stopPropagation)($foreign.stopPropagationE(ev))();
                          return Control_Applicative.when(Effect.applicativeEffect)(v.value0.preventDefault)($foreign.preventDefaultE(ev))();
                      },
                      msg: v.value0.message
                  };
              };
              return {
                  effect: Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit),
                  msg: Data_Maybe.Nothing.value
              };
          };
          return Pha.unsafeOnWithEffect(eventname)(handler);
      };
  };
  var preventDefaultOn = function (eventname) {
      return function (decoder) {
          return custom(eventname)((function () {
              var $62 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v) {
                  return {
                      message: v.value0,
                      preventDefault: v.value1,
                      stopPropagation: false
                  };
              });
              return function ($63) {
                  return $62(decoder($63));
              };
          })());
      };
  };
  var oncontextmenu = function (msg) {
      return preventDefaultOn("contextmenu")(Pha_Events_Decoder.always(new Data_Tuple.Tuple(new Data_Maybe.Just(msg), true)));
  };
  var stopPropagationOn = function (eventname) {
      return function (decoder) {
          return custom(eventname)((function () {
              var $64 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v) {
                  return {
                      message: v.value0,
                      preventDefault: false,
                      stopPropagation: v.value1
                  };
              });
              return function ($65) {
                  return $64(decoder($65));
              };
          })());
      };
  };
  exports["onclick"] = onclick;
  exports["onclick'"] = onclick$prime;
  exports["onpointerup"] = onpointerup;
  exports["onpointerdown"] = onpointerdown;
  exports["onpointerdown'"] = onpointerdown$prime;
  exports["onpointerenter"] = onpointerenter;
  exports["onpointerleave"] = onpointerleave;
  exports["oncontextmenu"] = oncontextmenu;
  exports["on"] = on;
  exports["on'"] = on$prime;
  exports["stopPropagationOn"] = stopPropagationOn;
  exports["releasePointerCaptureOn"] = releasePointerCaptureOn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Svg"] = $PS["Pha.Svg"] || {};
  var exports = $PS["Pha.Svg"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];                
  var y_ = Pha.attr("y");
  var y2 = Pha.attr("y2");
  var y1 = Pha.attr("y1");
  var x_ = Pha.attr("x");
  var x2 = Pha.attr("x2");
  var x1 = Pha.attr("x1");
  var width = Pha.attr("width");
  var viewBox = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return Pha.attr("viewBox")(Data_Show.show(Data_Show.showInt)(a) + (" " + (Data_Show.show(Data_Show.showInt)(b) + (" " + (Data_Show.show(Data_Show.showInt)(c) + (" " + Data_Show.show(Data_Show.showInt)(d)))))));
              };
          };
      };
  };
  var use = function (ref) {
      return function (props) {
          return Pha.h("use")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.attr("href")(ref) ])(props))([  ]);
      };
  };
  var transform = Pha.attr("transform");
  var text$prime = function (t) {
      return function (props) {
          return Pha.h("text")(props)([ Pha.text(t) ]);
      };
  };
  var svg = Pha.h("svg");
  var strokeWidth = Pha.attr("stroke-width");
  var strokeDasharray = Pha.attr("stroke-dasharray");
  var stroke = Pha.attr("stroke");
  var rect = function (props) {
      return Pha.h("rect")(props)([  ]);
  };
  var r = Pha.attr("r");
  var path = function (d) {
      return function (props) {
          return Pha.h("path")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.attr("d")(d) ])(props))([  ]);
      };
  };
  var opacity = Pha.attr("opacity");
  var line = function (props) {
      return Pha.h("line")(props)([  ]);
  };
  var height = Pha.attr("height");
  var g = Pha.h("g");
  var fill = Pha.attr("fill");
  var cy = Pha.attr("cy");
  var cx = Pha.attr("cx");
  var circle = function (props) {
      return Pha.h("circle")(props)([  ]);
  };
  exports["g"] = g;
  exports["svg"] = svg;
  exports["rect"] = rect;
  exports["path"] = path;
  exports["line"] = line;
  exports["circle"] = circle;
  exports["use"] = use;
  exports["text'"] = text$prime;
  exports["x_"] = x_;
  exports["y_"] = y_;
  exports["x1"] = x1;
  exports["y1"] = y1;
  exports["x2"] = x2;
  exports["y2"] = y2;
  exports["cx"] = cx;
  exports["cy"] = cy;
  exports["r"] = r;
  exports["width"] = width;
  exports["height"] = height;
  exports["stroke"] = stroke;
  exports["opacity"] = opacity;
  exports["fill"] = fill;
  exports["viewBox"] = viewBox;
  exports["transform"] = transform;
  exports["strokeWidth"] = strokeWidth;
  exports["strokeDasharray"] = strokeDasharray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Util"] = $PS["Pha.Util"] || {};
  var exports = $PS["Pha.Util"];
  var Data_Show = $PS["Data.Show"];                
  var translate = function (x) {
      return function (y) {
          return "translate(" + (x + ("," + (y + ")")));
      };
  };
  var rgbColor = function (r) {
      return function (g$prime) {
          return function (b) {
              return "rgb(" + (Data_Show.show(Data_Show.showInt)(r) + ("," + (Data_Show.show(Data_Show.showInt)(g$prime) + ("," + (Data_Show.show(Data_Show.showInt)(b) + ")")))));
          };
      };
  };
  var px$prime = function (a) {
      return Data_Show.show(Data_Show.showInt)(a) + "px";
  };
  var px = function (x) {
      return Data_Show.show(Data_Show.showNumber)(x) + "px";
  };
  var pc = function (x) {
      return Data_Show.show(Data_Show.showNumber)(x * 100.0) + "%";
  };
  exports["px"] = px;
  exports["px'"] = px$prime;
  exports["pc"] = pc;
  exports["translate"] = translate;
  exports["rgbColor"] = rgbColor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Attributes"] = $PS["Pha.Attributes"] || {};
  var exports = $PS["Pha.Attributes"];
  var Pha = $PS["Pha"];     
  var href = Pha.attr("href");
  var disabled = function (b) {
      return Pha.attr("disabled")((function () {
          if (b) {
              return "true";
          };
          return "";
      })());
  };
  exports["disabled"] = disabled;
  exports["href"] = href;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["UI.Icon"] = $PS["UI.Icon"] || {};
  var exports = $PS["UI.Icon"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Svg = $PS["Pha.Svg"];                
  var IconText = (function () {
      function IconText(value0) {
          this.value0 = value0;
      };
      IconText.create = function (value0) {
          return new IconText(value0);
      };
      return IconText;
  })();
  var IconSymbol = (function () {
      function IconSymbol(value0) {
          this.value0 = value0;
      };
      IconSymbol.create = function (value0) {
          return new IconSymbol(value0);
      };
      return IconSymbol;
  })();
  var IconNone = (function () {
      function IconNone() {

      };
      IconNone.value = new IconNone();
      return IconNone;
  })();
  var defaultOptions = {
      icon: IconNone.value,
      selected: false,
      tooltip: Data_Maybe.Nothing.value,
      round: false,
      large: false,
      hidden: false,
      disabled: false,
      style: [  ]
  };
  var iconbutton = function (dictPartialRecord) {
      return function (opts) {
          return function (props) {
              var v = Lib_Util.partialUpdate(dictPartialRecord)(opts)(defaultOptions);
              return Pha_Elements.button(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-icon"), Pha["class'"]("selected")(v.selected), Pha["class'"]("round")(v.large), Pha["class'"]("hidden")(v.hidden), Pha_Attributes.disabled(v.disabled) ])(props))([ (function () {
                  if (v.icon instanceof IconSymbol) {
                      return Pha_Svg.svg(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(Pha.style))(v.style))([ Pha_Svg.width("100%"), Pha_Svg.height("100%") ]))([ Pha_Svg.use(v.icon.value0)([ Pha.class_("ui-icon-symbol") ]) ]);
                  };
                  if (v.icon instanceof IconText) {
                      return Pha_Elements.span([ Pha.class_("ui-icon-text") ])([ Pha.text(v.icon.value0) ]);
                  };
                  if (v.icon instanceof IconNone) {
                      return Pha.emptyNode;
                  };
                  throw new Error("Failed pattern match at UI.Icon (line 46, column 9 - line 51, column 33): " + [ v.icon.constructor.name ]);
              })(), Pha.maybe(v.tooltip)(function (t) {
                  return Pha_Elements.span([ Pha.class_("ui-icon-tooltip") ])([ Pha.text(t) ]);
              }) ]);
          };
      };
  };
  exports["IconText"] = IconText;
  exports["IconSymbol"] = IconSymbol;
  exports["IconNone"] = IconNone;
  exports["defaultOptions"] = defaultOptions;
  exports["iconbutton"] = iconbutton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["UI.Icons"] = $PS["UI.Icons"] || {};
  var exports = $PS["UI.Icons"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var UI_Icon = $PS["UI.Icon"];                
  var DefIconText = function (defIconText) {
      this.defIconText = defIconText;
  };
  var icongroup = function (title) {
      return function (children) {
          return Pha_Elements.div([  ])([ Pha_Elements.h2([  ])([ Pha.text(title) ]), Pha_Elements.div([ Pha.class_("ui-icon-grid") ])(children) ]);
      };
  };
  var iconbutton = function (dictPartialRecord) {
      return function (state) {
          return function (opts) {
              return function (props) {
                  var opts2 = Lib_Util.partialUpdate(dictPartialRecord)(opts)(UI_Icon.defaultOptions);
                  return UI_Icon.iconbutton(Lib_Util.precord()())({
                      disabled: opts2.disabled || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget)),
                      hidden: opts2.hidden,
                      icon: opts2.icon,
                      large: opts2.large,
                      round: opts2.round,
                      selected: opts2.selected,
                      style: opts2.style,
                      tooltip: opts2.tooltip
                  })(props);
              };
          };
      };
  };
  var icons2Players = function (dictMsgWithCore) {
      return function (dictGame) {
          return function (state) {
              return icongroup("Mode de jeu")([ iconbutton(Lib_Util.precord()())(state)({
                  icon: new UI_Icon.IconSymbol("#school"),
                  selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.RandomMode.value),
                  tooltip: new Data_Maybe.Just("IA mode facile")
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetMode(Game_Core.RandomMode.value))) ]), iconbutton(Lib_Util.precord()())(state)({
                  icon: new UI_Icon.IconSymbol("#enstein"),
                  selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.ExpertMode.value),
                  tooltip: new Data_Maybe.Just("IA mode expert")
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetMode(Game_Core.ExpertMode.value))) ]), iconbutton(Lib_Util.precord()())(state)({
                  icon: new UI_Icon.IconSymbol("#duel"),
                  selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                  tooltip: new Data_Maybe.Just("Affronte un autre joueur")
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetMode(Game_Core.DuelMode.value))) ]), iconbutton(Lib_Util.precord()())(state)({
                  icon: new UI_Icon.IconText("2P\u21e8"),
                  disabled: !Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))) || Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                  tooltip: new Data_Maybe.Just("L'IA commence")
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.ComputerStarts.value)) ]) ]);
          };
      };
  };
  var ihelp = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(Lib_Util.precord()())(state)({
              icon: new UI_Icon.IconSymbol("#help"),
              tooltip: new Data_Maybe.Just("Aide"),
              selected: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget))
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.ToggleHelp.value)) ]);
      };
  };
  var iredo = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(Lib_Util.precord()())(state)({
              icon: new UI_Icon.IconSymbol("#undo"),
              tooltip: new Data_Maybe.Just("Rejoue le coup annul\xe9"),
              disabled: Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_redoHistory"](Data_Lens_Internal_Forget.strongForget))),
              style: [ new Data_Tuple.Tuple("transform", "scaleX(-1)") ]
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.Redo.value)) ]);
      };
  };
  var ireset = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(Lib_Util.precord()())(state)({
              icon: new UI_Icon.IconSymbol("#reset"),
              tooltip: new Data_Maybe.Just("Recommence la partie"),
              disabled: Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget)))
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.Reset.value)) ]);
      };
  };
  var irules = function (dictMsgWithCore) {
      return function (state) {
          var selected = (function () {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget));
              if (v instanceof Game_Core.Rules) {
                  return true;
              };
              return false;
          })();
          return iconbutton(Lib_Util.precord()())(state)({
              icon: new UI_Icon.IconSymbol("#rules"),
              tooltip: new Data_Maybe.Just("R\xe8gles"),
              selected: selected
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.SetRulesDialog.value)) ]);
      };
  };
  var iundo = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(Lib_Util.precord()())(state)({
              icon: new UI_Icon.IconSymbol("#undo"),
              tooltip: new Data_Maybe.Just("Annule le dernier coup effectu\xe9"),
              disabled: Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget)))
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.Undo.value)) ]);
      };
  };
  var iconSizesGroup = function (dictMsgWithCore) {
      return function (state) {
          return function (sizeList) {
              return function (customSize) {
                  var csize = Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget));
                  var crows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
                  var ccols = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
                  return icongroup("Dimensions de la grille")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(sizeList)(function (v) {
                      return iconbutton(Lib_Util.precord()())(state)({
                          icon: UI_Icon.IconText.create(Data_Show.show(Data_Show.showInt)(v.value0) + ("x" + Data_Show.show(Data_Show.showInt)(v.value1))),
                          selected: v.value0 === crows && (v.value1 === ccols && !csize)
                      })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetGridSize(v.value0, v.value1, false))) ]);
                  }))((function () {
                      if (customSize) {
                          return [ iconbutton(Lib_Util.precord()())(state)({
                              icon: new UI_Icon.IconText("NxM"),
                              tooltip: new Data_Maybe.Just("Taille personnalis\xe9e"),
                              selected: csize
                          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetCustomSize(true))) ]) ];
                      };
                      return [  ];
                  })()));
              };
          };
      };
  };
  var iconBestScore = function (dictMsgWithCore) {
      return function (dictScoreGame) {
          return function (state) {
              return icongroup("Meilleur score (" + (Data_Maybe.maybe("\u2205")((function () {
                  var $28 = Data_Show.show(Data_Show.showInt);
                  return function ($29) {
                      return $28(Data_Tuple.fst($29));
                  };
              })())(Game_Core.bestScore(dictScoreGame)(state)) + ")"))([ iconbutton(Lib_Util.precord()())(state)({
                  icon: new UI_Icon.IconSymbol("#cup"),
                  disabled: Data_Maybe.isNothing(Game_Core.bestScore(dictScoreGame)(state)),
                  tooltip: new Data_Maybe.Just("Meilleur score")
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.SetScoreDialog.value)) ]) ]);
          };
      };
  };
  var defint = new DefIconText(function (val) {
      return function (opts) {
          return {
              icon: UI_Icon.IconText.create(Data_Show.show(Data_Show.showInt)(val)),
              selected: opts.selected,
              tooltip: opts.tooltip,
              round: opts.round,
              large: opts.large,
              hidden: opts.hidden,
              disabled: opts.disabled,
              style: opts.style
          };
      };
  });
  var defa = new DefIconText(function (v) {
      return function (opts) {
          return opts;
      };
  });
  var defIconText = function (dict) {
      return dict.defIconText;
  };
  var iconSelectGroup = function (dictDefIconText) {
      return function (dictEq) {
          return function (state) {
              return function (title) {
                  return function (values) {
                      return function (selected) {
                          return function (action) {
                              return function (optionFn) {
                                  return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                      return iconbutton(Lib_Util.precord()())(state)(optionFn(val)(defIconText(dictDefIconText)(val)({
                                          icon: UI_Icon.defaultOptions.icon,
                                          selected: Data_Eq.eq(dictEq)(val)(selected),
                                          tooltip: UI_Icon.defaultOptions.tooltip,
                                          round: UI_Icon.defaultOptions.round,
                                          large: UI_Icon.defaultOptions.large,
                                          hidden: UI_Icon.defaultOptions.hidden,
                                          disabled: UI_Icon.defaultOptions.disabled,
                                          style: UI_Icon.defaultOptions.style
                                      })))([ Pha_Events.onclick(action(val)) ]);
                                  }));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var iconSelectGroupM = function (dictDefIconText) {
      return function (dictEq) {
          return function (dictFoldable) {
              return function (state) {
                  return function (title) {
                      return function (values) {
                          return function (selected) {
                              return function (action) {
                                  return function (optionFn) {
                                      return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                          return iconbutton(Lib_Util.precord()())(state)(optionFn(val)(defIconText(dictDefIconText)(val)({
                                              icon: UI_Icon.defaultOptions.icon,
                                              selected: Data_Foldable.elem(dictFoldable)(dictEq)(val)(selected),
                                              tooltip: UI_Icon.defaultOptions.tooltip,
                                              round: UI_Icon.defaultOptions.round,
                                              large: UI_Icon.defaultOptions.large,
                                              hidden: UI_Icon.defaultOptions.hidden,
                                              disabled: UI_Icon.defaultOptions.disabled,
                                              style: UI_Icon.defaultOptions.style
                                          })))([ Pha_Events.onclick(action(val)) ]);
                                      }));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["iconbutton"] = iconbutton;
  exports["icongroup"] = icongroup;
  exports["iundo"] = iundo;
  exports["iredo"] = iredo;
  exports["ireset"] = ireset;
  exports["ihelp"] = ihelp;
  exports["irules"] = irules;
  exports["iconSelectGroup"] = iconSelectGroup;
  exports["iconSelectGroupM"] = iconSelectGroupM;
  exports["iconSizesGroup"] = iconSizesGroup;
  exports["icons2Players"] = icons2Players;
  exports["iconBestScore"] = iconBestScore;
  exports["defint"] = defint;
  exports["defa"] = defa;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Common"] = $PS["Game.Common"] || {};
  var exports = $PS["Game.Common"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];                
  var pointerDecoder = function (f) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Pha_Events_Decoder.currentTarget(f))(Pha_Events_Decoder.getBoundingClientRect))(function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("clientX")(f))(Foreign.readNumber))(function (x) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("clientY")(f))(Foreign.readNumber))(function (y) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                      x: (x - v.left) / v.width,
                      y: (y - v.top) / v.height
                  });
              });
          });
      });
  };
  var _isoCustom = function (dictProfunctor) {
      var to = (function () {
          var $13 = Data_Array.mapWithIndex(function (i) {
              return function (v) {
                  if (v) {
                      return new Data_Maybe.Just({
                          row: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(5) - 2 | 0,
                          col: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(5) - 2 | 0
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
          });
          return function ($14) {
              return Data_Array.catMaybes($13($14));
          };
      })();
      var from = (function () {
          var $15 = Data_Function.flip(Data_Array.updateAtIndices(Data_Foldable.foldableArray))(Data_Array.replicate(25)(false));
          var $16 = Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return new Data_Tuple.Tuple(((v.row * 5 | 0) + v.col | 0) + 12 | 0, true);
          });
          return function ($17) {
              return $15($16($17));
          };
      })();
      return Data_Lens_Iso.iso(from)(to)(dictProfunctor);
  };
  exports["_isoCustom"] = _isoCustom;
  exports["pointerDecoder"] = pointerDecoder;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["UI.Dialog"] = $PS["UI.Dialog"] || {};
  var exports = $PS["UI.Dialog"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];                
  var dialog = function (v) {
      return function (children) {
          return Pha_Elements.div([ Pha.class_("ui-absolute ui-flex-center ui-dialog-container") ])([ Pha_Elements.div([ Pha.class_("ui-dialog") ])([ Pha_Elements.div([ Pha.class_("ui-dialog-head") ])([ Pha_Elements.div([ Pha.class_("ui-dialog-title") ])([ Pha.text(v.title) ]) ]), Pha_Elements.div([ Pha.class_("ui-dialog-body") ])(children), Pha_Elements.div([ Pha.class_("ui-dialog-buttons") ])([ Pha.maybe(v.onCancel)(function (action) {
              return Pha_Elements.button([ Pha.class_("ui-button ui-button-primary"), Pha_Events.onclick(action) ])([ Pha.text("Annuler") ]);
          }), Pha.maybe(v.onOk)(function (action) {
              return Pha_Elements.button([ Pha.class_("ui-button ui-button-primary"), Pha_Events.onclick(action) ])([ Pha.text("Ok") ]);
          }) ]) ]) ]);
      };
  };
  exports["dialog"] = dialog;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["UI.IncDecGrid"] = $PS["UI.IncDecGrid"] || {};
  var exports = $PS["UI.IncDecGrid"];
  var Data_Show = $PS["Data.Show"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var UI_Icon = $PS["UI.Icon"];                
  var incDecGrid = function (v) {
      return function (children) {
          return Pha_Elements.div([ Pha.class_("ui-incdecgrid") ])([ Pha_Elements.div([ Pha.class_("flex") ])([ Pha_Elements.div([ Pha.class_("ui-flex-center ui-incdecgrid-container") ])(children), Pha.when(v.showRowButtons)(function (v1) {
              return Pha_Elements.div([ Pha.class_("ui-flex-center ui-incdecgrid-rows") ])([ UI_Icon.iconbutton(Lib_Util.precord()())({
                  round: true,
                  icon: new UI_Icon.IconSymbol("#plus"),
                  disabled: v.locked,
                  hidden: !v.customSize
              })([ Pha_Events.onclick(v.resize(v.nbRows + 1 | 0)(v.nbColumns)) ]), Pha_Elements.div([ Pha.class_("ui-incdecgrid-text") ])([ Pha_Elements.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbRows)) ]) ]), UI_Icon.iconbutton(Lib_Util.precord()())({
                  round: true,
                  icon: new UI_Icon.IconSymbol("#minus"),
                  disabled: v.locked,
                  hidden: !v.customSize
              })([ Pha_Events.onclick(v.resize(v.nbRows - 1 | 0)(v.nbColumns)) ]) ]);
          }) ]), Pha.when(v.showColButtons)(function (v1) {
              return Pha_Elements.div([ Pha.class_("ui-flex-center ui-incdecgrid-cols") ])([ UI_Icon.iconbutton(Lib_Util.precord()())({
                  round: true,
                  icon: new UI_Icon.IconSymbol("#minus"),
                  disabled: v.locked,
                  hidden: !v.customSize
              })([ Pha_Events.onclick(v.resize(v.nbRows)(v.nbColumns - 1 | 0)) ]), Pha_Elements.div([ Pha.class_("ui-incdecgrid-text") ])([ Pha_Elements.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbColumns)) ]) ]), UI_Icon.iconbutton(Lib_Util.precord()())({
                  round: true,
                  icon: new UI_Icon.IconSymbol("#plus"),
                  disabled: v.locked,
                  hidden: !v.customSize
              })([ Pha_Events.onclick(v.resize(v.nbRows)(v.nbColumns + 1 | 0)) ]) ]);
          }) ]);
      };
  };
  exports["incDecGrid"] = incDecGrid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["UI.Template"] = $PS["UI.Template"] || {};
  var exports = $PS["UI.Template"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Game_Common = $PS["Game.Common"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Dialog = $PS["UI.Dialog"];
  var UI_IncDecGrid = $PS["UI.IncDecGrid"];                
  var winTitleFor2Players = function (state) {
      var $23 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
      if ($23) {
          return "Le " + ((function () {
              var $24 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
              if ($24) {
                  return "premier";
              };
              return "second";
          })() + " joueur gagne");
      };
      var $25 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
      if ($25) {
          return "Tu as gagn\xe9";
      };
      return "L'IA gagne";
  };
  var winPanel = function (title) {
      return function (visible) {
          return Pha_Elements.div([ Pha.class_("ui-flex-center ui-absolute component-win-container") ])([ Pha_Elements.div([ Pha.class_("component-win"), Pha["class'"]("visible")(visible) ])([ Pha.text(title) ]) ]);
      };
  };
  var turnMessage = function (dictGame) {
      return function (state) {
          var $26 = Game_Core.isLevelFinished(dictGame)(state);
          if ($26) {
              return "Partie finie";
          };
          var $27 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
          if ($27) {
              return "Tour du premier joueur";
          };
          var $28 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
          if ($28) {
              return "Tour du second joueur";
          };
          return "Tour de l'IA";
      };
  };
  var trackPointer = function (dictMsgWithCore) {
      var move = function (e) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Game_Core.core(dictMsgWithCore))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Functor.map(Data_Functor.functorFn)(Game_Core.SetPointer.create)(Data_Maybe.Just.create))(Game_Common.pointerDecoder(e)));
      };
      return [ Pha_Events.on("pointermove")(move), Pha_Events.onpointerleave(Game_Core.core(dictMsgWithCore)(new Game_Core.SetPointer(Data_Maybe.Nothing.value))), Pha_Events.on("pointerdown")(move) ];
  };
  var svgCursorStyle = function (v) {
      return [ Pha.style("transform")(Pha_Util.translate(Pha_Util.pc(v.x))(Pha_Util.pc(v.y))) ];
  };
  var incDecGrid = function (dictMsgWithCore) {
      return function (dictGame) {
          return function (state) {
              var v = Game_Core.sizeLimit(dictGame)(state);
              return UI_IncDecGrid.incDecGrid({
                  locked: Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget)),
                  nbRows: Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)),
                  nbColumns: Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
                  showRowButtons: v.value0 < v.value2,
                  showColButtons: v.value1 < v.value3,
                  customSize: Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget)),
                  resize: function (x) {
                      return function (y) {
                          return Game_Core.core(dictMsgWithCore)(new Game_Core.SetGridSize(x, y, true));
                      };
                  }
              });
          };
      };
  };
  var gridStyle = function (rows) {
      return function (columns) {
          return function (limit) {
              var m = Data_Int.toNumber(Data_Ord.max(Data_Ord.ordInt)(limit)(Data_Ord.max(Data_Ord.ordInt)(rows)(columns)));
              return [ Pha.style("height")(Pha_Util.pc(Data_Int.toNumber(rows) / m)), Pha.style("width")(Pha_Util.pc(Data_Int.toNumber(columns) / m)) ];
          };
      };
  };
  var dndItemProps = function (dictEq) {
      return function (dictMsgWithDnd) {
          return function (dictGame) {
              return function (state) {
                  return function (v) {
                      var dragged = v.draggable && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(new Data_Maybe.Just(v.id))(v.currentDragged);
                      var candrop = v.droppable && Data_Maybe.maybe(false)(function (d) {
                          return Game_Core.canPlay(dictGame)(state)({
                              from: d,
                              to: v.id
                          });
                      })(v.currentDragged);
                      return [ Pha["class'"]("dragged")(dragged), Pha["class'"]("candrop")(candrop), Pha_Events.releasePointerCaptureOn("pointerdown")(Pha_Events_Decoder.always((function () {
                          if (v.draggable) {
                              return new Data_Maybe.Just(Game_Core.dndmsg(dictMsgWithDnd)(new Game_Core.Drag(v.id)));
                          };
                          return Data_Maybe.Nothing.value;
                      })())), Pha_Events.stopPropagationOn("pointerup")(Pha_Events_Decoder.always((function () {
                          if (candrop) {
                              return new Data_Tuple.Tuple(new Data_Maybe.Just(Game_Core.dndmsg(dictMsgWithDnd)(new Game_Core.Drop(v.id))), true);
                          };
                          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, false);
                      })())) ];
                  };
              };
          };
      };
  };
  var dndBoardProps = function (dictMsgWithCore) {
      return function (dictMsgWithDnd) {
          var move = function (e) {
              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Game_Core.core(dictMsgWithCore))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Functor.map(Data_Functor.functorFn)(Game_Core.SetPointer.create)(Data_Maybe.Just.create))(Game_Common.pointerDecoder(e)));
          };
          return [ Pha_Events.on("pointerdown")(move), Pha_Events.on("pointermove")(move), Pha_Events.onpointerup(Game_Core.dndmsg(dictMsgWithDnd)(Game_Core.DropOnBoard.value)), Pha_Events.onpointerleave(Game_Core.dndmsg(dictMsgWithDnd)(Game_Core.Leave.value)) ];
      };
  };
  var dialog = function (dictMsgWithCore) {
      return function (title) {
          return UI_Dialog.dialog({
              title: title,
              onCancel: Data_Maybe.Nothing.value,
              onOk: Data_Maybe.Just.create(Game_Core.core(dictMsgWithCore)(Game_Core.SetNoDialog.value))
          });
      };
  };
  var defaultElements = {
      board: Pha.emptyNode,
      config: Pha.emptyNode,
      rules: [ Pha.text("blah blah") ],
      winTitle: "GAGN\xc9",
      customDialog: function (v) {
          return Pha.emptyNode;
      },
      scoreDialog: function (v) {
          return Pha.emptyNode;
      }
  };
  var template = function (dictPartialRecord) {
      return function (dictMsgWithCore) {
          return function (dictGame) {
              return function (elems) {
                  return function (state) {
                      var v = Lib_Util.partialUpdate(dictPartialRecord)(elems)(defaultElements);
                      var dialog$prime = function (v1) {
                          if (v1 instanceof Game_Core.Rules) {
                              return dialog(dictMsgWithCore)("R\xe8gles du jeu")([ Pha_Elements.div([ Pha.class_("ui-rules") ])(v.rules) ]);
                          };
                          if (v1 instanceof Game_Core.ConfirmNewGameDialog) {
                              return UI_Dialog.dialog({
                                  title: "Nouvelle partie",
                                  onCancel: Data_Maybe.Just.create(Game_Core.core(dictMsgWithCore)(Game_Core.SetNoDialog.value)),
                                  onOk: Data_Maybe.Just.create(Game_Core.core(dictMsgWithCore)(Game_Core.ConfirmNewGame.value))
                              })([ Pha.text("Tu es sur le point de cr\xe9er une nouvelle partie. Ta partie en cours sera perdue. Es-tu s\xfbr(e)?") ]);
                          };
                          if (v1 instanceof Game_Core.CustomDialog) {
                              return v.customDialog(Data_Unit.unit);
                          };
                          if (v1 instanceof Game_Core.ScoreDialog) {
                              return v.scoreDialog(Data_Unit.unit);
                          };
                          return Pha.emptyNode;
                      };
                      return Pha_Elements.div([  ])([ Pha_Elements.div([ Pha.class_("main-container") ])([ Pha_Elements.div([  ])([ v.board, winPanel(v.winTitle)(Data_Lens_Getter.viewOn(state)(Game_Core["_showWin"](Data_Lens_Internal_Forget.strongForget))) ]), v.config ]), dialog$prime(Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget))) ]);
                  };
              };
          };
      };
  };
  var cursorStyle = function (v) {
      return function (rows) {
          return function (columns) {
              return function (size) {
                  return [ Pha.style("left")(Pha_Util.pc(v.x)), Pha.style("top")(Pha_Util.pc(v.y)), Pha.style("width")(Pha_Util.pc(size / Data_Int.toNumber(columns))), Pha.style("height")(Pha_Util.pc(size / Data_Int.toNumber(rows))) ];
              };
          };
      };
  };
  var card = function (title) {
      return function (children) {
          return Pha_Elements.div([ Pha.class_("ui-card") ])([ Pha_Elements.div([ Pha.class_("ui-card-head ui-flex-center") ])([ Pha_Elements.div([ Pha.class_("ui-card-title") ])([ Pha.text(title) ]) ]), Pha_Elements.div([ Pha.class_("ui-card-body") ])(children) ]);
      };
  };
  var bestScoreDialog = function (dictMsgWithCore) {
      return function (dictScoreGame) {
          return function (state) {
              return function (children) {
                  return Pha.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd)(Game_Core.bestScore(dictScoreGame)(state)))(function (pos) {
                      return dialog(dictMsgWithCore)("Meilleur score")(children(pos));
                  });
              };
          };
      };
  };
  exports["card"] = card;
  exports["incDecGrid"] = incDecGrid;
  exports["template"] = template;
  exports["dialog"] = dialog;
  exports["bestScoreDialog"] = bestScoreDialog;
  exports["gridStyle"] = gridStyle;
  exports["cursorStyle"] = cursorStyle;
  exports["svgCursorStyle"] = svgCursorStyle;
  exports["trackPointer"] = trackPointer;
  exports["dndBoardProps"] = dndBoardProps;
  exports["dndItemProps"] = dndItemProps;
  exports["turnMessage"] = turnMessage;
  exports["winTitleFor2Players"] = winTitleFor2Players;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Baseball.View"] = $PS["Game.Baseball.View"] || {};
  var exports = $PS["Game.Baseball.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Show = $PS["Data.Show"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var translatePeg = function (position) {
      return function (nbBases) {
          var mid = Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var x = 0.42 + 0.35 * $$Math.cos((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases)) + 0.1 * Data_Int.toNumber(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var y = 0.46 + 0.35 * $$Math.sin((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Util.translate(Pha_Util.pc(x))(Pha_Util.pc(y));
      };
  };
  var transformBase = function (i) {
      return function (nbBases) {
          var y = 0.5 + 0.35 * $$Math.sin((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          var x = 0.5 + 0.35 * $$Math.cos((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Util.translate(Pha_Util.pc(x))(Pha_Util.pc(y)) + " rotate(45deg)";
      };
  };
  var colors = [ "blue", "red", "green", "magenta", "orange", "black", "cyan", "gray" ];
  var dupColors = Control_Bind.bind(Control_Bind.bindArray)(colors)(function (x) {
      return [ x, x ];
  });
  var view = function (state) {
      var rules = [ Pha.text("Le but du jeu est d'amener chaque jeton dans sa base (celle qui a la m\xeame couleur que le jeton)."), Pha_Elements.br, Pha.text("Pour cela, tu peux d\xe9placer un jeton vers une base adjacente si celle-ci poss\xe8de un emplacement libre."), Pha_Elements.br, Pha.text("Pour d\xe9placer un jeton, il te suffit de cliquer dessus.") ];
      var nbBases = Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_nbBases"](Data_Lens_Internal_Forget.strongForget));
      var levelFinished = Game_Core.isLevelFinished(Game_Baseball_Model.game)(state);
      var config = UI_Template.card("Baseball multicolore")([ UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Nombres de bases")([ 4, 5, 6, 7, 8 ])(nbBases)(Game_Baseball_Model.SetNbBases.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")([ UI_Icons.iundo(Game_Baseball_Model.withcore)(state), UI_Icons.iredo(Game_Baseball_Model.withcore)(state), UI_Icons.ireset(Game_Baseball_Model.withcore)(state), UI_Icons.irules(Game_Baseball_Model.withcore)(state) ]) ]);
      var board = Pha_Elements.div([ Pha.class_("ui-board baseball-board") ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_Array.concat([ Data_Array.mapWithIndex(function (i) {
          return function (color) {
              return Pha_Svg.rect([ Pha.key("b" + Data_Show.show(Data_Show.showInt)(i)), Pha.class_("baseball-base"), Pha_Svg.stroke(color), Pha.style("transform")(transformBase(i)(nbBases)) ]);
          };
      })(Data_Array.take(nbBases)(colors)), Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(dupColors)(function (peg) {
          return function (pos) {
              return function (color) {
                  return Pha.when(peg !== Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_missingPeg"](Data_Lens_Internal_Forget.strongForget)))(function (v) {
                      return Pha_Svg.g([ Pha.class_("baseball-player"), Pha.style("transform")(translatePeg(pos)(nbBases)), Pha.key("p" + Data_Show.show(Data_Show.showInt)(peg)) ])([ Pha_Svg.use("#meeple")([ Pha_Svg.width("7"), Pha_Svg.height("7"), Pha_Events.onclick(new Game_Baseball_Model.Play(peg)), Pha_Svg.fill(color), Pha.style("animation")((function () {
                          if (levelFinished) {
                              return "baseballHola 4s linear " + (Data_Show.show(Data_Show.showInt)(1000 + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(2000 * peg | 0)(nbBases) | 0) + "ms infinite");
                          };
                          return "none";
                      })()), Pha.style("cursor")((function () {
                          var $2 = Game_Core.canPlay(Game_Baseball_Model.game)(state)(peg);
                          if ($2) {
                              return "pointer";
                          };
                          return "not-allowed";
                      })()) ]) ]);
                  });
              };
          };
      }) ])) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Baseball_Model.withcore)(Game_Baseball_Model.game)({
          config: config,
          board: board,
          rules: rules
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Baseball"] = $PS["Game.Baseball"] || {};
  var exports = $PS["Game.Baseball"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Baseball_View = $PS["Game.Baseball.View"];
  var Game_Core = $PS["Game.Core"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Baseball_Model.withcore)(Game_Core.Init.value)),
      view: Game_Baseball_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Chocolat.Model"] = $PS["Game.Chocolat.Model"] || {};
  var exports = $PS["Game.Chocolat.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var CornerMode = (function () {
      function CornerMode() {

      };
      CornerMode.value = new CornerMode();
      return CornerMode;
  })();
  var BorderMode = (function () {
      function BorderMode() {

      };
      BorderMode.value = new BorderMode();
      return BorderMode;
  })();
  var StandardMode = (function () {
      function StandardMode() {

      };
      StandardMode.value = new StandardMode();
      return StandardMode;
  })();
  var FromLeft = (function () {
      function FromLeft(value0) {
          this.value0 = value0;
      };
      FromLeft.create = function (value0) {
          return new FromLeft(value0);
      };
      return FromLeft;
  })();
  var FromRight = (function () {
      function FromRight(value0) {
          this.value0 = value0;
      };
      FromRight.create = function (value0) {
          return new FromRight(value0);
      };
      return FromRight;
  })();
  var FromTop = (function () {
      function FromTop(value0) {
          this.value0 = value0;
      };
      FromTop.create = function (value0) {
          return new FromTop(value0);
      };
      return FromTop;
  })();
  var FromBottom = (function () {
      function FromBottom(value0) {
          this.value0 = value0;
      };
      FromBottom.create = function (value0) {
          return new FromBottom(value0);
      };
      return FromBottom;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetHover = (function () {
      function SetHover(value0) {
          this.value0 = value0;
      };
      SetHover.create = function (value0) {
          return new SetHover(value0);
      };
      return SetHover;
  })();
  var SetSoapMode = (function () {
      function SetSoapMode(value0) {
          this.value0 = value0;
      };
      SetSoapMode.create = function (value0) {
          return new SetSoapMode(value0);
      };
      return SetSoapMode;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState({
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
  })(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 6,
          nbColumns: 7,
          customSize: v.customSize,
          mode: Game_Core.RandomMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      soap: {
          row: 0,
          col: 0
      },
      soapMode: CornerMode.value,
      moveWhenHover: Data_Maybe.Nothing.value
  });
  var eqSoapMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof CornerMode && y instanceof CornerMode) {
              return true;
          };
          if (x instanceof BorderMode && y instanceof BorderMode) {
              return true;
          };
          if (x instanceof StandardMode && y instanceof StandardMode) {
              return true;
          };
          return false;
      };
  });
  var cutLine = function (state) {
      var v = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function (v1) {
          if (v1 instanceof FromLeft) {
              return {
                  x1: v1.value0,
                  y1: v.top,
                  x2: v1.value0,
                  y2: v.bottom
              };
          };
          if (v1 instanceof FromRight) {
              return {
                  x1: v1.value0,
                  y1: v.top,
                  x2: v1.value0,
                  y2: v.bottom
              };
          };
          if (v1 instanceof FromTop) {
              return {
                  x1: v.left,
                  y1: v1.value0,
                  x2: v.right,
                  y2: v1.value0
              };
          };
          if (v1 instanceof FromBottom) {
              return {
                  x1: v.left,
                  y1: v1.value0,
                  x2: v.right,
                  y2: v1.value0
              };
          };
          throw new Error("Failed pattern match at Game.Chocolat.Model (line 77, column 17 - line 81, column 55): " + [ v1.constructor.name ]);
      };
  };
  var _ext$prime = function (dictStrong) {
      var $74 = Game_Core["_ext"](dictStrong);
      var $75 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($76) {
          return $74($75($76));
      };
  };
  var _moveWhenHover = function (dictStrong) {
      var $77 = _ext$prime(dictStrong);
      var $78 = Data_Lens_Lens.lens(function (v) {
          return v.moveWhenHover;
      })(function (v) {
          return function (v1) {
              return {
                  moveWhenHover: v1,
                  soap: v.soap,
                  soapMode: v.soapMode
              };
          };
      })(dictStrong);
      return function ($79) {
          return $77($78($79));
      };
  };
  var _soap = function (dictStrong) {
      var $80 = _ext$prime(dictStrong);
      var $81 = Data_Lens_Lens.lens(function (v) {
          return v.soap;
      })(function (v) {
          return function (v1) {
              return {
                  soap: v1,
                  moveWhenHover: v.moveWhenHover,
                  soapMode: v.soapMode
              };
          };
      })(dictStrong);
      return function ($82) {
          return $80($81($82));
      };
  };
  var _soapMode = function (dictStrong) {
      var $83 = _ext$prime(dictStrong);
      var $84 = Data_Lens_Lens.lens(function (v) {
          return v.soapMode;
      })(function (v) {
          return function (v1) {
              return {
                  soapMode: v1,
                  moveWhenHover: v.moveWhenHover,
                  soap: v.soap
              };
          };
      })(dictStrong);
      return function ($85) {
          return $83($84($85));
      };
  };
  var game_ = new Game_Core.TwoPlayersGame(function () {
      return game;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return ((v1.col - v.left | 0) ^ ((v.right - v1.col | 0) - 1 | 0) ^ (v1.row - v.top | 0) ^ ((v.bottom - v1.row | 0) - 1 | 0)) === 0;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.left + 1 | 0)(v1.col))(FromLeft.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.col + 1 | 0)(v.right - 1 | 0))(FromRight.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.top + 1 | 0)(v1.row))(FromTop.create))(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.row + 1 | 0)(v.bottom - 1 | 0))(FromBottom.create))));
  });
  var game = new Game_Core.Game(Game_Core["computerMove'"](game_), function (st) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)({
          left: 0,
          right: Data_Lens_Getter.viewOn(st)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
          top: 0,
          bottom: Data_Lens_Getter.viewOn(st)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))
      });
  }, (function () {
      var $86 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($87) {
          return (function (p) {
              return p.left === (p.right - 1 | 0) && p.top === (p.bottom - 1 | 0);
          })($86($87));
      };
  })(), function (state) {
      return Control_Bind.bind(Control_Monad_Free.freeBind)((function () {
          var $62 = Data_Eq.eq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(StandardMode.value);
          if ($62) {
              return Pha_Random["int'"](Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          };
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(0);
      })())(function (row) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)((function () {
              var $63 = Data_Eq.notEq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(CornerMode.value);
              if ($63) {
                  return Pha_Random["int'"](Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)));
              };
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(0);
          })())(function (col) {
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_soap(Data_Profunctor_Strong.strongFn))({
                  row: row,
                  col: col
              })(state));
          });
      });
  }, Control_Category.identity(Control_Category.categoryFn), function (st) {
      var p = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function (v) {
          if (v instanceof FromLeft) {
              return new Data_Maybe.Just({
                  left: v.value0,
                  bottom: p.bottom,
                  right: p.right,
                  top: p.top
              });
          };
          if (v instanceof FromTop) {
              return new Data_Maybe.Just({
                  top: v.value0,
                  bottom: p.bottom,
                  left: p.left,
                  right: p.right
              });
          };
          if (v instanceof FromRight) {
              return new Data_Maybe.Just({
                  right: v.value0,
                  bottom: p.bottom,
                  left: p.left,
                  top: p.top
              });
          };
          if (v instanceof FromBottom) {
              return new Data_Maybe.Just({
                  bottom: v.value0,
                  left: p.left,
                  right: p.right,
                  top: p.top
              });
          };
          throw new Error("Failed pattern match at Game.Chocolat.Model (line 43, column 15 - line 47, column 46): " + [ v.constructor.name ]);
      };
  }, Data_Function["const"](new Game_Core.SizeLimit(4, 4, 10, 10)), function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(game)(v.value0);
      };
      if (v instanceof SetHover) {
          return Pha_Update.purely(Data_Lens_Setter.set(_moveWhenHover(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetSoapMode) {
          return Game_Core.newGame(game)(Data_Lens_Setter.set(_soapMode(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Control_Apply.applySecond(Run.applyRun)(Pha_Update.purely(Data_Lens_Setter.set(_moveWhenHover(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)))(Game_Core.playA(game)(v.value0));
      };
      throw new Error("Failed pattern match at Game.Chocolat.Model (line 87, column 1 - line 87, column 33): " + [ v.constructor.name ]);
  };
  exports["FromLeft"] = FromLeft;
  exports["FromRight"] = FromRight;
  exports["FromTop"] = FromTop;
  exports["FromBottom"] = FromBottom;
  exports["CornerMode"] = CornerMode;
  exports["BorderMode"] = BorderMode;
  exports["StandardMode"] = StandardMode;
  exports["_soap"] = _soap;
  exports["_soapMode"] = _soapMode;
  exports["_moveWhenHover"] = _moveWhenHover;
  exports["istate"] = istate;
  exports["cutLine"] = cutLine;
  exports["SetHover"] = SetHover;
  exports["SetSoapMode"] = SetSoapMode;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["eqSoapMode"] = eqSoapMode;
  exports["game"] = game;
  exports["game_"] = game_;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Chocolat.View"] = $PS["Game.Chocolat.View"] || {};
  var exports = $PS["Game.Chocolat.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var inside = function (state) {
      return function (row) {
          return function (col) {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
              return col >= v.left && (col <= (v.right - 1 | 0) && (row >= v.top && row <= (v.bottom - 1 | 0)));
          };
      };
  };
  var view = function (state) {
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var pos = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var v = Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soap"](Data_Lens_Internal_Forget.strongForget));
      var winTitle = UI_Template.winTitleFor2Players(state);
      var rules = [ Pha.text("Chocolat est un jeu \xe0 deux joueurs."), Pha_Elements.br, Pha.text("A chaque tour, un joueur coupe la barre de chocolat en deux et conserve celle qui contient le carr\xe9 empoisonn\xe9."), Pha_Elements.br, Pha.text("Lorsqu'il ne reste que le carr\xe9 empoisonn\xe9, le joueur qui doit jouer a perdu.") ];
      var cutter = function (row) {
          return function (col) {
              return function (move) {
                  return Pha_Svg.circle([ Pha_Svg.cx(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(col))), Pha_Svg.cy(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(row))), Pha_Svg.r("7"), Pha.key("c" + Data_Show.show(Data_Show.showInt)((row * (columns + 1 | 0) | 0) + col | 0)), Pha.class_("chocolat-cutter"), Pha_Events.onpointerenter(new Game_Chocolat_Model.SetHover(new Data_Maybe.Just(move))), Pha_Events.onpointerleave(new Game_Chocolat_Model.SetHover(Data_Maybe.Nothing.value)), Pha_Events.onclick(new Game_Chocolat_Model.Play(move)) ]);
              };
          };
      };
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(3))([ Pha.class_("ui-board") ]))([ Pha_Svg.svg([ Pha_Svg.viewBox(-7 | 0)(-7 | 0)((50 * columns | 0) + 14 | 0)((50 * rows | 0) + 14 | 0) ])(Data_Array.concat([ Lib_Util.repeat2(rows)(columns)(function (row) {
          return function (col) {
              return Pha_Svg.rect([ Pha.key("choc" + Data_Show.show(Data_Show.showInt)((row * columns | 0) + col | 0)), Pha.style("transform")(Pha_Util.translate(Pha_Util["px'"](50 * col | 0))(Pha_Util["px'"](50 * row | 0))), Pha.class_("chocolat-square"), Pha["class'"]("soap")(row === v.row && col === v.col), Pha["class'"]("hidden")(!inside(state)(row)(col)) ]);
          };
      }), Control_Bind.bind(Control_Bind.bindArray)(Game_Core.possibleMoves(Game_Chocolat_Model.game_)(state))(function (v1) {
          if (v1 instanceof Game_Chocolat_Model.FromLeft) {
              return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)) ];
          };
          if (v1 instanceof Game_Chocolat_Model.FromRight) {
              return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)) ];
          };
          if (v1 instanceof Game_Chocolat_Model.FromTop) {
              return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromTop(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromTop(v1.value0)) ];
          };
          if (v1 instanceof Game_Chocolat_Model.FromBottom) {
              return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromBottom(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromBottom(v1.value0)) ];
          };
          throw new Error("Failed pattern match at Game.Chocolat.View (line 62, column 41 - line 66, column 105): " + [ v1.constructor.name ]);
      }), [ Pha_Svg.use("#skull")([ Pha_Svg.x_(Data_Show.show(Data_Show.showInt)((50 * v.col | 0) + 12 | 0)), Pha_Svg.y_(Data_Show.show(Data_Show.showInt)((50 * v.row | 0) + 12 | 0)), Pha_Svg.width("26"), Pha_Svg.height("26"), Pha.key("skull"), Pha.class_("chocolat-skull") ]), Pha.maybe(Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_moveWhenHover"](Data_Lens_Internal_Forget.strongForget)))(function (m) {
          var v1 = Game_Chocolat_Model.cutLine(state)(m);
          return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showInt)(50 * v1.x1 | 0)), Pha_Svg.y1(Data_Show.show(Data_Show.showInt)(50 * v1.y1 | 0)), Pha_Svg.x2(Data_Show.show(Data_Show.showInt)(50 * v1.x2 | 0)), Pha_Svg.y2(Data_Show.show(Data_Show.showInt)(50 * v1.y2 | 0)), Pha.key("line"), Pha.class_("chocolat-cut-line") ]);
      }) ] ])) ]);
      var config = UI_Template.card("Barre de chocolat")([ UI_Icons.iconSizesGroup(Game_Chocolat_Model.withcore)(state)([ new Data_Tuple.Tuple(6, 7) ])(true), UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Chocolat_Model.eqSoapMode)(state)("Emplacement du savon")([ Game_Chocolat_Model.CornerMode.value, Game_Chocolat_Model.BorderMode.value, Game_Chocolat_Model.StandardMode.value ])(Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soapMode"](Data_Lens_Internal_Forget.strongForget)))(Game_Chocolat_Model.SetSoapMode.create)(function (mode) {
          return function (opt) {
              if (mode instanceof Game_Chocolat_Model.CornerMode) {
                  return {
                      icon: new UI_Icon.IconSymbol("#choc-mode0"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Dans le coin"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (mode instanceof Game_Chocolat_Model.BorderMode) {
                  return {
                      icon: new UI_Icon.IconSymbol("#choc-mode1"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Sur un bord"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (mode instanceof Game_Chocolat_Model.StandardMode) {
                  return {
                      icon: new UI_Icon.IconSymbol("#choc-mode2"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("N'importe o\xf9"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              throw new Error("Failed pattern match at Game.Chocolat.View (line 31, column 60 - line 34, column 103): " + [ mode.constructor.name ]);
          };
      }), UI_Icons.icons2Players(Game_Chocolat_Model.withcore)(Game_Chocolat_Model.game)(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Chocolat_Model.withcore), UI_Icons.iredo(Game_Chocolat_Model.withcore), UI_Icons.ireset(Game_Chocolat_Model.withcore), UI_Icons.irules(Game_Chocolat_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = UI_Template.incDecGrid(Game_Chocolat_Model.withcore)(Game_Chocolat_Model.game)(state)([ grid, Pha_Elements.span([ Pha.class_("frog-turn-message") ])([ Pha.text(UI_Template.turnMessage(Game_Chocolat_Model.game)(state)) ]) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Chocolat_Model.withcore)(Game_Chocolat_Model.game)({
          config: config,
          board: board,
          rules: rules,
          winTitle: winTitle
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Chocolat"] = $PS["Game.Chocolat"] || {};
  var exports = $PS["Game.Chocolat"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Chocolat_View = $PS["Game.Chocolat.View"];
  var Game_Core = $PS["Game.Core"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Chocolat_Model.withcore)(Game_Core.Init.value)),
      view: Game_Chocolat_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Dessin.Model"] = $PS["Game.Dessin.Model"] || {};
  var exports = $PS["Game.Dessin.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetGraphIndex = (function () {
      function SetGraphIndex(value0) {
          this.value0 = value0;
      };
      SetGraphIndex.create = function (value0) {
          return new SetGraphIndex(value0);
      };
      return SetGraphIndex;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Edge = (function () {
      function Edge(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Edge.create = function (value0) {
          return function (value1) {
              return new Edge(value0, value1);
          };
      };
      return Edge;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var nbRaises = (function () {
      var $63 = Data_Array.filter(Data_Maybe.isNothing);
      var $64 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($65) {
          return Data_Array.length($63($64($65)));
      };
  })();
  var house = {
      vertices: [ {
          x: 1.0,
          y: 4.0
      }, {
          x: 3.0,
          y: 4.0
      }, {
          x: 1.0,
          y: 2.0
      }, {
          x: 3.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 1.0
      } ],
      edges: [ new Edge(0, 1), new Edge(0, 2), new Edge(0, 3), new Edge(1, 2), new Edge(1, 3), new Edge(2, 3), new Edge(2, 4), new Edge(3, 4) ]
  };
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      graphIndex: 0,
      graph: house
  });
  var ex3 = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 1.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 3.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 1.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 1.0
      }, {
          x: 2.0,
          y: 2.0
      } ])(function (v) {
          return {
              x: v.x * 1.3,
              y: v.y * 1.3 - 0.3
          };
      }),
      edges: [ new Edge(0, 1), new Edge(1, 2), new Edge(2, 3), new Edge(3, 0), new Edge(0, 8), new Edge(1, 8), new Edge(2, 8), new Edge(3, 8), new Edge(0, 4), new Edge(1, 4), new Edge(0, 5), new Edge(3, 5), new Edge(2, 6), new Edge(3, 6), new Edge(1, 7), new Edge(2, 7) ]
  };
  var ex2 = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 1.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 3.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 1.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 1.0
      } ])(function (v) {
          return {
              x: v.x * 1.3,
              y: v.y * 1.3 - 0.3
          };
      }),
      edges: [ new Edge(0, 1), new Edge(1, 2), new Edge(2, 3), new Edge(3, 0), new Edge(0, 2), new Edge(0, 4), new Edge(1, 4), new Edge(0, 5), new Edge(3, 5), new Edge(2, 6), new Edge(3, 6), new Edge(1, 7), new Edge(2, 7) ]
  };
  var ex1 = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 1.0,
          y: 0.0
      }, {
          x: 0.0,
          y: 1.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 2.0
      }, {
          x: 0.0,
          y: 3.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 1.0,
          y: 4.0
      }, {
          x: 0.0,
          y: 5.0
      }, {
          x: 2.0,
          y: 5.0
      } ])(function (v) {
          return {
              x: v.x * 0.9 + 1.0,
              y: v.y * 0.9 + 0.2
          };
      }),
      edges: [ new Edge(0, 1), new Edge(0, 2), new Edge(1, 2), new Edge(1, 3), new Edge(2, 3), new Edge(3, 4), new Edge(3, 5), new Edge(4, 5), new Edge(1, 4), new Edge(2, 5), new Edge(4, 6), new Edge(5, 6), new Edge(6, 7), new Edge(6, 8), new Edge(4, 7), new Edge(5, 8) ]
  };
  var eqEdge = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0 === v1.value0 && v.value1 === v1.value1 || v.value0 === v1.value1 && v1.value0 === v.value1;
      };
  });
  var edgesOf = (function () {
      var toEdge = function (v) {
          if (v.value0 instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(new Edge(v.value0.value0, v.value1.value0));
          };
          return Data_Maybe.Nothing.value;
      };
      var $66 = Data_Array.mapMaybe(toEdge);
      return function ($67) {
          return $66(Lib_Util.pairwise($67));
      };
  })();
  var cross = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 0.0,
          y: 1.0
      }, {
          x: 0.0,
          y: 2.0
      }, {
          x: 0.5,
          y: 1.5
      }, {
          x: 1.0,
          y: 0.0
      }, {
          x: 1.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 2.0
      }, {
          x: 1.0,
          y: 3.0
      }, {
          x: 1.5,
          y: 0.5
      }, {
          x: 1.5,
          y: 1.5
      }, {
          x: 1.5,
          y: 2.5
      }, {
          x: 2.0,
          y: 0.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 2.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 2.5,
          y: 1.5
      }, {
          x: 3.0,
          y: 1.0
      }, {
          x: 3.0,
          y: 2.0
      } ])(function (v) {
          return {
              x: v.x * 1.3 + 0.5,
              y: v.y * 1.3 + 0.5
          };
      }),
      edges: [ new Edge(0, 1), new Edge(0, 2), new Edge(1, 2), new Edge(0, 4), new Edge(1, 5), new Edge(2, 4), new Edge(2, 5), new Edge(3, 4), new Edge(4, 5), new Edge(5, 6), new Edge(3, 7), new Edge(4, 7), new Edge(4, 8), new Edge(5, 8), new Edge(5, 9), new Edge(6, 9), new Edge(3, 10), new Edge(4, 11), new Edge(5, 12), new Edge(6, 13), new Edge(7, 10), new Edge(7, 11), new Edge(8, 11), new Edge(8, 12), new Edge(9, 12), new Edge(9, 13), new Edge(10, 11), new Edge(11, 12), new Edge(12, 13), new Edge(11, 14), new Edge(12, 14), new Edge(11, 15), new Edge(12, 16), new Edge(14, 15), new Edge(14, 16), new Edge(15, 16) ]
  };
  var graphs = [ house, ex1, ex2, ex3, cross ];
  var _ext$prime = function (dictStrong) {
      var $68 = Game_Core["_ext"](dictStrong);
      var $69 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($70) {
          return $68($69($70));
      };
  };
  var _graph = function (dictStrong) {
      var $71 = _ext$prime(dictStrong);
      var $72 = Data_Lens_Lens.lens(function (v) {
          return v.graph;
      })(function (v) {
          return function (v1) {
              return {
                  graph: v1,
                  graphIndex: v.graphIndex
              };
          };
      })(dictStrong);
      return function ($73) {
          return $71($72($73));
      };
  };
  var _graphIndex = function (dictStrong) {
      var $74 = _ext$prime(dictStrong);
      var $75 = Data_Lens_Lens.lens(function (v) {
          return v.graphIndex;
      })(function (v) {
          return function (v1) {
              return {
                  graphIndex: v1,
                  graph: v.graph
              };
          };
      })(dictStrong);
      return function ($76) {
          return $74($75($76));
      };
  };
  var game = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)([  ]);
  }, function (state) {
      return Data_Array.length(edgesOf(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))) === Data_Array.length((Data_Lens_Getter.viewOn(state)(_graph(Data_Lens_Internal_Forget.strongForget))).edges);
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_graph(Data_Profunctor_Strong.strongFn))(Data_Maybe.fromMaybe(house)(Data_Array.index(graphs)(Data_Lens_Getter.viewOn(state)(_graphIndex(Data_Lens_Internal_Forget.strongForget)))))(state));
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (x) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var v = new Data_Tuple.Tuple(x, Data_Array.last(position));
          if (v.value0 instanceof Data_Maybe.Nothing && (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Data_Maybe.Just)) {
              return new Data_Maybe.Just(Data_Array.snoc(position)(x));
          };
          if (v.value0 instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_Maybe.Just && (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Data_Maybe.Just)) {
              var $53 = !Data_Foldable.elem(Data_Foldable.foldableArray)(eqEdge)(new Edge(v.value0.value0, v.value1.value0.value0))(edgesOf(position)) && Data_Foldable.elem(Data_Foldable.foldableArray)(eqEdge)(new Edge(v.value0.value0, v.value1.value0.value0))((Data_Lens_Getter.viewOn(state)(_graph(Data_Lens_Internal_Forget.strongForget))).edges);
              if ($53) {
                  return new Data_Maybe.Just(Data_Array.snoc(position)(x));
              };
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(Data_Array.snoc(position)(x));
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(game)(v.value0);
      };
      if (v instanceof SetGraphIndex) {
          return Game_Core.newGame(game)(Data_Lens_Setter.set(_graphIndex(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Game_Core.playA(game)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Dessin.Model (line 125, column 1 - line 125, column 33): " + [ v.constructor.name ]);
  };
  exports["_graphIndex"] = _graphIndex;
  exports["_graph"] = _graph;
  exports["istate"] = istate;
  exports["edgesOf"] = edgesOf;
  exports["nbRaises"] = nbRaises;
  exports["SetGraphIndex"] = SetGraphIndex;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["game"] = game;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Dessin.View"] = $PS["Game.Dessin.View"] || {};
  var exports = $PS["Game.Dessin.View"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Dessin_Model = $PS["Game.Dessin.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var getCoords = function (graph) {
      return function (u) {
          return Data_Array.index(graph.vertices)(u);
      };
  };
  var getCoordsOfEdge = function (graph) {
      return function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(getCoords(graph)(v.value0))(function (v2) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(getCoords(graph)(v.value1))(function (v3) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                      px1: v2.x,
                      px2: v3.x,
                      py1: v2.y,
                      py2: v3.y
                  });
              });
          });
      };
  };
  var currentLine = function (p1) {
      return function (p2) {
          return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(100.0 * p1.x)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(100.0 * p1.y)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(20.0 * p2.x)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(20.0 * p2.y)), Pha.class_("dessin-line-to-pointer") ]);
      };
  };
  var view = function (state) {
      var rules = [ Pha.text("Le but du jeu est de dessiner le motif indiqu\xe9 en pointill\xe9 en levant le moins souvent possible le crayon."), Pha_Elements.br, Pha.text("Pour lever le crayon, tu peux cliquer sur le bouton pr\xe9vu pour ou utiliser le clic droit.") ];
      var raises = Game_Dessin_Model.nbRaises(state);
      var s = (function () {
          var $17 = raises > 1;
          if ($17) {
              return "s";
          };
          return "";
      })();
      var winTitle = "Tu as r\xe9ussi en " + (Data_Show.show(Data_Show.showInt)(raises) + (" lev\xe9" + s));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var graph = Data_Lens_Getter.viewOn(state)(Game_Dessin_Model["_graph"](Data_Lens_Internal_Forget.strongForget));
      var config = UI_Template.card("Dessin")([ UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Dessin")([ 0, 1, 2, 3, 4 ])(Data_Lens_Getter.viewOn(state)(Game_Dessin_Model["_graphIndex"](Data_Lens_Internal_Forget.strongForget)))(Game_Dessin_Model.SetGraphIndex.create)(function (i) {
          return function (v) {
              return {
                  icon: new UI_Icon.IconText(Data_Show.show(Data_Show.showInt)(i + 1 | 0)),
                  selected: v.selected,
                  tooltip: v.tooltip,
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          };
      }), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Dessin_Model.withcore), UI_Icons.iredo(Game_Dessin_Model.withcore), UI_Icons.ireset(Game_Dessin_Model.withcore), UI_Icons.irules(Game_Dessin_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.trackPointer(Game_Dessin_Model.withcore))([ Pha.class_("ui-board dessin-board"), Pha_Events.oncontextmenu(new Game_Dessin_Model.Play(Data_Maybe.Nothing.value)) ]))([ Pha_Svg.svg([ Pha.class_("dessin-svg"), Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_Array.concat([ Data_Functor.mapFlipped(Data_Functor.functorArray)(graph.edges)(function (edge) {
          return Pha.maybe(getCoordsOfEdge(graph)(edge))(function (v) {
              return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(20.0 * v.px1)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(20.0 * v.py1)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(20.0 * v.px2)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(20.0 * v.py2)), Pha.class_("dessin-line1") ]);
          });
      }), Data_Functor.mapFlipped(Data_Functor.functorArray)(Game_Dessin_Model.edgesOf(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))))(function (edge) {
          return Pha.maybe(getCoordsOfEdge(graph)(edge))(function (v) {
              return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(20.0 * v.px1)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(20.0 * v.py1)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(20.0 * v.px2)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(20.0 * v.py2)), Pha.class_("dessin-line2") ]);
          });
      }), Data_Array.mapWithIndex(function (i) {
          return function (v) {
              return Pha_Svg.circle([ Pha_Svg.cx(Data_Show.show(Data_Show.showNumber)(20.0 * v.x)), Pha_Svg.cy(Data_Show.show(Data_Show.showNumber)(20.0 * v.y)), Pha_Svg.r("3"), Pha_Svg.stroke((function () {
                  var $29 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Maybe.eqMaybe(Data_Eq.eqInt)))(new Data_Maybe.Just(new Data_Maybe.Just(i)))(Data_Array.last(position));
                  if ($29) {
                      return "red";
                  };
                  return "blue";
              })()), Pha_Svg.fill("blue"), Pha_Events.onclick(new Game_Dessin_Model.Play(new Data_Maybe.Just(i))) ]);
          };
      })(graph.vertices), [ Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(currentLine)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(getCoords(graph))(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.last(position))))) ] ])), Pha_Elements.span([ Pha.class_("dessin-raise-info dessin-raise-info") ])([ Pha.text(Data_Show.show(Data_Show.showInt)(raises) + (" lev\xe9" + (s + " de crayon"))) ]), Pha_Elements.button([ Pha.class_("ui-button ui-button-primary dessin-raise"), Pha_Attributes.disabled(!Game_Core.canPlay(Game_Dessin_Model.game)(state)(Data_Maybe.Nothing.value)), Pha_Events.onclick(new Game_Dessin_Model.Play(Data_Maybe.Nothing.value)) ])([ Pha.text("Lever le crayon") ]) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Dessin_Model.withcore)(Game_Dessin_Model.game)({
          config: config,
          board: board,
          rules: rules,
          winTitle: winTitle
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Dessin"] = $PS["Game.Dessin"] || {};
  var exports = $PS["Game.Dessin"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Dessin_Model = $PS["Game.Dessin.Model"];
  var Game_Dessin_View = $PS["Game.Dessin.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Dessin_Model.withcore)(Game_Core.Init.value)),
      view: Game_Dessin_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function(exports) {
  exports.getLoc = () => Object.assign({}, window.location);
})(PS["Game.Effs"] = PS["Game.Effs"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Effs"] = $PS["Game.Effs"] || {};
  var exports = $PS["Game.Effs"];
  var $foreign = $PS["Game.Effs"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect = $PS["Effect"];
  var Run = $PS["Run"];                
  var GetLocation = (function () {
      function GetLocation(value0) {
          this.value0 = value0;
      };
      GetLocation.create = function (value0) {
          return new GetLocation(value0);
      };
      return GetLocation;
  })();
  var interpretLocation = function (v) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.getLoc)(v.value0);
  };
  var functorLoc = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new GetLocation(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
      };
  });
  var _location = Data_Symbol.SProxy.value;
  var getLocation = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "location";
  }))(functorLoc)(_location)(new GetLocation(Control_Category.identity(Control_Category.categoryFn)));
  exports["getLocation"] = getLocation;
  exports["interpretLocation"] = interpretLocation;
})(PS);
(function(exports) {
  ﻿const hasEdge = (graph, v, w) => graph[v].includes(w);

  const minBy = (list, fn) => {
      let min = undefined;
      let bestScore = Infinity;
      let n = list.length;
      for (let i = 0; i < n; i++) {
          const x = list[i];
          const score = fn(x);
          if (score < bestScore) {
              bestScore = score;
              min = x;
          } 
      }
      return min;
  };

  const maxBy = (list, fn) => minBy(list, x => -fn(x))

  const allDifferent = list => {
      let pred = null;
      const n = list.length;
      for (let i = 0; i < n; i++) {
          const x = list[i];
          if (x === pred)
              return false;
          pred = x;
      }
      return true;
  };


  function* sublists(n, k) {
      if (k === 0) {
          yield [];
      } else if (k <= n) {
          yield * sublists(n - 1, k);
          for (const l of sublists(n - 1, k - 1)) {
              yield l.concat(n - 1);
          }
      }
  }

  const makeArenaGraph = arena => {
      const adj = new Array(arena.size);
      const reverseAdj = new Array(arena.size);
    
      const confs = [...arena.AConfs(), ...arena.BConfs()];

      for (const conf of confs) {
          const econf = arena.encode(conf);
          adj[econf] = [];
          reverseAdj[econf] = []
      }

      for (const conf of confs) {
          for (const conf2 of arena.neighbors(conf)) {
              adj[arena.encode(conf)].push(conf2);
              reverseAdj[arena.encode(conf2)].push(conf);
          }
      }
      const attractor = computeAttractor(arena, adj, reverseAdj);
      return Object.assign({adj, reverseAdj, attractor}, arena);
  }

  const computeAttractor = (arena, adj, reverseAdj) => {
      const attractor = new Array(arena.size);
      const deg = new Array(arena.size);
      const stack = [];

      for (const conf of arena.BConfs()) {
          const econf = arena.encode(conf)
          const nbor = adj[econf];
          deg[econf] = nbor.length;
          if (nbor.length === 0) { // configurations gagnantes pour l'attaquant
              stack.push(conf);
              attractor[econf] = 1;
          }
      }

      while (stack.length > 0) {
          const elem = stack.shift();
          const eelem = arena.encode(elem);
          const elemval = attractor[eelem]
          for (const pred of reverseAdj[eelem]) {
              const epred = arena.encode(pred)
              if (!attractor[epred] && (arena.isAConf(pred) || --deg[epred] === 0)) {
                  attractor[epred] = elemval+1;
                  stack.push(pred);
              }
          }
      }
      return attractor;
  }

  const answer = (arenaGraph, conf) => {
      const defs = arenaGraph.adj[arenaGraph.encode(conf)];
      // on prilivégie les sommets qui ne sont pas dans l'attracteur
      return maxBy(defs, conf2 => arenaGraph.attractor[arenaGraph.encode(conf2)] || 1000);
  }


  function * multiMoves(graph, conf, i) {
      if (i === conf.length) {
          yield conf;
      } else {
          for (const conf2 of multiMoves(graph, conf, i + 1)) {
              yield conf2;
              for (const nbor of graph[conf2[i]]) {
                  const conf3 = conf2.slice();
                  conf3[i] = nbor;
                  yield conf3;
              }
          }
      }
  }
    
  function * attackerPossibilities(graph, guards) {
      for (let attack = 0; attack < graph.length; attack++) {
          if (!guards.includes(attack)) {
              yield guards.concat(attack);
          }
      }
  }
    
  function * oneGuardPossibilities (graph, conf) {
      const attack = conf[conf.length - 1];
      const guards = conf.slice(0, conf.length - 1);
    
      for (let i = 0; i < guards.length; i++) {
          if (hasEdge(graph, guards[i], attack)) {
              const guards2 = guards.slice();
              guards2[i] = attack;
              guards2.sort((a, b) => a - b);
              yield guards2;
          }
      }
  }
    
  function * allGuardsPossibilities (graph, conf) {
      const gconf = conf.slice();
      const attack = gconf.pop();
      for (const conf2 of multiMoves(graph, gconf, 0)) {
          const conf3 = conf2.slice();
          conf3.sort((a, b) => a - b);
          if (allDifferent(conf3) && conf3.includes(attack)) {
              yield conf3;
          }
      }
  }
    
  const oneRules = {
      attackerPossibilities,
      guardsPossibilities: oneGuardPossibilities
  };
    
  const allRules = {
      attackerPossibilities,
      guardsPossibilities: allGuardsPossibilities
  };
    
  const makeRules = name => name === 'one' ? oneRules : allRules;

  exports.guardsAnswerAux = nothing => just => edsgraph => guards => attack => {
      const ans = answer(edsgraph, guards.concat(attack));
      return !ans ? nothing : just(ans);
  };

  exports.attackerAnswerAux = nothing => just => arenaGraph => conf => {
      const econf = arenaGraph.encode(conf); 
      if(!arenaGraph.attractor[econf])
          return nothing;
      const attacks = arenaGraph.adj[econf]
      const minattack = minBy(attacks, attack => arenaGraph.attractor[arenaGraph.encode(attack)] || 1000)
      return just(minattack[minattack.length-1]);
  }

  exports.makeEDSAux = graph => rulesName => k => {
      const n = graph.length
      const rules = makeRules(rulesName)
      function* bconfs () {
          for (const conf of sublists(graph.length, k)) {
              for (let i = 0; i < n; i++) {
                  if (!conf.includes(i)) {
                      yield conf.concat(i);
                  }
              }
          }
      }

      const arena = {
          size: n << k,
          AConfs: (() => sublists(graph.length, k)),
          BConfs: bconfs,
          isAConf: (conf => conf.length === k),
          neighbors: (conf => conf.length === k
              ? rules.attackerPossibilities(graph, conf)
              : rules.guardsPossibilities(graph, conf)
          ),
          encode: array => {
              let acc = 0
              const last = array[k]; 
              for (let i = 0; i < k; i++) {
                 acc += (1 << array[i])
              }
              if (last != null)
                  acc += (last + 1) << n 
              return acc;
          }
      };
      return makeArenaGraph(arena);
  };
})(PS["Game.Eternal.Model"] = PS["Game.Eternal.Model"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Eternal.Model"] = $PS["Game.Eternal.Model"] || {};
  var exports = $PS["Game.Eternal.Model"];
  var $foreign = $PS["Game.Eternal.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var OneGuard = (function () {
      function OneGuard() {

      };
      OneGuard.value = new OneGuard();
      return OneGuard;
  })();
  var ManyGuards = (function () {
      function ManyGuards() {

      };
      ManyGuards.value = new ManyGuards();
      return ManyGuards;
  })();
  var PrepPhase = (function () {
      function PrepPhase() {

      };
      PrepPhase.value = new PrepPhase();
      return PrepPhase;
  })();
  var GamePhase = (function () {
      function GamePhase() {

      };
      GamePhase.value = new GamePhase();
      return GamePhase;
  })();
  var Attack = (function () {
      function Attack(value0) {
          this.value0 = value0;
      };
      Attack.create = function (value0) {
          return new Attack(value0);
      };
      return Attack;
  })();
  var Defense = (function () {
      function Defense(value0) {
          this.value0 = value0;
      };
      Defense.create = function (value0) {
          return new Defense(value0);
      };
      return Defense;
  })();
  var Path = (function () {
      function Path() {

      };
      Path.value = new Path();
      return Path;
  })();
  var Cycle = (function () {
      function Cycle() {

      };
      Cycle.value = new Cycle();
      return Cycle;
  })();
  var Grid = (function () {
      function Grid() {

      };
      Grid.value = new Grid();
      return Grid;
  })();
  var Biclique = (function () {
      function Biclique() {

      };
      Biclique.value = new Biclique();
      return Biclique;
  })();
  var Sun = (function () {
      function Sun() {

      };
      Sun.value = new Sun();
      return Sun;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetGraphKind = (function () {
      function SetGraphKind(value0) {
          this.value0 = value0;
      };
      SetGraphKind.create = function (value0) {
          return new SetGraphKind(value0);
      };
      return SetGraphKind;
  })();
  var SetRules = (function () {
      function SetRules(value0) {
          this.value0 = value0;
      };
      SetRules.create = function (value0) {
          return new SetRules(value0);
      };
      return SetRules;
  })();
  var DragGuard = (function () {
      function DragGuard(value0) {
          this.value0 = value0;
      };
      DragGuard.create = function (value0) {
          return new DragGuard(value0);
      };
      return DragGuard;
  })();
  var DropGuard = (function () {
      function DropGuard(value0) {
          this.value0 = value0;
      };
      DropGuard.create = function (value0) {
          return new DropGuard(value0);
      };
      return DropGuard;
  })();
  var LeaveGuard = (function () {
      function LeaveGuard() {

      };
      LeaveGuard.value = new LeaveGuard();
      return LeaveGuard;
  })();
  var DropOnBoard = (function () {
      function DropOnBoard() {

      };
      DropOnBoard.value = new DropOnBoard();
      return DropOnBoard;
  })();
  var StartGame = (function () {
      function StartGame() {

      };
      StartGame.value = new StartGame();
      return StartGame;
  })();
  var MoveGuards = (function () {
      function MoveGuards() {

      };
      MoveGuards.value = new MoveGuards();
      return MoveGuards;
  })();
  var ToggleGuard = (function () {
      function ToggleGuard(value0) {
          this.value0 = value0;
      };
      ToggleGuard.create = function (value0) {
          return new ToggleGuard(value0);
      };
      return ToggleGuard;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Edge = (function () {
      function Edge(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Edge.create = function (value0) {
          return function (value1) {
              return new Edge(value0, value1);
          };
      };
      return Edge;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var toggleGuard = function (x) {
      return function (l) {
          var $75 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(x)(l);
          if ($75) {
              return Data_Array.filter(function (v) {
                  return v !== x;
              })(l);
          };
          return Data_Array.snoc(l)(x);
      };
  };
  var sun = function (n) {
      return {
          vertices: Lib_Util.repeat(2 * n | 0)(function (i) {
              return {
                  x: 0.5 + (function () {
                      var $76 = Data_Int.even(i);
                      if ($76) {
                          return 0.2;
                      };
                      return 0.4;
                  })() * $$Math.cos((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(2 * n | 0)),
                  y: 0.46 + (function () {
                      var $77 = Data_Int.even(i);
                      if ($77) {
                          return 0.2;
                      };
                      return 0.4;
                  })() * $$Math.sin((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(2 * n | 0))
              };
          }),
          edges: Data_Array.filter(function (v) {
              return v.value0 < v.value1 && ((v.value0 + 1 | 0) === v.value1 || (Data_Int.even(v.value0) && Data_Int.even(v.value1) || v.value0 === 0 && v.value1 === ((2 * n | 0) - 1 | 0)));
          })(Lib_Util.repeat2(2 * n | 0)(2 * n | 0)(Edge.create))
      };
  };
  var permutations = function (t) {
      var v = Data_Array.uncons(t);
      if (v instanceof Data_Maybe.Nothing) {
          return [ [  ] ];
      };
      if (v instanceof Data_Maybe.Just) {
          return Control_Bind.bind(Control_Bind.bindArray)(permutations(v.value0.tail))(function (p) {
              return Control_Bind.bind(Control_Bind.bindArray)(Lib_Util["range'"](0)(Data_Array.length(v.value0.tail)))(function (i) {
                  return Data_Maybe.maybe([  ])(Control_Applicative.pure(Control_Applicative.applicativeArray))(Data_Array.insertAt(i)(v.value0.head)(p));
              });
          });
      };
      throw new Error("Failed pattern match at Game.Eternal.Model (line 129, column 18 - line 134, column 42): " + [ v.constructor.name ]);
  };
  var path = function (n) {
      return {
          vertices: Lib_Util.repeat(n)(function (i) {
              return {
                  x: 0.5 + 0.35 * $$Math.cos((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(n)),
                  y: 0.5 + 0.35 * $$Math.sin((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(n))
              };
          }),
          edges: Lib_Util.repeat(n - 1 | 0)(function (i) {
              return new Edge(i, i + 1 | 0);
          })
      };
  };
  var istate = Game_Core.genState({
      guards: [  ],
      attacked: Data_Maybe.Nothing.value
  })(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 6,
          nbColumns: v.nbColumns,
          customSize: true,
          mode: Game_Core.DuelMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      graphkind: Path.value,
      graph: path(1),
      nextmove: [  ],
      phase: PrepPhase.value,
      draggedGuard: Data_Maybe.Nothing.value,
      rules: OneGuard.value,
      arena: Data_Maybe.Nothing.value
  });
  var hasEdge = function (u) {
      return function (v) {
          return function (graph) {
              return Data_Maybe.maybe(false)(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v))(Data_Array.index(graph)(u));
          };
      };
  };
  var grid = function (n) {
      return function (m) {
          var p = Data_Ord.max(Data_Ord.ordInt)(n)(m);
          return {
              vertices: Lib_Util.repeat2(n)(m)(function (i) {
                  return function (j) {
                      return {
                          x: 0.15 + (0.7 * Data_Int.toNumber(i)) / Data_Int.toNumber(p - 1 | 0),
                          y: 0.1 + (0.7 * Data_Int.toNumber(j)) / Data_Int.toNumber(p - 1 | 0)
                      };
                  };
              }),
              edges: Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.repeat2(n)(m - 1 | 0)(function (i) {
                  return function (j) {
                      return new Edge((i * m | 0) + j | 0, ((i * m | 0) + j | 0) + 1 | 0);
                  };
              }))(Lib_Util.repeat2(n - 1 | 0)(m)(function (i) {
                  return function (j) {
                      return new Edge((i * m | 0) + j | 0, ((i * m | 0) + j | 0) + m | 0);
                  };
              }))
          };
      };
  };
  var goodPermutation = function (graph) {
      return function (guards) {
          return function (answer) {
              return Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Data_Ord.ordInt)(function (guards2) {
                  return Data_Array.length(Data_Array.filter(Control_Category.identity(Control_Category.categoryFn))(Data_Array.zipWith(function (x) {
                      return function (y) {
                          return x !== y;
                      };
                  })(guards)(guards2)));
              }))(Data_Array.filter(function (guards2) {
                  return Data_Foldable.and(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Array.zipWith(function (x) {
                      return function (y) {
                          return x === y || hasEdge(x)(y)(graph);
                      };
                  })(guards)(guards2));
              })(permutations(answer)));
          };
      };
  };
  var guardsAnwser = function (graph) {
      return function (arena) {
          return function (guards) {
              return function (attack) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.guardsAnswerAux(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(arena)(guards)(attack))(goodPermutation(graph)(guards));
              };
          };
      };
  };
  var eqrules = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof OneGuard && y instanceof OneGuard) {
              return true;
          };
          if (x instanceof ManyGuards && y instanceof ManyGuards) {
              return true;
          };
          return false;
      };
  });
  var eqgkind = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Path && y instanceof Path) {
              return true;
          };
          if (x instanceof Cycle && y instanceof Cycle) {
              return true;
          };
          if (x instanceof Grid && y instanceof Grid) {
              return true;
          };
          if (x instanceof Biclique && y instanceof Biclique) {
              return true;
          };
          if (x instanceof Sun && y instanceof Sun) {
              return true;
          };
          return false;
      };
  });
  var eqPhase = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof PrepPhase && y instanceof PrepPhase) {
              return true;
          };
          if (x instanceof GamePhase && y instanceof GamePhase) {
              return true;
          };
          return false;
      };
  });
  var eqEdge = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0 === v1.value0 && v.value1 === v1.value1 || v.value0 === v1.value1 && v1.value0 === v.value1;
      };
  });
  var cycle = function (n) {
      var g = path(n);
      return {
          vertices: g.vertices,
          edges: Data_Array.snoc(g.edges)(new Edge(0, n - 1 | 0))
      };
  };
  var biclique = function (m) {
      return function (n) {
          return {
              vertices: Lib_Util.repeat(n + m | 0)(function (i) {
                  return {
                      x: (function () {
                          var $97 = i < n;
                          if ($97) {
                              return 0.2;
                          };
                          return 0.8;
                      })(),
                      y: 0.75 - (0.7 * Data_Int.toNumber((function () {
                          var $98 = i < n;
                          if ($98) {
                              return i;
                          };
                          return i - n | 0;
                      })())) / Data_Int.toNumber((function () {
                          var $99 = i < n;
                          if ($99) {
                              return n;
                          };
                          return m;
                      })())
                  };
              }),
              edges: Lib_Util.repeat2(n)(m)(function (i) {
                  return function (j) {
                      return new Edge(i, j + n | 0);
                  };
              })
          };
      };
  };
  var attackerAnswer = $foreign.attackerAnswerAux(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var addToNextMove = function (edges) {
      return function (from) {
          return function (to) {
              return function (srcs) {
                  return function (dests) {
                      if (from === to || Data_Foldable.elem(Data_Foldable.foldableArray)(eqEdge)(new Edge(from, to))(edges)) {
                          var v = Data_Array.elemIndex(Data_Eq.eqInt)(from)(srcs);
                          if (v instanceof Data_Maybe.Nothing) {
                              return dests;
                          };
                          if (v instanceof Data_Maybe.Just) {
                              return Data_Lens_Setter.set(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction))(to)(dests);
                          };
                          throw new Error("Failed pattern match at Game.Eternal.Model (line 299, column 9 - line 301, column 41): " + [ v.constructor.name ]);
                      };
                      if (Data_Boolean.otherwise) {
                          return dests;
                      };
                      throw new Error("Failed pattern match at Game.Eternal.Model (line 296, column 1 - line 296, column 75): " + [ edges.constructor.name, from.constructor.name, to.constructor.name, srcs.constructor.name, dests.constructor.name ]);
                  };
              };
          };
      };
  };
  var addEdge = function (v) {
      return function (graph) {
          return Data_Lens_Setter.over(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value1)(Data_Lens_Internal_Wander.wanderFunction))(function (v2) {
              return Data_Array.snoc(v2)(v.value0);
          })(Data_Lens_Setter.over(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction))(function (v2) {
              return Data_Array.snoc(v2)(v.value1);
          })(graph));
      };
  };
  var edgesToGraph = function (n) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(addEdge)(Data_Array.replicate(n)([  ]));
  };
  var makeEDS = function (n) {
      return function (edges) {
          return function (rules) {
              return $foreign.makeEDSAux(edgesToGraph(n)(edges))((function () {
                  var $111 = Data_Eq.eq(eqrules)(rules)(OneGuard.value);
                  if ($111) {
                      return "one";
                  };
                  return "many";
              })());
          };
      };
  };
  var _guards = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.guards;
      })(function (v) {
          return function (v1) {
              return {
                  guards: v1,
                  attacked: v.attacked
              };
          };
      })(dictStrong);
  };
  var _ext$prime = function (dictStrong) {
      var $162 = Game_Core["_ext"](dictStrong);
      var $163 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($164) {
          return $162($163($164));
      };
  };
  var _graph = function (dictStrong) {
      var $165 = _ext$prime(dictStrong);
      var $166 = Data_Lens_Lens.lens(function (v) {
          return v.graph;
      })(function (v) {
          return function (v1) {
              return {
                  graph: v1,
                  arena: v.arena,
                  draggedGuard: v.draggedGuard,
                  graphkind: v.graphkind,
                  nextmove: v.nextmove,
                  phase: v.phase,
                  rules: v.rules
              };
          };
      })(dictStrong);
      return function ($167) {
          return $165($166($167));
      };
  };
  var isValidNextMove = function (st) {
      return function (dests) {
          var v = (Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).attacked;
          if (v instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (v instanceof Data_Maybe.Just) {
              var srcs = (Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards;
              var moveEdges = Data_Array.zipWith(Edge.create)(srcs)(dests);
              var edges = (Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).edges;
              return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v.value0)(dests) && (Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
                  return v1.value0 === v1.value1 || Data_Foldable.elem(Data_Foldable.foldableArray)(eqEdge)(v1)(edges);
              })(moveEdges) && Data_Array.length(Data_Array.nub(Data_Ord.ordInt)(dests)) === Data_Array.length(dests));
          };
          throw new Error("Failed pattern match at Game.Eternal.Model (line 193, column 5 - line 202, column 50): " + [ v.constructor.name ]);
      };
  };
  var _graphkind = function (dictStrong) {
      var $168 = _ext$prime(dictStrong);
      var $169 = Data_Lens_Lens.lens(function (v) {
          return v.graphkind;
      })(function (v) {
          return function (v1) {
              return {
                  graphkind: v1,
                  arena: v.arena,
                  draggedGuard: v.draggedGuard,
                  graph: v.graph,
                  nextmove: v.nextmove,
                  phase: v.phase,
                  rules: v.rules
              };
          };
      })(dictStrong);
      return function ($170) {
          return $168($169($170));
      };
  };
  var _nextmove = function (dictStrong) {
      var $171 = _ext$prime(dictStrong);
      var $172 = Data_Lens_Lens.lens(function (v) {
          return v.nextmove;
      })(function (v) {
          return function (v1) {
              return {
                  nextmove: v1,
                  arena: v.arena,
                  draggedGuard: v.draggedGuard,
                  graph: v.graph,
                  graphkind: v.graphkind,
                  phase: v.phase,
                  rules: v.rules
              };
          };
      })(dictStrong);
      return function ($173) {
          return $171($172($173));
      };
  };
  var _phase = function (dictStrong) {
      var $174 = _ext$prime(dictStrong);
      var $175 = Data_Lens_Lens.lens(function (v) {
          return v.phase;
      })(function (v) {
          return function (v1) {
              return {
                  phase: v1,
                  arena: v.arena,
                  draggedGuard: v.draggedGuard,
                  graph: v.graph,
                  graphkind: v.graphkind,
                  nextmove: v.nextmove,
                  rules: v.rules
              };
          };
      })(dictStrong);
      return function ($176) {
          return $174($175($176));
      };
  };
  var _rules = function (dictStrong) {
      var $177 = _ext$prime(dictStrong);
      var $178 = Data_Lens_Lens.lens(function (v) {
          return v.rules;
      })(function (v) {
          return function (v1) {
              return {
                  rules: v1,
                  arena: v.arena,
                  draggedGuard: v.draggedGuard,
                  graph: v.graph,
                  graphkind: v.graphkind,
                  nextmove: v.nextmove,
                  phase: v.phase
              };
          };
      })(dictStrong);
      return function ($179) {
          return $177($178($179));
      };
  };
  var _draggedGuard = function (dictStrong) {
      var $180 = _ext$prime(dictStrong);
      var $181 = Data_Lens_Lens.lens(function (v) {
          return v.draggedGuard;
      })(function (v) {
          return function (v1) {
              return {
                  draggedGuard: v1,
                  arena: v.arena,
                  graph: v.graph,
                  graphkind: v.graphkind,
                  nextmove: v.nextmove,
                  phase: v.phase,
                  rules: v.rules
              };
          };
      })(dictStrong);
      return function ($182) {
          return $180($181($182));
      };
  };
  var dragGuard = function (to) {
      return function (st) {
          var v = Data_Lens_Getter.viewOn(st)(_draggedGuard(Data_Lens_Internal_Forget.strongForget));
          if (v instanceof Data_Maybe.Nothing) {
              return st;
          };
          if (v instanceof Data_Maybe.Just) {
              var to2 = Data_Maybe.fromMaybe(v.value0)(to);
              return Data_Lens_Setter.set(_draggedGuard(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(Data_Lens_Setter.over(_nextmove(Data_Profunctor_Strong.strongFn))(addToNextMove((Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).edges)(v.value0)(to2)((Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards))(st));
          };
          throw new Error("Failed pattern match at Game.Eternal.Model (line 306, column 5 - line 310, column 123): " + [ v.constructor.name ]);
      };
  };
  var _arena = function (dictStrong) {
      var $183 = _ext$prime(dictStrong);
      var $184 = Data_Lens_Lens.lens(function (v) {
          return v.arena;
      })(function (v) {
          return function (v1) {
              return {
                  arena: v1,
                  draggedGuard: v.draggedGuard,
                  graph: v.graph,
                  graphkind: v.graphkind,
                  nextmove: v.nextmove,
                  phase: v.phase,
                  rules: v.rules
              };
          };
      })(dictStrong);
      return function ($185) {
          return $183($184($185));
      };
  };
  var startGame = function (st) {
      return Data_Lens_Setter.over(_arena(Data_Profunctor_Strong.strongFn))(function (arena) {
          var $120 = Data_Maybe.isJust(arena);
          if ($120) {
              return arena;
          };
          var $121 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(st)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
          if ($121) {
              return Data_Maybe.Nothing.value;
          };
          return Data_Maybe.Just.create(makeEDS(Data_Array.length((Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).vertices))((Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).edges)(Data_Lens_Getter.viewOn(st)(_rules(Data_Lens_Internal_Forget.strongForget)))(Data_Array.length((Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards)));
      })(Data_Lens_Setter.set(_nextmove(Data_Profunctor_Strong.strongFn))((Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards)(Data_Lens_Setter.set(_phase(Data_Profunctor_Strong.strongFn))(GamePhase.value)(st)));
  };
  var game = new Game_Core.Game(function (st) {
      if (Game_Core.isLevelFinished(game)(st)) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          var v = new Data_Tuple.Tuple(Data_Lens_Getter.viewOn(st)(_arena(Data_Lens_Internal_Forget.strongForget)), (Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).attacked);
          if (v.value0 instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Functor.map(Data_Maybe.functorMaybe)(Defense.create)(guardsAnwser(edgesToGraph(Data_Array.length((Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).vertices))((Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).edges))(v.value0.value0)((Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards)(v.value1.value0)));
          };
          if (v.value0 instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Nothing) {
              var v1 = attackerAnswer(v.value0.value0)((Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards);
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(new Data_Maybe.Just(new Attack(v1.value0)));
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(Pha_Random["element'"](Data_Array.filter(function (i) {
                      return !Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(i)((Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards);
                  })(Lib_Util["range'"](0)(Data_Array.length((Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).vertices) - 1 | 0))))(Data_Functor.map(Data_Maybe.functorMaybe)(Attack.create));
              };
              throw new Error("Failed pattern match at Game.Eternal.Model (line 275, column 17 - line 280, column 47): " + [ v1.constructor.name ]);
          };
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
      };
      throw new Error("Failed pattern match at Game.Eternal.Model (line 222, column 1 - line 291, column 31): " + [ st.constructor.name ]);
  }, function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)({
          guards: [  ],
          attacked: Data_Maybe.Nothing.value
      });
  }, function (state) {
      var guards = (Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards;
      var edges = (Data_Lens_Getter.viewOn(state)(_graph(Data_Lens_Internal_Forget.strongForget))).edges;
      var v = (Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).attacked;
      if (v instanceof Data_Maybe.Nothing) {
          return false;
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (guard) {
              return !Data_Foldable.elem(Data_Foldable.foldableArray)(eqEdge)(new Edge(guard, v.value0))(edges);
          })(guards);
      };
      throw new Error("Failed pattern match at Game.Eternal.Model (line 258, column 9 - line 261, column 72): " + [ v.constructor.name ]);
  }, function (state) {
      var state2 = Data_Lens_Setter.set(_arena(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(_draggedGuard(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(_phase(Data_Profunctor_Strong.strongFn))(PrepPhase.value)(Data_Lens_Setter.set(_nextmove(Data_Profunctor_Strong.strongFn))([  ])(state))));
      var v = Data_Lens_Getter.viewOn(state)(_graphkind(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof Path) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_graph(Data_Profunctor_Strong.strongFn))(path(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))))(state2));
      };
      if (v instanceof Cycle) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_graph(Data_Profunctor_Strong.strongFn))(cycle(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))))(state2));
      };
      if (v instanceof Grid) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_graph(Data_Profunctor_Strong.strongFn))(grid(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget))))(state2));
      };
      if (v instanceof Biclique) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_graph(Data_Profunctor_Strong.strongFn))(biclique(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget))))(state2));
      };
      if (v instanceof Sun) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_graph(Data_Profunctor_Strong.strongFn))(sun(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))))(state2));
      };
      throw new Error("Failed pattern match at Game.Eternal.Model (line 247, column 9 - line 252, column 65): " + [ v.constructor.name ]);
  }, startGame, function (state) {
      return function (v) {
          if (v instanceof Defense) {
              var v1 = (Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).attacked;
              if (v1 instanceof Data_Maybe.Just) {
                  var $139 = isValidNextMove(state)(v.value0);
                  if ($139) {
                      return new Data_Maybe.Just({
                          attacked: Data_Maybe.Nothing.value,
                          guards: v.value0
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Attack) {
              var $142 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v.value0)((Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards) || Data_Maybe.isJust((Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).attacked);
              if ($142) {
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Just.create((function () {
                  var v1 = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
                  return {
                      attacked: new Data_Maybe.Just(v.value0),
                      guards: v1.guards
                  };
              })());
          };
          throw new Error("Failed pattern match at Game.Eternal.Model (line 222, column 1 - line 291, column 31): " + [ state.constructor.name, v.constructor.name ]);
      };
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(_graphkind(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof Grid) {
          return new Game_Core.SizeLimit(2, 2, 6, 6);
      };
      if (v instanceof Sun) {
          return new Game_Core.SizeLimit(3, 0, 6, 0);
      };
      if (v instanceof Biclique) {
          return new Game_Core.SizeLimit(1, 1, 6, 6);
      };
      return new Game_Core.SizeLimit(3, 0, 11, 0);
  }, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(game)(v.value0);
      };
      if (v instanceof SetGraphKind) {
          return Game_Core.newGame(game)((function () {
              var $186 = Data_Lens_Setter.set(_graphkind(Data_Profunctor_Strong.strongFn))(v.value0);
              var $187 = (function () {
                  if (v.value0 instanceof Grid) {
                      var $189 = Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(3);
                      var $190 = Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(3);
                      return function ($191) {
                          return $189($190($191));
                      };
                  };
                  if (v.value0 instanceof Biclique) {
                      var $192 = Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(4);
                      var $193 = Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(1);
                      return function ($194) {
                          return $192($193($194));
                      };
                  };
                  if (v.value0 instanceof Sun) {
                      var $195 = Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(3);
                      var $196 = Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(0);
                      return function ($197) {
                          return $195($196($197));
                      };
                  };
                  var $198 = Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(6);
                  var $199 = Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(0);
                  return function ($200) {
                      return $198($199($200));
                  };
              })();
              return function ($188) {
                  return $186($187($188));
              };
          })());
      };
      if (v instanceof SetRules) {
          return Game_Core.newGame(game)(Data_Lens_Setter.set(_rules(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof StartGame) {
          return Pha_Update.purely(startGame);
      };
      if (v instanceof MoveGuards) {
          return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (st) {
              return Game_Core.playA(game)(new Defense(Data_Lens_Getter.viewOn(st)(_nextmove(Data_Lens_Internal_Forget.strongForget))));
          });
      };
      if (v instanceof ToggleGuard) {
          return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
      };
      if (v instanceof DragGuard) {
          return Pha_Update.purely(Data_Lens_Setter.set(_draggedGuard(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v.value0)));
      };
      if (v instanceof DropGuard) {
          return Pha_Update.purely(dragGuard(new Data_Maybe.Just(v.value0)));
      };
      if (v instanceof LeaveGuard) {
          return Pha_Update.purely(Data_Lens_Setter.set(_draggedGuard(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value));
      };
      if (v instanceof DropOnBoard) {
          return Pha_Update.purely(dragGuard(Data_Maybe.Nothing.value));
      };
      if (v instanceof Play) {
          return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (st) {
              var guards = (Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards;
              var v1 = new Data_Tuple.Tuple(Data_Lens_Getter.viewOn(st)(_phase(Data_Lens_Internal_Forget.strongForget)), (Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).attacked);
              if (v1.value0 instanceof PrepPhase) {
                  return Pha_Update.purely(Data_Lens_Setter.over((function () {
                      var $201 = Game_Core["_position"](Data_Profunctor_Strong.strongFn);
                      var $202 = _guards(Data_Profunctor_Strong.strongFn);
                      return function ($203) {
                          return $201($202($203));
                      };
                  })())(toggleGuard(v.value0)));
              };
              if (v1.value0 instanceof GamePhase && v1.value1 instanceof Data_Maybe.Just) {
                  return Game_Core.playA(game)(new Defense(addToNextMove((Data_Lens_Getter.viewOn(st)(_graph(Data_Lens_Internal_Forget.strongForget))).edges)(v.value0)(v1.value1.value0)(guards)(guards)));
              };
              if (v1.value0 instanceof GamePhase && v1.value1 instanceof Data_Maybe.Nothing) {
                  return Game_Core.playA(game)(new Attack(v.value0));
              };
              throw new Error("Failed pattern match at Game.Eternal.Model (line 341, column 5 - line 344, column 49): " + [ v1.constructor.name ]);
          });
      };
      throw new Error("Failed pattern match at Game.Eternal.Model (line 318, column 1 - line 318, column 33): " + [ v.constructor.name ]);
  };
  exports["Edge"] = Edge;
  exports["Path"] = Path;
  exports["Cycle"] = Cycle;
  exports["Grid"] = Grid;
  exports["Biclique"] = Biclique;
  exports["Sun"] = Sun;
  exports["OneGuard"] = OneGuard;
  exports["ManyGuards"] = ManyGuards;
  exports["PrepPhase"] = PrepPhase;
  exports["GamePhase"] = GamePhase;
  exports["_graph"] = _graph;
  exports["_nextmove"] = _nextmove;
  exports["_phase"] = _phase;
  exports["_graphkind"] = _graphkind;
  exports["_rules"] = _rules;
  exports["_draggedGuard"] = _draggedGuard;
  exports["istate"] = istate;
  exports["isValidNextMove"] = isValidNextMove;
  exports["SetGraphKind"] = SetGraphKind;
  exports["SetRules"] = SetRules;
  exports["DragGuard"] = DragGuard;
  exports["DropGuard"] = DropGuard;
  exports["LeaveGuard"] = LeaveGuard;
  exports["DropOnBoard"] = DropOnBoard;
  exports["StartGame"] = StartGame;
  exports["MoveGuards"] = MoveGuards;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["eqgkind"] = eqgkind;
  exports["eqrules"] = eqrules;
  exports["eqPhase"] = eqPhase;
  exports["game"] = game;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Eternal.View"] = $PS["Game.Eternal.View"] || {};
  var exports = $PS["Game.Eternal.View"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Common = $PS["Game.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Eternal_Model = $PS["Game.Eternal.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var translateGuard = function (v) {
      return Pha_Util.translate(Pha_Util.pc(v.x))(Pha_Util.pc(v.y));
  };
  var getCoords = function (graph) {
      return function (u) {
          return Data_Array.index(graph.vertices)(u);
      };
  };
  var getCoordsOfEdge = function (graph) {
      return function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(getCoords(graph)(v.value0))(function (v2) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(getCoords(graph)(v.value1))(function (v3) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                      px1: v2.x,
                      px2: v3.x,
                      py1: v2.y,
                      py2: v3.y
                  });
              });
          });
      };
  };
  var drawArrow = function (px1) {
      return function (px2) {
          return function (py1) {
              return function (py2) {
                  var dy = py2 - py1;
                  var dx = px2 - px1;
                  var len = $$Math.sqrt(dx * dx + dy * dy);
                  var angle$prime = $$Math.acos(dx / len);
                  var angle = (function () {
                      var $34 = dy >= 0.0;
                      if ($34) {
                          return 2.0 * $$Math.pi - angle$prime;
                      };
                      return angle$prime;
                  })();
                  var x3 = px2 + 6.0 * $$Math.sin(angle - $$Math.pi / 3.0);
                  var x4 = px2 + 6.0 * $$Math.sin(angle - (2.0 * $$Math.pi) / 3.0);
                  var y3 = py2 + 6.0 * $$Math.cos(angle - $$Math.pi / 3.0);
                  var y4 = py2 + 6.0 * $$Math.cos(angle - (2.0 * $$Math.pi) / 3.0);
                  var arrowPath = "M" + (Data_Show.show(Data_Show.showNumber)(px2) + ("," + (Data_Show.show(Data_Show.showNumber)(py2) + ("L" + (Data_Show.show(Data_Show.showNumber)(x3) + ("," + (Data_Show.show(Data_Show.showNumber)(y3) + ("L" + (Data_Show.show(Data_Show.showNumber)(x4) + ("," + (Data_Show.show(Data_Show.showNumber)(y4) + "z")))))))))));
                  return Pha_Svg.g([  ])([ Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(px1)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(py1)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(px2)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(py2)), Pha.class_("dessin-line2") ]), Pha_Svg.path(arrowPath)([ Pha_Svg.fill("red") ]) ]);
              };
          };
      };
  };
  var dndItemProps = function (state) {
      return function (v) {
          var dragged = v.draggable && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(v.id))(v.currentDragged);
          var candrop = v.droppable && Data_Maybe.isJust(v.currentDragged);
          return [ Pha["class'"]("draggable")(v.draggable), Pha["class'"]("dragged")(dragged), Pha["class'"]("candrop")(candrop), Pha_Events.releasePointerCaptureOn("pointerdown")(Pha_Events_Decoder.always((function () {
              if (v.draggable) {
                  return new Data_Maybe.Just(new Game_Eternal_Model.DragGuard(v.id));
              };
              return Data_Maybe.Nothing.value;
          })())), Pha_Events.stopPropagationOn("pointerup")(Pha_Events_Decoder.always((function () {
              if (candrop) {
                  return new Data_Tuple.Tuple(new Data_Maybe.Just(new Game_Eternal_Model.DropGuard(v.id)), true);
              };
              return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, false);
          })())) ];
      };
  };
  var dndBoardProps = (function () {
      var move = function (e) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Game_Core.core(Game_Eternal_Model.withcore))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Functor.map(Data_Functor.functorFn)(Game_Core.SetPointer.create)(Data_Maybe.Just.create))(Game_Common.pointerDecoder(e)));
      };
      return [ Pha_Events.on("pointerdown")(move), Pha_Events.on("pointermove")(move), Pha_Events.onpointerup(Game_Eternal_Model.DropOnBoard.value), Pha_Events.onpointerleave(Game_Eternal_Model.LeaveGuard.value) ];
  })();
  var cursor = function (pp) {
      return function (v) {
          return Pha_Svg.use("#roman")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.key("cursor"), Pha_Svg.width("6"), Pha_Svg.height("12"), Pha_Svg.x_("-3"), Pha_Svg.y_("-6"), Pha.style("pointer-events")("none") ])(UI_Template.svgCursorStyle(pp)));
      };
  };
  var view = function (state) {
      var rules = [ Pha.text("Domination Eternelle est un jeu \xe0 deux joueurs: un attaquant et un d\xe9fenseur."), Pha_Elements.br, Pha.text("Au d\xe9but de la partie, le d\xe9fenseur choisit des sommets sur lesquels poser des gardes."), Pha_Elements.br, Pha.text("Ensuite, \xe0 chaque tour, l'attaquant choisit d'attaquer un sommet puis le d\xe9fenseur doit d\xe9placer un de ses gardes"), Pha.text(" vers le sommet attaqu\xe9 \xe0 la condition que celui soit adjacent au garde."), Pha_Elements.br, Pha.text("Si le d\xe9fenseur ne peut pas d\xe9placer de garde, il perd la partie."), Pha_Elements.br, Pha.text("La partie peut ne pas avoir de fin. Le but est de d\xe9terminer le nombre minimum de gardes pour d\xe9fendre infiniment toute attaque."), Pha_Elements.br, Pha.text("Dans une variante, le d\xe9fenseur peut d\xe9placer plusieurs gardes \xe0 chaque tour.") ];
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var phase = Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_phase"](Data_Lens_Internal_Forget.strongForget));
      var guards = (Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).guards;
      var grules = Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_rules"](Data_Lens_Internal_Forget.strongForget));
      var graph = Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_graph"](Data_Lens_Internal_Forget.strongForget));
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(dndBoardProps)([ Pha.class_("ui-board eternal-board"), Pha.style("width")("100%"), Pha.style("height")("100%") ]))([ Pha_Svg.svg([ Pha.class_("eternal-svg"), Pha_Svg.viewBox(0)(0)(100)(100) ])([ Pha_Svg.g([  ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(graph.edges)(function (edge) {
          return Pha.maybe(getCoordsOfEdge(graph)(edge))(function (v) {
              return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(100.0 * v.px1)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(100.0 * v.py1)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(100.0 * v.px2)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(100.0 * v.py2)), Pha.class_("dessin-line1") ]);
          });
      })), Pha.when(Data_Eq.eq(Game_Eternal_Model.eqrules)(grules)(Game_Eternal_Model.ManyGuards.value))(function (v) {
          return Pha_Svg.g([  ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Array.zip(guards)(Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_nextmove"](Data_Lens_Internal_Forget.strongForget))))(function (v1) {
              return Pha.when(v1.value0 !== v1.value1)(function (v2) {
                  return Pha.maybe(getCoordsOfEdge(graph)(new Game_Eternal_Model.Edge(v1.value0, v1.value1)))(function (v3) {
                      return drawArrow(v3.px1 * 100.0)(v3.px2 * 100.0)(v3.py1 * 100.0)(v3.py2 * 100.0);
                  });
              });
          }));
      }), Pha_Svg.g([  ])(Data_Array.mapWithIndex(function (i) {
          return function (v) {
              return Pha_Svg.circle([ Pha.key(Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.cx(Data_Show.show(Data_Show.showNumber)(100.0 * v.x)), Pha_Svg.cy(Data_Show.show(Data_Show.showNumber)(100.0 * v.y)), Pha_Svg.r("3"), Pha_Svg.fill("blue") ]);
          };
      })(graph.vertices)), Pha_Svg.g([  ])(Data_Array.mapWithIndex(function (i) {
          return function (index) {
              return Pha_Svg.use("#roman")([ Pha.key(Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.width("6"), Pha_Svg.height("12"), Pha_Svg.x_("-3"), Pha_Svg.y_("-6"), Pha.class_("eternal-guard"), Pha["class'"]("no-move")(Data_Eq.eq(Game_Eternal_Model.eqPhase)(phase)(Game_Eternal_Model.PrepPhase.value)), Pha.style("transform")(Data_Maybe.fromMaybe("none")(Data_Functor.map(Data_Maybe.functorMaybe)(translateGuard)(getCoords(graph)(index)))) ]);
          };
      })(guards)), Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(position.attacked)(function (attack) {
          return Pha_Svg.use("#eternal-attack")([ Pha.key("attack"), Pha_Svg.width("8"), Pha_Svg.height("8"), Pha_Svg.x_("-4"), Pha_Svg.y_("-4"), Pha.style("transform")(Data_Maybe.fromMaybe("none")(Data_Functor.map(Data_Maybe.functorMaybe)(translateGuard)(getCoords(graph)(attack)))), Pha.style("pointer-events")("none") ]);
      })), Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_draggedGuard"](Data_Lens_Internal_Forget.strongForget)))), Pha_Svg.g([  ])(Data_Array.mapWithIndex(function (i) {
          return function (pos) {
              return Pha_Svg.rect(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.key(Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.width("10"), Pha_Svg.height("10"), Pha_Svg.x_("-5"), Pha_Svg.y_("-5"), Pha_Svg.fill("transparent"), Pha.style("transform")(translateGuard(pos)), Pha_Events["onclick'"]((function () {
                  var $59 = Data_Eq.eq(Game_Eternal_Model.eqrules)(grules)(Game_Eternal_Model.ManyGuards.value) && Data_Maybe.isJust(position.attacked);
                  if ($59) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Game_Eternal_Model.Play(i));
              })()) ])(dndItemProps(state)({
                  draggable: Data_Eq.eq(Game_Eternal_Model.eqrules)(grules)(Game_Eternal_Model.ManyGuards.value) && (Data_Maybe.isJust(position.attacked) && Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(i)(guards)),
                  droppable: true,
                  id: i,
                  currentDragged: Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_draggedGuard"](Data_Lens_Internal_Forget.strongForget))
              })));
          };
      })(graph.vertices)) ]), Pha_Elements.span([ Pha.class_("eternal-info") ])([ Pha.text((function () {
          var $60 = Game_Core.isLevelFinished(Game_Eternal_Model.game)(state);
          if ($60) {
              return "Le sommet attaqu\xe9 ne peut \xeatre d\xe9fendu";
          };
          var $61 = Data_Eq.eq(Game_Eternal_Model.eqPhase)(phase)(Game_Eternal_Model.PrepPhase.value);
          if ($61) {
              return "Choisis la position initiale des gardes";
          };
          var $62 = Data_Maybe.isJust(position.attacked);
          if ($62) {
              return "D\xe9place un garde vers le sommet attaqu\xe9";
          };
          return "Choisis un sommet \xe0 attaquer";
      })()) ]), Pha_Elements.button([ Pha.class_("ui-button ui-button-primary dessin-raise"), Pha_Attributes.disabled(Data_Eq.eq(Game_Eternal_Model.eqPhase)(Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_phase"](Data_Lens_Internal_Forget.strongForget)))(Game_Eternal_Model.GamePhase.value) && (Data_Eq.eq(Game_Eternal_Model.eqrules)(Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_rules"](Data_Lens_Internal_Forget.strongForget)))(Game_Eternal_Model.OneGuard.value) || (Data_Maybe.isNothing(position.attacked) || !Game_Eternal_Model.isValidNextMove(state)(Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_nextmove"](Data_Lens_Internal_Forget.strongForget)))))), Pha_Events.onclick((function () {
          var $63 = Data_Eq.eq(Game_Eternal_Model.eqPhase)(Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_phase"](Data_Lens_Internal_Forget.strongForget)))(Game_Eternal_Model.GamePhase.value);
          if ($63) {
              return Game_Eternal_Model.MoveGuards.value;
          };
          return Game_Eternal_Model.StartGame.value;
      })()) ])([ Pha.text("Valider") ]) ]);
      var config = UI_Template.card("Domination \xe9ternelle")([ UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Eternal_Model.eqgkind)(state)("Type de graphe")([ Game_Eternal_Model.Path.value, Game_Eternal_Model.Cycle.value, Game_Eternal_Model.Biclique.value, Game_Eternal_Model.Sun.value, Game_Eternal_Model.Grid.value ])(Data_Lens_Getter.viewOn(state)(Game_Eternal_Model["_graphkind"](Data_Lens_Internal_Forget.strongForget)))(Game_Eternal_Model.SetGraphKind.create)(function (v) {
          if (v instanceof Game_Eternal_Model.Path) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconText("P"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Chemin"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Eternal_Model.Cycle) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconText("C"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Cycle"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Eternal_Model.Biclique) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconText("*"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Biclique"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Eternal_Model.Grid) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconText("G"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Grille"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Eternal_Model.Sun) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconText("S"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Soleil"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          throw new Error("Failed pattern match at Game.Eternal.View (line 112, column 121 - line 117, column 71): " + [ v.constructor.name ]);
      }), UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Eternal_Model.eqrules)(state)("R\xe8gles")([ Game_Eternal_Model.OneGuard.value, Game_Eternal_Model.ManyGuards.value ])(grules)(Game_Eternal_Model.SetRules.create)(function (v) {
          if (v instanceof Game_Eternal_Model.OneGuard) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconText("1"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Un seul garde"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Eternal_Model.ManyGuards) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconText("\u221e"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Plusieurs gardes"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          throw new Error("Failed pattern match at Game.Eternal.View (line 119, column 84 - line 121, column 88): " + [ v.constructor.name ]);
      }), UI_Icons.icons2Players(Game_Eternal_Model.withcore)(Game_Eternal_Model.game)(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Eternal_Model.withcore), UI_Icons.iredo(Game_Eternal_Model.withcore), UI_Icons.ireset(Game_Eternal_Model.withcore), UI_Icons.irules(Game_Eternal_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = UI_Template.incDecGrid(Game_Eternal_Model.withcore)(Game_Eternal_Model.game)(state)([ grid ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Eternal_Model.withcore)(Game_Eternal_Model.game)({
          config: config,
          board: board,
          rules: rules,
          winTitle: "L'attaquant gagne"
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Eternal"] = $PS["Game.Eternal"] || {};
  var exports = $PS["Game.Eternal"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Eternal_Model = $PS["Game.Eternal.Model"];
  var Game_Eternal_View = $PS["Game.Eternal.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Eternal_Model.withcore)(Game_Core.Init.value)),
      view: Game_Eternal_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Lib.KonamiCode"] = $PS["Lib.KonamiCode"] || {};
  var exports = $PS["Lib.KonamiCode"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var codeSequence = "ArrowUp ArrowUp ArrowDown ArrowDown ArrowLeft ArrowRight ArrowLeft ArrowRight b a";
  var konamiCode = function (lens) {
      return function (onActivation) {
          return function (key) {
              return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (state) {
                  var seq = Data_Array.takeEnd(10)(Data_Function.flip(Data_Array.snoc)(key)(Data_Lens_Getter.viewOn(state)(lens(Data_Lens_Internal_Forget.strongForget))));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(seq)))(function () {
                      return Control_Applicative.when(Run.applicativeRun)(Data_String_Common.joinWith(" ")(seq) === codeSequence)(onActivation);
                  });
              });
          };
      };
  };
  exports["konamiCode"] = konamiCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Frog.Model"] = $PS["Game.Frog.Model"] || {};
  var exports = $PS["Game.Frog.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_KonamiCode = $PS["Lib.KonamiCode"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Update = $PS["Pha.Update"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SelectMove = (function () {
      function SelectMove(value0) {
          this.value0 = value0;
      };
      SelectMove.create = function (value0) {
          return new SelectMove(value0);
      };
      return SelectMove;
  })();
  var Mark = (function () {
      function Mark(value0) {
          this.value0 = value0;
      };
      Mark.create = function (value0) {
          return new Mark(value0);
      };
      return Mark;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Konami = (function () {
      function Konami(value0) {
          this.value0 = value0;
      };
      Konami.create = function (value0) {
          return new Konami(value0);
      };
      return Konami;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var winningPositions = function (dictFoldable) {
      return function (size) {
          return function (moves) {
              var t = Lib_Util.repeat(size)(function (i) {
                  return Data_Lazy.defer(function (v) {
                      return i === 0 || Data_Foldable.all(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (m) {
                          return Data_Maybe.maybe(false)((function () {
                              var $32 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                              return function ($33) {
                                  return $32(Data_Lazy.force($33));
                              };
                          })())(Data_Array.index(t)(i - m | 0));
                      })(moves);
                  });
              });
              return Data_Functor.mapFlipped(Data_Functor.functorArray)(t)(Data_Lazy.force);
          };
      };
  };
  var onKeyDown = function ($34) {
      return Data_Maybe.Just.create(Konami.create($34));
  };
  var istate = Game_Core.genState(20)(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 20,
          nbColumns: v.nbColumns,
          customSize: true,
          mode: Game_Core.RandomMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      moves: Data_Array_NonEmpty.cons(1)(Data_Array_NonEmpty.cons(2)(Data_Array_NonEmpty.singleton(3))),
      winning: [  ],
      marked: [  ],
      keySequence: [  ]
  });
  var _ext$prime = function (dictStrong) {
      var $35 = Game_Core["_ext"](dictStrong);
      var $36 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($37) {
          return $35($36($37));
      };
  };
  var _keySequence = function (dictStrong) {
      var $38 = _ext$prime(dictStrong);
      var $39 = Data_Lens_Lens.lens(function (v) {
          return v.keySequence;
      })(function (v) {
          return function (v1) {
              return {
                  keySequence: v1,
                  marked: v.marked,
                  moves: v.moves,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($40) {
          return $38($39($40));
      };
  };
  var _marked = function (dictStrong) {
      var $41 = _ext$prime(dictStrong);
      var $42 = Data_Lens_Lens.lens(function (v) {
          return v.marked;
      })(function (v) {
          return function (v1) {
              return {
                  marked: v1,
                  keySequence: v.keySequence,
                  moves: v.moves,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($43) {
          return $41($42($43));
      };
  };
  var _moves = function (dictStrong) {
      var $44 = _ext$prime(dictStrong);
      var $45 = Data_Lens_Lens.lens(function (v) {
          return v.moves;
      })(function (v) {
          return function (v1) {
              return {
                  moves: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($46) {
          return $44($45($46));
      };
  };
  var canPlay = function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var moves = Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget));
          var maximum = Data_Foldable.foldr(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Ord.max(Data_Ord.ordInt))(0)(moves);
          return Data_Foldable.elem(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Eq.eqInt)(position - v | 0)(moves) || position > 0 && (v === 0 && position <= maximum);
      };
  };
  var reachableArray = function (state) {
      return Lib_Util.repeat(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(canPlay(state));
  };
  var _winning = function (dictStrong) {
      var $47 = _ext$prime(dictStrong);
      var $48 = Data_Lens_Lens.lens(function (v) {
          return v.winning;
      })(function (v) {
          return function (v1) {
              return {
                  winning: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  moves: v.moves
              };
          };
      })(dictStrong);
      return function ($49) {
          return $47($48($49));
      };
  };
  var game2 = new Game_Core.TwoPlayersGame(function () {
      return game;
  }, function (state) {
      return Data_Maybe.fromMaybe(true)(Data_Array.index(Data_Lens_Getter.viewOn(state)(_winning(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  }, function (state) {
      return Data_Array.filter(canPlay(state))(Lib_Util["range'"](0)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))));
  });
  var game = new Game_Core.Game(Game_Core["computerMove'"](game2), function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      return Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)) === 0;
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_marked(Data_Profunctor_Strong.strongFn))(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(false))(Data_Lens_Setter.set(_winning(Data_Profunctor_Strong.strongFn))(winningPositions(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget))))(state)));
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (v) {
          var $25 = canPlay(state)(v);
          if ($25) {
              return new Data_Maybe.Just(v);
          };
          return Data_Maybe.Nothing.value;
      };
  }, function (v) {
      return new Game_Core.SizeLimit(5, 0, 30, 0);
  }, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(game)(v.value0);
      };
      if (v instanceof SelectMove) {
          var selectMove = function (moves) {
              return Data_Maybe.fromMaybe(moves)(Data_Array_NonEmpty.fromArray(Data_Array.filter(function (m) {
                  return (m === v.value0) !== Data_Foldable.elem(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Eq.eqInt)(m)(moves);
              })(Lib_Util["range'"](1)(5))));
          };
          return Game_Core.newGame(game)(Data_Lens_Setter.over(_moves(Data_Profunctor_Strong.strongFn))(selectMove));
      };
      if (v instanceof Mark) {
          return Pha_Update.purely(Data_Lens_Setter.over((function () {
              var $50 = _marked(Data_Profunctor_Strong.strongFn);
              var $51 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($52) {
                  return $50($51($52));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      if (v instanceof Play) {
          return Game_Core.playA(game)(v.value0);
      };
      if (v instanceof Konami) {
          return Lib_KonamiCode.konamiCode(function (dictStrong) {
              return _keySequence(dictStrong);
          })(Pha_Update.purely(function (st) {
              return Data_Lens_Setter.set(_marked(Data_Profunctor_Strong.strongFn))(Data_Lens_Getter.viewOn(st)(_winning(Data_Lens_Internal_Forget.strongForget)))(st);
          }))(v.value0);
      };
      throw new Error("Failed pattern match at Game.Frog.Model (line 89, column 1 - line 89, column 33): " + [ v.constructor.name ]);
  };
  exports["_moves"] = _moves;
  exports["_marked"] = _marked;
  exports["istate"] = istate;
  exports["reachableArray"] = reachableArray;
  exports["SelectMove"] = SelectMove;
  exports["Mark"] = Mark;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["onKeyDown"] = onKeyDown;
  exports["game"] = game;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Frog.View"] = $PS["Game.Frog.View"] || {};
  var exports = $PS["Game.Frog.View"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var spiralPointsPolar = function (n) {
      return Data_Array.reverse(Lib_Util.repeat(n + 1 | 0)(function (i) {
          var theta = $$Math.sqrt((function () {
              var $8 = i === n;
              if ($8) {
                  return 21.0;
              };
              return (Data_Int.toNumber(i) * 20.0) / Data_Int.toNumber(n);
          })()) * 1.36 * $$Math.pi;
          var radius = (61.0 * theta) / (2.0 * $$Math.pi);
          return {
              theta: theta,
              radius: radius
          };
      }));
  };
  var polarToCartesian = function (v) {
      return {
          x: v.radius * $$Math.cos(v.theta),
          y: v.radius * $$Math.sin(v.theta)
      };
  };
  var spiralPoints = function (n) {
      return Data_Functor.mapFlipped(Data_Functor.functorArray)(spiralPointsPolar(n))(polarToCartesian);
  };
  var lineIntersection = function (m1) {
      return function (b1) {
          return function (m2) {
              return function (b2) {
                  var x = (b2 - b1) / (m1 - m2);
                  return {
                      x: x,
                      y: m1 * x + b1
                  };
              };
          };
      };
  };
  var spiral = function (center) {
      return function (startRadius) {
          return function (radiusStep) {
              return function (startTheta) {
                  return function (endTheta) {
                      return function (thetaStep) {
                          return Data_String_Common.joinWith(" ")(Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_Monoid.monoidArray)(function (i) {
                              return function (v) {
                                  var v1 = lineIntersection(v.value0.slope)(v.value0.intercept)(v.value1.slope)(v.value1.intercept);
                                  var p = [ "Q", Data_Show.show(Data_Show.showNumber)(v1.x + center.x), Data_Show.show(Data_Show.showNumber)(v1.y + center.y), Data_Show.show(Data_Show.showNumber)(v.value1.point.x), Data_Show.show(Data_Show.showNumber)(v.value1.point.y) ];
                                  var $14 = i === 0;
                                  if ($14) {
                                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "M", Data_Show.show(Data_Show.showNumber)(v.value0.point.x), Data_Show.show(Data_Show.showNumber)(v.value0.point.y) ])(p);
                                  };
                                  return p;
                              };
                          })(Lib_Util.pairwise(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["rangeWithStep'"](startTheta)(endTheta)(thetaStep))(function (theta) {
                              var b = radiusStep / (2.0 * $$Math.pi);
                              var r = startRadius + b * theta;
                              var point = {
                                  x: center.x + r * $$Math.cos(theta),
                                  y: center.y + r * $$Math.sin(theta)
                              };
                              var slope = (b * $$Math.sin(theta) + r * $$Math.cos(theta)) / (b * $$Math.cos(theta) - r * $$Math.sin(theta));
                              var intercept = -(slope * r * $$Math.cos(theta) - r * $$Math.sin(theta));
                              return {
                                  point: point,
                                  slope: slope,
                                  intercept: intercept
                              };
                          }))));
                      };
                  };
              };
          };
      };
  };
  var spiralPath = spiral({
      x: 0.0,
      y: 0.0
  })(0.0)(61.0)(0.0)((37.0 / 6.0) * $$Math.pi)($$Math.pi / 6.0);
  var lily = function (i) {
      return function (x) {
          return function (y) {
              return function (reachable) {
                  return function (hidden) {
                      var pos = (function () {
                          var $19 = i === 0;
                          if ($19) {
                              return [ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(x - 30.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(y - 45.0)), Pha_Svg.width("80"), Pha_Svg.height("80") ];
                          };
                          return [ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(x - 24.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(y - 24.0)), Pha_Svg.width("48"), Pha_Svg.height("48") ];
                      })();
                      return Pha_Svg.use("#lily")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(pos)([ Pha.class_("frog-lily"), Pha["class'"]("reachable")(reachable), Pha["class'"]("hidden")(hidden) ]));
                  };
              };
          };
      };
  };
  var drawSpiral = [ Pha_Svg.path(spiralPath)([ Pha_Svg.fill("none"), Pha_Svg.stroke("black"), Pha_Svg.strokeWidth("3") ]), Pha_Svg.line([ Pha_Svg.x1("153"), Pha_Svg.y1("9"), Pha_Svg.x2("207"), Pha_Svg.y2("20"), Pha_Svg.stroke("black"), Pha_Svg.strokeDasharray("5"), Pha_Svg.strokeWidth("6") ]), Pha_Svg.line([ Pha_Svg.x1("153"), Pha_Svg.y1("7"), Pha_Svg.x2("153"), Pha_Svg.y2("39"), Pha_Svg.stroke("black"), Pha_Svg.strokeWidth("3") ]), Pha_Svg.line([ Pha_Svg.x1("207"), Pha_Svg.y1("18"), Pha_Svg.x2("207"), Pha_Svg.y2("50"), Pha_Svg.stroke("black"), Pha_Svg.strokeWidth("3") ]) ];
  var view = function (state) {
      var winTitle = UI_Template.winTitleFor2Players(state);
      var spoints = spiralPoints(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
      var rules = [ Pha.text("Le jeu de la grenouille est un jeu \xe0 deux joueurs."), Pha_Elements.br, Pha.text("A chaque tour, un joueur peut avancer la grenouille d'un nombre de cases parmi ceux indiqu\xe9s dans \"D\xe9placements autoris\xe9s\"."), Pha_Elements.br, Pha.text("Le premier joueur \xe0 atteindre le n\xe9nuphar final a gagn\xe9."), Pha_Elements.br, Pha.text("Pour \xe9viter une situation bloquante, un joueur peut se d\xe9placer vers le n\xe9nuphar final en utilisant moins de d\xe9placements que ce qui lui est autoris\xe9."), Pha_Elements.br, Pha.text("Par exemple, si les mouvements autoris\xe9s sont {3, 4, 5}, le joueur a quand m\xeame le droit de se d\xe9placer de 1 ou 2 cases si cela lui permet d'atteindre le n\xe9nuphar final.") ];
      var reachable = Game_Frog_Model.reachableArray(state);
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var pointsPolar = spiralPointsPolar(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
      var drawMarked = Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_marked"](Data_Lens_Internal_Forget.strongForget)))(spoints)(function (i) {
          return function (mark) {
              return function (v) {
                  return Pha.when(mark && i !== position)(function (v1) {
                      return Pha_Svg.use("#frog2")([ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(v.x - 20.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(v.y - 20.0)), Pha_Svg.width("32"), Pha_Svg.height("32"), Pha.key("reach" + Data_Show.show(Data_Show.showInt)(i)), Pha.class_("frog-frog marked") ]);
                  });
              };
          };
      });
      var drawLilypads = Lib_Util.map2(spoints)(reachable)(function (i) {
          return function (v) {
              return function (reach) {
                  return Pha_Svg.g([ Pha.key("lily" + Data_Show.show(Data_Show.showInt)(i)), Pha_Events.on("click")((function () {
                      var $31 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v1) {
                          if (v1) {
                              return new Game_Frog_Model.Mark(i);
                          };
                          return new Game_Frog_Model.Play(i);
                      });
                      return function ($32) {
                          return $31(Pha_Events_Decoder.shiftKey($32));
                      };
                  })()) ])([ lily(i)(v.x)(v.y)(false)(false), lily(i)(v.x)(v.y)(true)(!reach || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Svg["text'"]((function () {
                      var $25 = Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget));
                      if ($25) {
                          return Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) - i | 0);
                      };
                      return "";
                  })())([ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(v.x)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(v.y)), Pha.class_("frog-index") ]) ]);
              };
          };
      });
      var drawFrog = Pha.maybe(Data_Array.index(pointsPolar)(position))(function (v) {
          return Pha_Svg.g([ Pha.key("frog"), Pha.class_("frog-frog-container"), Pha.style("transform")(Pha_Util.translate(Pha_Util.px(v.radius))("0") + (" rotate(" + (Data_Show.show(Data_Show.showNumber)((v.theta * 180.0) / $$Math.pi) + "deg)"))), Pha.style("transform-origin")(Pha_Util.px(-v.radius) + " 0") ])([ Pha_Svg.g([ Pha.class_("frog-frog-container"), Pha.style("transform")("rotate(" + (Data_Show.show(Data_Show.showNumber)((-v.theta * 180.0) / $$Math.pi) + "deg)")) ])([ Pha_Svg.use("#frog2")([ Pha_Svg.x_("-20"), Pha_Svg.y_("-20"), Pha_Svg.width("40"), Pha_Svg.height("40"), Pha.class_("frog-frog"), Pha["class'"]("goal")(position === 0) ]) ]) ]);
      });
      var grid = Pha_Elements.div([ Pha.class_("ui-board frog-board") ])([ Pha_Svg.svg([ Pha_Svg.viewBox(-190 | 0)(-200 | 0)(400)(400) ])(Data_Array.concat([ drawSpiral, drawLilypads, drawMarked, [ drawFrog ] ])), Pha_Elements.span([  ])([ Pha.text(UI_Template.turnMessage(Game_Frog_Model.game)(state)) ]) ]);
      var config = UI_Template.card("La grenouille")([ UI_Icons.iconSelectGroupM(UI_Icons.defint)(Data_Eq.eqInt)(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(state)("D\xe9placements autoris\xe9s")([ 1, 2, 3, 4, 5 ])(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_moves"](Data_Lens_Internal_Forget.strongForget)))(Game_Frog_Model.SelectMove.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icons2Players(Game_Frog_Model.withcore)(Game_Frog_Model.game)(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp(Game_Frog_Model.withcore), UI_Icons.iundo(Game_Frog_Model.withcore), UI_Icons.iredo(Game_Frog_Model.withcore), UI_Icons.ireset(Game_Frog_Model.withcore), UI_Icons.irules(Game_Frog_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = UI_Template.incDecGrid(Game_Frog_Model.withcore)(Game_Frog_Model.game)(state)([ grid ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Frog_Model.withcore)(Game_Frog_Model.game)({
          config: config,
          board: board,
          rules: rules,
          winTitle: winTitle
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Frog"] = $PS["Game.Frog"] || {};
  var exports = $PS["Game.Frog"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Game_Frog_View = $PS["Game.Frog.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Frog_Model.withcore)(Game_Core.Init.value)),
      view: Game_Frog_View.view,
      onKeydown: Game_Frog_Model.onKeyDown
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Jetons.Model"] = $PS["Game.Jetons.Model"] || {};
  var exports = $PS["Game.Jetons.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var DnD = (function () {
      function DnD(value0) {
          this.value0 = value0;
      };
      DnD.create = function (value0) {
          return new DnD(value0);
      };
      return DnD;
  })();
  var Ext = function (x) {
      return x;
  };
  var withdnd = new Game_Core.MsgWithDnd(DnD.create);
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 4,
          nbColumns: 4,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      dragged: Data_Maybe.Nothing.value
  });
  var scoregame = new Game_Core.ScoreGame(function () {
      return game;
  }, function (v) {
      return false;
  }, function (state) {
      return Game_Core.Minimize.value;
  }, (function () {
      var $30 = Data_Array.filter(function (v) {
          return v > 0;
      });
      var $31 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($32) {
          return Data_Array.length($30($31($32)));
      };
  })(), function (state) {
      return Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))) + ("-" + Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget))));
  });
  var game = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(1));
  }, function (state) {
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (i) {
          var z = Data_Maybe.fromMaybe(0)(Data_Array.index(position)(i + columns | 0));
          var y = (function () {
              var $17 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i + 1 | 0)(columns) === 0;
              if ($17) {
                  return 0;
              };
              return Data_Maybe.fromMaybe(0)(Data_Array.index(position)(i + 1 | 0));
          })();
          var x = Data_Maybe.fromMaybe(0)(Data_Array.index(position)(i));
          return (x * (y + z | 0) | 0) === 0;
      })(Lib_Util["range'"](0)(Data_Array.length(position) - 1 | 0));
  }, Game_Core.defaultOnNewGame, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var v1 = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v.from)(v.to);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v.from))(function (pfrom) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v.to))(function (pto) {
                  var $21 = pfrom > 0 && (pfrom <= pto && ((v1.row * v1.row | 0) + (v1.col * v1.col | 0) | 0) === 1);
                  if ($21) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.updateAt(v.from)(0)(position))(Data_Array.modifyAt(v.to)(function (v2) {
                          return v2 + pfrom | 0;
                      }));
                  };
                  return Data_Maybe.Nothing.value;
              });
          });
      };
  }, function (v) {
      return new Game_Core.SizeLimit(1, 2, 6, 12);
  }, Game_Core["updateScore'"](scoregame)(Game_Core.AlwaysShowWin.value));
  var _ext$prime = function (dictStrong) {
      var $33 = Game_Core["_ext"](dictStrong);
      var $34 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($35) {
          return $33($34($35));
      };
  };
  var _dragged = function (dictStrong) {
      var $36 = _ext$prime(dictStrong);
      var $37 = Data_Lens_Lens.lens(function (v) {
          return v.dragged;
      })(function (v) {
          return function (v1) {
              return {
                  dragged: v1
              };
          };
      })(dictStrong);
      return function ($38) {
          return $36($37($38));
      };
  };
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(game)(v.value0);
      };
      if (v instanceof DnD) {
          return Game_Core.dndUpdate(Data_Eq.eqInt)(game)(function (dictStrong) {
              return _dragged(dictStrong);
          })(v.value0);
      };
      throw new Error("Failed pattern match at Game.Jetons.Model (line 71, column 1 - line 71, column 33): " + [ v.constructor.name ]);
  };
  exports["_dragged"] = _dragged;
  exports["istate"] = istate;
  exports["update"] = update;
  exports["game"] = game;
  exports["scoregame"] = scoregame;
  exports["withcore"] = withcore;
  exports["withdnd"] = withdnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Jetons.View"] = $PS["Game.Jetons.View"] || {};
  var exports = $PS["Game.Jetons.View"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Jetons_Model = $PS["Game.Jetons.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var view = function (state) {
      var score = Game_Core.scoreFn(Game_Jetons_Model.scoregame)(state);
      var s = (function () {
          var $5 = score > 1;
          if ($5) {
              return "s";
          };
          return "";
      })();
      var winTitle = Data_Show.show(Data_Show.showInt)(score) + (" case" + (s + (" restante" + s)));
      var rules = [ Pha.text("\xc0 chaque tour de ce jeu, tu peux d\xe9placer une pile de jetons vers une case adjacente qui contient au moins autant de jetons."), Pha_Elements.br, Pha.text("Le but est de finir la partie avec le moins de cases contenant des piles de jetons.") ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var config = UI_Template.card("Jeu des jetons")([ UI_Icons.iconSizesGroup(Game_Jetons_Model.withcore)(state)([ new Data_Tuple.Tuple(2, 2), new Data_Tuple.Tuple(4, 4), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(6, 6) ])(true), UI_Icons.icongroup("Options")([ UI_Icons.iundo(Game_Jetons_Model.withcore)(state), UI_Icons.iredo(Game_Jetons_Model.withcore)(state), UI_Icons.ireset(Game_Jetons_Model.withcore)(state), UI_Icons.irules(Game_Jetons_Model.withcore)(state) ]), UI_Icons.iconBestScore(Game_Jetons_Model.withcore)(Game_Jetons_Model.scoregame)(state) ]);
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var cursor = function (pp) {
          return function (v) {
              return Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-cursor jetons-cursor") ])(UI_Template.cursorStyle(pp)(rows)(columns)(0.6)))([  ]);
          };
      };
      var piece = function (i) {
          return function (val) {
              return function (props) {
                  var v = Lib_Util.coords(columns)(i);
                  return Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("jetons-peg"), Pha["class'"]("small")(columns >= 8), Pha.style("background-color")(Pha_Util.rgbColor(255)(Data_Int.floor(255.0 * (1.0 - $$Math.sqrt(Data_Int.toNumber(val) / Data_Int.toNumber(rows * columns | 0)))))(0)), Pha.style("left")(Pha_Util.pc((0.15 + Data_Int.toNumber(v.col)) / Data_Int.toNumber(columns))), Pha.style("top")(Pha_Util.pc((0.15 + Data_Int.toNumber(v.row)) / Data_Int.toNumber(rows))), Pha.style("width")(Pha_Util.pc(0.7 / Data_Int.toNumber(columns))), Pha.style("height")(Pha_Util.pc(0.7 / Data_Int.toNumber(rows))), Pha.style("box-shadow")(Data_Show.show(Data_Show.showInt)(val * 2 | 0) + ("px " + (Data_Show.show(Data_Show.showInt)(val * 2 | 0) + "px 5px 0px #656565"))) ])(props))([ Pha_Elements.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(val)) ]) ]);
              };
          };
      };
      var scoreDialog = function (v) {
          return UI_Template.bestScoreDialog(Game_Jetons_Model.withcore)(Game_Jetons_Model.scoregame)(state)(function (pos) {
              return [ Pha_Elements.div([ Pha.class_("ui-flex-center jetons-bestscore-grid-container") ])([ Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(3))([ Pha.class_("ui-board") ]))(Data_Array.mapWithIndex(function (i) {
                  return function (val) {
                      return Pha.when(val !== 0)(function (v1) {
                          return piece(i)(val)([ Pha.key(Data_Show.show(Data_Show.showInt)(i)) ]);
                      });
                  };
              })(pos)) ]) ];
          });
      };
      var board = UI_Template.incDecGrid(Game_Jetons_Model.withcore)(Game_Jetons_Model.game)(state)([ Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-board") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.dndBoardProps(Game_Jetons_Model.withcore)(Game_Jetons_Model.withdnd))(UI_Template.gridStyle(rows)(columns)(3))))(Data_Array.concat([ Data_Array.mapWithIndex(function (i) {
          return function (val) {
              return Pha.when(val !== 0)(function (v) {
                  return piece(i)(val)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.key(Data_Show.show(Data_Show.showInt)(i)) ])(UI_Template.dndItemProps(Data_Eq.eqInt)(Game_Jetons_Model.withdnd)(Game_Jetons_Model.game)(state)({
                      currentDragged: Data_Lens_Getter.viewOn(state)(Game_Jetons_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)),
                      draggable: true,
                      droppable: true,
                      id: i
                  })));
              });
          };
      })(position), [ Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Getter.viewOn(state)(Game_Jetons_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)))) ] ])) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Jetons_Model.withcore)(Game_Jetons_Model.game)({
          config: config,
          board: board,
          rules: rules,
          winTitle: winTitle,
          scoreDialog: scoreDialog
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Jetons"] = $PS["Game.Jetons"] || {};
  var exports = $PS["Game.Jetons"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Jetons_Model = $PS["Game.Jetons.Model"];
  var Game_Jetons_View = $PS["Game.Jetons.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Jetons_Model.withcore)(Game_Core.Init.value)),
      view: Game_Jetons_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Labete.Model"] = $PS["Game.Labete.Model"] || {};
  var exports = $PS["Game.Labete.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Common = $PS["Game.Common"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Update = $PS["Pha.Update"];                
  var StandardMode = (function () {
      function StandardMode() {

      };
      StandardMode.value = new StandardMode();
      return StandardMode;
  })();
  var CylinderMode = (function () {
      function CylinderMode() {

      };
      CylinderMode.value = new CylinderMode();
      return CylinderMode;
  })();
  var TorusMode = (function () {
      function TorusMode() {

      };
      TorusMode.value = new TorusMode();
      return TorusMode;
  })();
  var Type1 = (function () {
      function Type1() {

      };
      Type1.value = new Type1();
      return Type1;
  })();
  var Type2 = (function () {
      function Type2() {

      };
      Type2.value = new Type2();
      return Type2;
  })();
  var Type3 = (function () {
      function Type3() {

      };
      Type3.value = new Type3();
      return Type3;
  })();
  var Type4 = (function () {
      function Type4() {

      };
      Type4.value = new Type4();
      return Type4;
  })();
  var CustomBeast = (function () {
      function CustomBeast() {

      };
      CustomBeast.value = new CustomBeast();
      return CustomBeast;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetMode = (function () {
      function SetMode(value0) {
          this.value0 = value0;
      };
      SetMode.create = function (value0) {
          return new SetMode(value0);
      };
      return SetMode;
  })();
  var SetHelp = (function () {
      function SetHelp(value0) {
          this.value0 = value0;
      };
      SetHelp.create = function (value0) {
          return new SetHelp(value0);
      };
      return SetHelp;
  })();
  var SetBeast = (function () {
      function SetBeast(value0) {
          this.value0 = value0;
      };
      SetBeast.create = function (value0) {
          return new SetBeast(value0);
      };
      return SetBeast;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var IncSelectedColor = (function () {
      function IncSelectedColor(value0) {
          this.value0 = value0;
      };
      IncSelectedColor.create = function (value0) {
          return new IncSelectedColor(value0);
      };
      return IncSelectedColor;
  })();
  var StartZone = (function () {
      function StartZone(value0) {
          this.value0 = value0;
      };
      StartZone.create = function (value0) {
          return new StartZone(value0);
      };
      return StartZone;
  })();
  var StartZone2 = (function () {
      function StartZone2(value0) {
          this.value0 = value0;
      };
      StartZone2.create = function (value0) {
          return new StartZone2(value0);
      };
      return StartZone2;
  })();
  var FinishZone = (function () {
      function FinishZone(value0) {
          this.value0 = value0;
      };
      FinishZone.create = function (value0) {
          return new FinishZone(value0);
      };
      return FinishZone;
  })();
  var FlipCustomBeast = (function () {
      function FlipCustomBeast(value0) {
          this.value0 = value0;
      };
      FlipCustomBeast.create = function (value0) {
          return new FlipCustomBeast(value0);
      };
      return FlipCustomBeast;
  })();
  var Ext = function (x) {
      return x;
  };
  var zoneposition = function (columns) {
      return function (v) {
          return Lib_Util.repeat2(Lib_Util.abs(v.row1 - v.row2 | 0) + 1 | 0)(Lib_Util.abs(v.col1 - v.col2 | 0) + 1 | 0)(function (i) {
              return function (j) {
                  return (((i + Data_Ord.min(Data_Ord.ordInt)(v.row1)(v.row2) | 0) * columns | 0) + j | 0) + Data_Ord.min(Data_Ord.ordInt)(v.col1)(v.col2) | 0;
              };
          });
      };
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var type3 = [ {
      row: 0,
      col: 0
  }, {
      row: 0,
      col: 1
  }, {
      row: 1,
      col: 1
  } ];
  var type2 = [ {
      row: 0,
      col: 0
  }, {
      row: 0,
      col: 1
  }, {
      row: 0,
      col: -1 | 0
  } ];
  var type1 = [ {
      row: 0,
      col: 0
  }, {
      row: 0,
      col: 1
  } ];
  var translate = function (row$prime) {
      return function (col$prime) {
          return Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return {
                  row: v.row + row$prime | 0,
                  col: v.col + col$prime | 0
              };
          });
      };
  };
  var showMode = new Data_Show.Show(function (v) {
      if (v instanceof StandardMode) {
          return "standard";
      };
      if (v instanceof CylinderMode) {
          return "cylinder";
      };
      if (v instanceof TorusMode) {
          return "torus";
      };
      throw new Error("Failed pattern match at Game.Labete.Model (line 15, column 1 - line 18, column 32): " + [ v.constructor.name ]);
  });
  var showBt = new Data_Show.Show(function (v) {
      if (v instanceof Type1) {
          return "type1";
      };
      if (v instanceof Type2) {
          return "type2";
      };
      if (v instanceof Type3) {
          return "type3";
      };
      if (v instanceof Type4) {
          return "type4";
      };
      if (v instanceof CustomBeast) {
          return "custom";
      };
      throw new Error("Failed pattern match at Game.Labete.Model (line 35, column 1 - line 40, column 32): " + [ v.constructor.name ]);
  });
  var rotate90 = Data_Functor.map(Data_Functor.functorArray)(function (v) {
      return {
          row: -v.col | 0,
          col: v.row
      };
  });
  var pseudoRandomPick = function (t) {
      return Data_Array.index(t)(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(28921)(Data_Array.length(t)));
  };
  var onKeyDown = function (v) {
      if (v === "o") {
          return new Data_Maybe.Just(new IncSelectedColor(-1 | 0));
      };
      if (v === "p") {
          return new Data_Maybe.Just(new IncSelectedColor(1));
      };
      return Data_Maybe.Nothing.value;
  };
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 5,
          nbColumns: 5,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      beast: [ type1 ],
      beastType: Type1.value,
      mode: StandardMode.value,
      startSquare: Data_Maybe.Nothing.value,
      startPointer: Data_Maybe.Nothing.value,
      squareColors: [  ],
      selectedColor: 0
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof StandardMode && y instanceof StandardMode) {
              return true;
          };
          if (x instanceof CylinderMode && y instanceof CylinderMode) {
              return true;
          };
          if (x instanceof TorusMode && y instanceof TorusMode) {
              return true;
          };
          return false;
      };
  });
  var eqBt = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Type1 && y instanceof Type1) {
              return true;
          };
          if (x instanceof Type2 && y instanceof Type2) {
              return true;
          };
          if (x instanceof Type3 && y instanceof Type3) {
              return true;
          };
          if (x instanceof Type4 && y instanceof Type4) {
              return true;
          };
          if (x instanceof CustomBeast && y instanceof CustomBeast) {
              return true;
          };
          return false;
      };
  });                                                                    
  var allTranslations = function (n) {
      return function (m) {
          return function (beast) {
              return Lib_Util.repeat2(n)(m)(function (row) {
                  return function (col) {
                      return translate(row)(col)(beast);
                  };
              });
          };
      };
  };
  var allRotations = function (beast) {
      var beast2 = rotate90(beast);
      var beast3 = rotate90(beast2);
      var beast4 = rotate90(beast3);
      return [ beast, beast2, beast3, beast4 ];
  };
  var allBeastPositions = function (rows) {
      return function (cols) {
          return function (v) {
              return Control_Bind.bind(Control_Bind.bindArray)(v)(Control_Bind.composeKleisli(Control_Bind.bindArray)(allRotations)(allTranslations(rows)(cols)));
          };
      };
  };
  var adaptatedBeast = function (rows) {
      return function (columns) {
          return function (mode) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  if (mode instanceof StandardMode) {
                      return {
                          row: v.row,
                          col: v.col
                      };
                  };
                  if (mode instanceof CylinderMode) {
                      return {
                          row: v.row,
                          col: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.col)(columns)
                      };
                  };
                  if (mode instanceof TorusMode) {
                      return {
                          row: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.row)(rows),
                          col: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.col)(columns)
                      };
                  };
                  throw new Error("Failed pattern match at Game.Labete.Model (line 109, column 23 - line 112, column 82): " + [ mode.constructor.name ]);
              });
          };
      };
  };
  var _ext$prime = function (dictStrong) {
      var $100 = Game_Core["_ext"](dictStrong);
      var $101 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($102) {
          return $100($101($102));
      };
  };
  var _mode = function (dictStrong) {
      var $103 = _ext$prime(dictStrong);
      var $104 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  beast: v.beast,
                  beastType: v.beastType,
                  selectedColor: v.selectedColor,
                  squareColors: v.squareColors,
                  startPointer: v.startPointer,
                  startSquare: v.startSquare
              };
          };
      })(dictStrong);
      return function ($105) {
          return $103($104($105));
      };
  };
  var _selectedColor = function (dictStrong) {
      var $106 = _ext$prime(dictStrong);
      var $107 = Data_Lens_Lens.lens(function (v) {
          return v.selectedColor;
      })(function (v) {
          return function (v1) {
              return {
                  selectedColor: v1,
                  beast: v.beast,
                  beastType: v.beastType,
                  mode: v.mode,
                  squareColors: v.squareColors,
                  startPointer: v.startPointer,
                  startSquare: v.startSquare
              };
          };
      })(dictStrong);
      return function ($108) {
          return $106($107($108));
      };
  };
  var _squareColors = function (dictStrong) {
      var $109 = _ext$prime(dictStrong);
      var $110 = Data_Lens_Lens.lens(function (v) {
          return v.squareColors;
      })(function (v) {
          return function (v1) {
              return {
                  squareColors: v1,
                  beast: v.beast,
                  beastType: v.beastType,
                  mode: v.mode,
                  selectedColor: v.selectedColor,
                  startPointer: v.startPointer,
                  startSquare: v.startSquare
              };
          };
      })(dictStrong);
      return function ($111) {
          return $109($110($111));
      };
  };
  var colorZone = function (state) {
      return function (zone) {
          return Data_Array.updateAtIndices(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(zoneposition(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(zone))(function (i) {
              return new Data_Tuple.Tuple(i, Data_Lens_Getter.viewOn(state)(_selectedColor(Data_Lens_Internal_Forget.strongForget)));
          }))(Data_Lens_Getter.viewOn(state)(_squareColors(Data_Lens_Internal_Forget.strongForget)));
      };
  };
  var _startPointer = function (dictStrong) {
      var $112 = _ext$prime(dictStrong);
      var $113 = Data_Lens_Lens.lens(function (v) {
          return v.startPointer;
      })(function (v) {
          return function (v1) {
              return {
                  startPointer: v1,
                  beast: v.beast,
                  beastType: v.beastType,
                  mode: v.mode,
                  selectedColor: v.selectedColor,
                  squareColors: v.squareColors,
                  startSquare: v.startSquare
              };
          };
      })(dictStrong);
      return function ($114) {
          return $112($113($114));
      };
  };
  var _startSquare = function (dictStrong) {
      var $115 = _ext$prime(dictStrong);
      var $116 = Data_Lens_Lens.lens(function (v) {
          return v.startSquare;
      })(function (v) {
          return function (v1) {
              return {
                  startSquare: v1,
                  beast: v.beast,
                  beastType: v.beastType,
                  mode: v.mode,
                  selectedColor: v.selectedColor,
                  squareColors: v.squareColors,
                  startPointer: v.startPointer
              };
          };
      })(dictStrong);
      return function ($117) {
          return $115($116($117));
      };
  };
  var _beastType = function (dictStrong) {
      var $118 = _ext$prime(dictStrong);
      var $119 = Data_Lens_Lens.lens(function (v) {
          return v.beastType;
      })(function (v) {
          return function (v1) {
              return {
                  beastType: v1,
                  beast: v.beast,
                  mode: v.mode,
                  selectedColor: v.selectedColor,
                  squareColors: v.squareColors,
                  startPointer: v.startPointer,
                  startSquare: v.startSquare
              };
          };
      })(dictStrong);
      return function ($120) {
          return $118($119($120));
      };
  };
  var _beast = function (dictStrong) {
      var $121 = _ext$prime(dictStrong);
      var $122 = Data_Lens_Lens.lens(function (v) {
          return v.beast;
      })(function (v) {
          return function (v1) {
              return {
                  beast: v1,
                  beastType: v.beastType,
                  mode: v.mode,
                  selectedColor: v.selectedColor,
                  squareColors: v.squareColors,
                  startPointer: v.startPointer,
                  startSquare: v.startSquare
              };
          };
      })(dictStrong);
      return function ($123) {
          return $121($122($123));
      };
  };
  var getNewBeast = function (state) {
      var v = Data_Lens_Getter.viewOn(state)(_beastType(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof Type1) {
          return [ type1 ];
      };
      if (v instanceof Type2) {
          return [ type2 ];
      };
      if (v instanceof Type3) {
          return [ type3 ];
      };
      if (v instanceof Type4) {
          return [ type2, type3 ];
      };
      if (v instanceof CustomBeast) {
          return Data_Array.take(1)(Data_Lens_Getter.viewOn(state)(_beast(Data_Lens_Internal_Forget.strongForget)));
      };
      throw new Error("Failed pattern match at Game.Labete.Model (line 142, column 21 - line 147, column 41): " + [ v.constructor.name ]);
  };
  var nonTrappedBeasts = function (state) {
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var isValidBeast = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return v.row >= 0 && (v.row < rows && (v.col >= 0 && (v.col < columns && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))((v.row * columns | 0) + v.col | 0))(new Data_Maybe.Just(false)))));
      });
      return Data_Array.filter(isValidBeast)(Data_Functor.mapFlipped(Data_Functor.functorArray)(allBeastPositions(rows)(columns)(Data_Lens_Getter.viewOn(state)(_beast(Data_Lens_Internal_Forget.strongForget))))(adaptatedBeast(rows)(columns)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))));
  };
  var scoregameLabete = new Game_Core.ScoreGame(function () {
      return labeteGame;
  }, function (state) {
      return Data_Eq.eq(eqBt)(Data_Lens_Getter.viewOn(state)(_beastType(Data_Lens_Internal_Forget.strongForget)))(CustomBeast.value);
  }, function (v) {
      return Game_Core.Minimize.value;
  }, (function () {
      var $124 = Data_Array.filter(Control_Category.identity(Control_Category.categoryFn));
      var $125 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($126) {
          return Data_Array.length($124($125($126)));
      };
  })(), function (state) {
      return Data_String_Common.joinWith("-")([ Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget))), Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))), Data_Show.show(showMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget))), Data_Show.show(showBt)(Data_Lens_Getter.viewOn(state)(_beastType(Data_Lens_Internal_Forget.strongForget))) ]);
  });
  var labeteGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (st) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Array.replicate(Data_Lens_Getter.viewOn(st)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(st)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(false));
  }, function ($127) {
      return Data_Array["null"](nonTrappedBeasts($127));
  }, function (st) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_squareColors(Data_Profunctor_Strong.strongFn))(Data_Array.replicate(Data_Lens_Getter.viewOn(st)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(st)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(0))(Data_Lens_Setter.set(_beast(Data_Profunctor_Strong.strongFn))(getNewBeast(st))(st)));
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (index) {
          return Data_Array.modifyAt(index)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, function (v) {
      return new Game_Core.SizeLimit(2, 2, 9, 9);
  }, Game_Core["updateScore'"](scoregameLabete)(Game_Core.ShowWinOnNewRecord.value));
  var nonTrappedBeastOnGrid = function (st) {
      var rows = Data_Lens_Getter.viewOn(st)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(st)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (p) {
          return Data_Lens_Setter.set(Data_Lens_Index.ix(Data_Lens_Index.indexArray)((p.row * columns | 0) + p.col | 0)(Data_Lens_Internal_Wander.wanderFunction))(true);
      })(Data_Array.replicate(rows * columns | 0)(false))(Data_Maybe.fromMaybe([  ])(pseudoRandomPick(nonTrappedBeasts(st))));
  };
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(labeteGame)(v.value0);
      };
      if (v instanceof SetMode) {
          return Game_Core.newGame(labeteGame)(Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetHelp) {
          return Pha_Update.purely(Data_Lens_Setter.set(Game_Core["_help"](Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetBeast) {
          return Game_Core.newGame(labeteGame)((function () {
              var $128 = (function () {
                  var $84 = Data_Eq.eq(eqBt)(v.value0)(CustomBeast.value);
                  if ($84) {
                      var $131 = Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.CustomDialog.value);
                      var $132 = Data_Lens_Setter.over(_beast(Data_Profunctor_Strong.strongFn))(Data_Array.take(1));
                      return function ($133) {
                          return $131($132($133));
                      };
                  };
                  return Control_Category.identity(Control_Category.categoryFn);
              })();
              var $129 = Data_Lens_Setter.set(_beastType(Data_Profunctor_Strong.strongFn))(v.value0);
              return function ($130) {
                  return $128($129($130));
              };
          })());
      };
      if (v instanceof IncSelectedColor) {
          return Pha_Update.purely(Data_Lens_Setter.over(_selectedColor(Data_Profunctor_Strong.strongFn))(function (x) {
              return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(x + v.value0 | 0)(9);
          }));
      };
      if (v instanceof StartZone) {
          return Pha_Update.purely(Data_Lens_Setter.set(_startSquare(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v.value0)));
      };
      if (v instanceof StartZone2) {
          return Pha_Update.purely(Data_Lens_Setter.set(_startPointer(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v.value0)));
      };
      if (v instanceof FinishZone) {
          return Pha_Update.purely(function (state) {
              var v1 = Data_Lens_Getter.viewOn(state)(_startSquare(Data_Lens_Internal_Forget.strongForget));
              if (v1 instanceof Data_Maybe.Nothing) {
                  return state;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  var v2 = Lib_Util.coords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v.value0);
                  var v3 = Lib_Util.coords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v1.value0);
                  return Data_Lens_Setter.set(_startPointer(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(_startSquare(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(_squareColors(Data_Profunctor_Strong.strongFn))(colorZone(state)({
                      row1: v2.row,
                      col1: v2.col,
                      row2: v3.row,
                      col2: v3.col
                  }))(state)));
              };
              throw new Error("Failed pattern match at Game.Labete.Model (line 200, column 46 - line 207, column 44): " + [ v1.constructor.name ]);
          });
      };
      if (v instanceof FlipCustomBeast) {
          return Game_Core.newGame(labeteGame)(Data_Lens_Setter.over((function () {
              var $134 = _beast(Data_Profunctor_Strong.strongFn);
              var $135 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(0)(Data_Lens_Internal_Wander.wanderFunction);
              var $136 = Game_Common["_isoCustom"](Data_Profunctor.profunctorFn);
              var $137 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($138) {
                  return $134($135($136($137($138))));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      if (v instanceof Play) {
          return Game_Core.playA(labeteGame)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Labete.Model (line 183, column 1 - line 183, column 33): " + [ v.constructor.name ]);
  };
  exports["StandardMode"] = StandardMode;
  exports["CylinderMode"] = CylinderMode;
  exports["TorusMode"] = TorusMode;
  exports["Type1"] = Type1;
  exports["Type2"] = Type2;
  exports["Type3"] = Type3;
  exports["Type4"] = Type4;
  exports["CustomBeast"] = CustomBeast;
  exports["_beast"] = _beast;
  exports["_beastType"] = _beastType;
  exports["_mode"] = _mode;
  exports["_selectedColor"] = _selectedColor;
  exports["_squareColors"] = _squareColors;
  exports["_startPointer"] = _startPointer;
  exports["istate"] = istate;
  exports["nonTrappedBeastOnGrid"] = nonTrappedBeastOnGrid;
  exports["SetMode"] = SetMode;
  exports["SetHelp"] = SetHelp;
  exports["SetBeast"] = SetBeast;
  exports["Play"] = Play;
  exports["StartZone"] = StartZone;
  exports["StartZone2"] = StartZone2;
  exports["FinishZone"] = FinishZone;
  exports["FlipCustomBeast"] = FlipCustomBeast;
  exports["update"] = update;
  exports["onKeyDown"] = onKeyDown;
  exports["eqMode"] = eqMode;
  exports["eqBt"] = eqBt;
  exports["labeteGame"] = labeteGame;
  exports["scoregameLabete"] = scoregameLabete;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Labete.View"] = $PS["Game.Labete.View"] || {};
  var exports = $PS["Game.Labete.View"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Common = $PS["Game.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Labete_Model = $PS["Game.Labete.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var modes = [ Game_Labete_Model.StandardMode.value, Game_Labete_Model.CylinderMode.value, Game_Labete_Model.TorusMode.value ];
  var ihelp = function (state) {
      return UI_Icons.iconbutton(Lib_Util.precord()())(state)({
          icon: new UI_Icon.IconSymbol("#help"),
          tooltip: new Data_Maybe.Just("Aide"),
          selected: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget))
      })([ Pha_Events.onpointerdown(new Game_Labete_Model.SetHelp(true)), Pha_Events.onpointerup(new Game_Labete_Model.SetHelp(false)), Pha_Events.onpointerleave(new Game_Labete_Model.SetHelp(false)) ]);
  };
  var colors = [ "#5aa02c", "blue", "red", "yellow", "magenta", "cyan", "orange", "darkgreen", "grey" ];
  var square = function (v) {
      return function (props) {
          return Pha_Svg.g(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.transform(Pha_Util.translate(Data_Show.show(Data_Show.showInt)(50 * v.col | 0))(Data_Show.show(Data_Show.showInt)(50 * v.row | 0))) ])(props))([ Pha_Svg.use("#grass")([ Pha_Svg.width("50"), Pha_Svg.height("50"), Pha_Svg.fill(Data_Maybe.fromMaybe("")(Data_Array.index(colors)(v.color))) ]), Pha_Svg.rect([ Pha_Svg.width("51"), Pha_Svg.height("51"), Pha.class_("labete-square-borders") ]), Pha_Svg.use("#paw")([ Pha_Svg.x_("5"), Pha_Svg.y_("5"), Pha_Svg.width("40"), Pha_Svg.height("40"), Pha.class_("labete-beast"), Pha["class'"]("visible")(v.hasBeast) ]), Pha.when(v.hasTrap)(function (v1) {
              return Pha_Svg.use("#trap")([ Pha_Svg.x_("5"), Pha_Svg.y_("5"), Pha_Svg.width("40"), Pha_Svg.height("40") ]);
          }) ]);
      };
  };
  var zone = function (color) {
      return function (v) {
          return function (v1) {
              return Pha_Svg.rect([ Pha_Svg.x_(Pha_Util.pc(Data_Ord.min(Data_Ord.ordNumber)(v.x)(v1.x))), Pha_Svg.y_(Pha_Util.pc(Data_Ord.min(Data_Ord.ordNumber)(v.y)(v1.y))), Pha_Svg.width(Pha_Util.pc($$Math.abs(v1.x - v.x))), Pha_Svg.height(Pha_Util.pc($$Math.abs(v1.y - v.y))), Pha.key("zone"), Pha.class_("labete-zone"), Pha_Svg.fill(Data_Maybe.fromMaybe("")(Data_Array.index(colors)(color))) ]);
          };
      };
  };
  var view = function (state) {
      var winTitle = "Record: " + (Data_Show.show(Data_Show.showInt)(Game_Core.scoreFn(Game_Labete_Model.scoregameLabete)(state)) + " pi\xe8ges");
      var rules = [ Pha.text("Place le moins de pi\xe8ges possible pour emp\xeacher la b\xeate d'ab\xeemer ta belle pelouse !"), Pha_Elements.br, Pha.text("Tu peux choisir de jouer avec des b\xeates de diff\xe9rentes formes comme celles pr\xe9d\xe9finies dans 'Forme de la b\xeate'."), Pha_Elements.br, Pha.text("Dans le dernier choix, la b\xeate peut prendre l'une ou l'autre des formes indiqu\xe9es."), Pha_Elements.br, Pha.text("Le plateau de jeu peut prendre une grille, un cylindre ou un tore.") ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var nonTrappedBeast = Game_Labete_Model.nonTrappedBeastOnGrid(state);
      var customDialog = function (v) {
          return UI_Template.dialog(Game_Labete_Model.withcore)("Personnalise ta b\xeate")([ Pha_Elements.div([ Pha.class_("labete-custombeast-grid-container") ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(250)(250) ])(Data_Array.mapWithIndex(function (index) {
              return function (hasBeast) {
                  var v1 = Lib_Util.coords(5)(index);
                  return square({
                      row: v1.row,
                      col: v1.col,
                      hasBeast: hasBeast,
                      hasTrap: false,
                      color: 0
                  })([ Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha_Events.onclick(new Game_Labete_Model.FlipCustomBeast(index)) ]);
              };
          })(Data_Lens_Getter.viewOn(state)((function () {
              var $54 = Game_Labete_Model["_beast"](Data_Lens_Internal_Forget.strongForget);
              var $55 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(0)(Data_Lens_Internal_Forget.wanderForget(Data_Monoid.monoidArray));
              var $56 = Game_Common["_isoCustom"](Data_Lens_Internal_Forget.profunctorForget);
              return function ($57) {
                  return $54($55($56($57)));
              };
          })()))) ]) ]);
      };
      var cursor = function (pp) {
          return Pha_Svg.use("#trap")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.svgCursorStyle(pp))([ Pha.key("cursor"), Pha_Svg.x_("-20"), Pha_Svg.y_("-20"), Pha_Svg.width("40"), Pha_Svg.height("40"), Pha.attr("opacity")("0.7"), Pha.attr("pointer-events")("none") ]));
      };
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.trackPointer(Game_Labete_Model.withcore))([ Pha.class_("ui-board"), Pha_Events["on'"]("pointerdown")(function (ev) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Pha_Events_Decoder.shiftKey(ev))(function (v) {
              if (v) {
                  return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.Just.create)(Game_Labete_Model.StartZone2.create))(Game_Common.pointerDecoder(ev));
              };
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
          });
      }) ])))([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(50 * columns | 0)(50 * rows | 0) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.map3(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(nonTrappedBeast)(Data_Lens_Getter.viewOn(state)(Game_Labete_Model["_squareColors"](Data_Lens_Internal_Forget.strongForget)))(function (index) {
          return function (hasTrap) {
              return function (hasBeast) {
                  return function (color) {
                      var v = Lib_Util.coords(columns)(index);
                      return square({
                          color: color,
                          row: v.row,
                          col: v.col,
                          hasTrap: hasTrap,
                          hasBeast: hasBeast && Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget))
                      })([ Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha_Events["on'"]("click")((function () {
                          var $58 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v1) {
                              if (v1) {
                                  return Data_Maybe.Nothing.value;
                              };
                              return new Data_Maybe.Just(new Game_Labete_Model.Play(index));
                          });
                          return function ($59) {
                              return $58(Pha_Events_Decoder.shiftKey($59));
                          };
                      })()), Pha_Events.onpointerup(new Game_Labete_Model.FinishZone(index)), Pha_Events["on'"]("pointerdown")((function () {
                          var $60 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v1) {
                              if (v1) {
                                  return new Data_Maybe.Just(new Game_Labete_Model.StartZone(index));
                              };
                              return Data_Maybe.Nothing.value;
                          });
                          return function ($61) {
                              return $60(Pha_Events_Decoder.shiftKey($61));
                          };
                      })()) ]);
                  };
              };
          };
      }))([ Pha.maybeN((function () {
          var v = Data_Lens_Getter.viewOn(state)(Game_Labete_Model["_startPointer"](Data_Lens_Internal_Forget.strongForget));
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)));
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(zone(Data_Lens_Getter.viewOn(state)(Game_Labete_Model["_selectedColor"](Data_Lens_Internal_Forget.strongForget)))(v.value0))(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)));
          };
          throw new Error("Failed pattern match at Game.Labete.View (line 110, column 26 - line 112, column 80): " + [ v.constructor.name ]);
      })()) ])) ]);
      var scoreDialog = function (v) {
          return UI_Template.bestScoreDialog(Game_Labete_Model.withcore)(Game_Labete_Model.scoregameLabete)(state)(function (position) {
              return [ Pha_Elements.div([ Pha.class_("ui-flex-center labete-bestscore-grid-container") ])([ Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))([ Pha.class_("ui-board") ]))([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(50 * columns | 0)(50 * rows | 0) ])(Data_Array.mapWithIndex(function (index) {
                  return function (hasTrap) {
                      var v1 = Lib_Util.coords(columns)(index);
                      return square({
                          color: 0,
                          row: v1.row,
                          col: v1.col,
                          hasTrap: hasTrap,
                          hasBeast: false
                      })([ Pha.key(Data_Show.show(Data_Show.showInt)(index)) ]);
                  };
              })(position)) ]) ]) ];
          });
      };
      var board = UI_Template.incDecGrid(Game_Labete_Model.withcore)(Game_Labete_Model.labeteGame)(state)([ grid, Pha.when(Data_Lens_Getter.viewOn(state)(Game_Labete_Model["_selectedColor"](Data_Lens_Internal_Forget.strongForget)) > 0)(function (v) {
          return Pha_Elements.div([ Pha.class_("labete-color"), Pha.style("background-color")(Data_Maybe.fromMaybe("")(Data_Array.index(colors)(Data_Lens_Getter.viewOn(state)(Game_Labete_Model["_selectedColor"](Data_Lens_Internal_Forget.strongForget))))) ])([  ]);
      }) ]);
      var beastTypes = [ Game_Labete_Model.Type1.value, Game_Labete_Model.Type2.value, Game_Labete_Model.Type3.value, Game_Labete_Model.Type4.value, Game_Labete_Model.CustomBeast.value ];
      var config = UI_Template.card("La b\xeate")([ UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Labete_Model.eqBt)(state)("Forme de la b\xeate")(beastTypes)(Data_Lens_Getter.viewOn(state)(Game_Labete_Model["_beastType"](Data_Lens_Internal_Forget.strongForget)))(Game_Labete_Model.SetBeast.create)(function (v) {
          if (v instanceof Game_Labete_Model.Type1) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#beast1"),
                      selected: v1.selected,
                      tooltip: v1.tooltip,
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Labete_Model.Type2) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#beast2"),
                      selected: v1.selected,
                      tooltip: v1.tooltip,
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Labete_Model.Type3) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#beast3"),
                      selected: v1.selected,
                      tooltip: v1.tooltip,
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Labete_Model.Type4) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#beast23"),
                      selected: v1.selected,
                      tooltip: v1.tooltip,
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Labete_Model.CustomBeast) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#customize"),
                      selected: v1.selected,
                      tooltip: v1.tooltip,
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          throw new Error("Failed pattern match at Game.Labete.View (line 65, column 94 - line 70, column 64): " + [ v.constructor.name ]);
      }), UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Labete_Model.eqMode)(state)("Type de la grille")(modes)(Data_Lens_Getter.viewOn(state)(Game_Labete_Model["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Labete_Model.SetMode.create)(function (v) {
          if (v instanceof Game_Labete_Model.StandardMode) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#grid-normal"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Normale"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Labete_Model.CylinderMode) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#grid-cylinder"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Cylindrique"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Labete_Model.TorusMode) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#grid-torus"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Torique"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          throw new Error("Failed pattern match at Game.Labete.View (line 71, column 84 - line 74, column 89): " + [ v.constructor.name ]);
      }), UI_Icons.iconSizesGroup(Game_Labete_Model.withcore)(state)([ new Data_Tuple.Tuple(3, 3), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(6, 6) ])(true), UI_Icons.icongroup("Options")([ ihelp(state), UI_Icons.ireset(Game_Labete_Model.withcore)(state), UI_Icons.irules(Game_Labete_Model.withcore)(state) ]), UI_Icons.iconBestScore(Game_Labete_Model.withcore)(Game_Labete_Model.scoregameLabete)(state) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Labete_Model.withcore)(Game_Labete_Model.labeteGame)({
          config: config,
          board: board,
          rules: rules,
          winTitle: winTitle,
          customDialog: customDialog,
          scoreDialog: scoreDialog
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Labete"] = $PS["Game.Labete"] || {};
  var exports = $PS["Game.Labete"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Labete_Model = $PS["Game.Labete.Model"];
  var Game_Labete_View = $PS["Game.Labete.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Labete_Model.withcore)(Game_Core.Init.value)),
      view: Game_Labete_View.view,
      onKeydown: Game_Labete_Model.onKeyDown
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  "use strict";
  $PS["MyPrelude"] = $PS["MyPrelude"] || {};
  var exports = $PS["MyPrelude"];
  var Data_Array = $PS["Data.Array"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var replicateA = function (dictApplicative) {
      return function (n) {
          var $1 = Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative);
          var $2 = Data_Array.replicate(n);
          return function ($3) {
              return $1($2($3));
          };
      };
  };
  exports["replicateA"] = replicateA;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Nim.Model"] = $PS["Game.Nim.Model"] || {};
  var exports = $PS["Game.Nim.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = $PS["Data.Int.Bits"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var MyPrelude = $PS["MyPrelude"];
  var Pha_Random = $PS["Pha.Random"];                
  var Move = (function () {
      function Move(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Move.create = function (value0) {
          return function (value1) {
              return new Move(value0, value1);
          };
      };
      return Move;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetNbPiles = (function () {
      function SetNbPiles(value0) {
          this.value0 = value0;
      };
      SetNbPiles.create = function (value0) {
          return new SetNbPiles(value0);
      };
      return SetNbPiles;
  })();
  var SetLength = (function () {
      function SetLength(value0) {
          this.value0 = value0;
      };
      SetLength.create = function (value0) {
          return new SetLength(value0);
      };
      return SetLength;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: v.nbRows,
          nbColumns: v.nbColumns,
          customSize: v.customSize,
          mode: Game_Core.ExpertMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      length: 10,
      nbPiles: 4
  });
  var canPlay = function (state) {
      return function (v) {
          var v1 = Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v.value0);
          if (v1 instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (v1 instanceof Data_Maybe.Just) {
              return v.value1 !== v1.value0.value0 && (v.value1 !== v1.value0.value1 && (function () {
                  var $22 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
                  if ($22) {
                      return v.value1 < v1.value0.value1;
                  };
                  return v.value1 > v1.value0.value0;
              })());
          };
          throw new Error("Failed pattern match at Game.Nim.Model (line 37, column 5 - line 39, column 104): " + [ v1.constructor.name ]);
      };
  };
  var _ext$prime = function (dictStrong) {
      var $52 = Game_Core["_ext"](dictStrong);
      var $53 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($54) {
          return $52($53($54));
      };
  };
  var _length = function (dictStrong) {
      var $55 = _ext$prime(dictStrong);
      var $56 = Data_Lens_Lens.lens(function (v) {
          return v.length;
      })(function (v) {
          return function (v1) {
              return {
                  length: v1,
                  nbPiles: v.nbPiles
              };
          };
      })(dictStrong);
      return function ($57) {
          return $55($56($57));
      };
  };
  var _nbPiles = function (dictStrong) {
      var $58 = _ext$prime(dictStrong);
      var $59 = Data_Lens_Lens.lens(function (v) {
          return v.nbPiles;
      })(function (v) {
          return function (v1) {
              return {
                  nbPiles: v1,
                  length: v.length
              };
          };
      })(dictStrong);
      return function ($60) {
          return $58($59($60));
      };
  };
  var nimGame2 = new Game_Core.TwoPlayersGame(function () {
      return nimGame;
  }, (function () {
      var $61 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (t) {
          return Data_Int_Bits.xor((Data_Tuple.snd(t) - Data_Tuple.fst(t) | 0) - 1 | 0);
      })(0);
      var $62 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($63) {
          return (function (v) {
              return v === 0;
          })($61($62($63)));
      };
  })(), function (state) {
      return Data_Array.sortWith(Data_Ord.ordInt)(function (v) {
          return Data_Maybe.maybe(0)(function (x) {
              var $30 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
              if ($30) {
                  return Data_Tuple.fst(x) - v.value1 | 0;
              };
              return v.value1 - Data_Tuple.snd(x) | 0;
          })(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v.value0));
      })(Data_Array.filter(canPlay(state))(Lib_Util.repeat2(Data_Lens_Getter.viewOn(state)(_nbPiles(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)))(Move.create)));
  });
  var nimGame = new Game_Core.Game(Game_Core["computerMove'"](nimGame2), function (state) {
      return MyPrelude.replicateA(Control_Monad_Free.freeApplicative)(Data_Lens_Getter.viewOn(state)(_nbPiles(Data_Lens_Internal_Forget.strongForget)))((function () {
          var $33 = Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)) === 5;
          if ($33) {
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(new Data_Tuple.Tuple(0, 4));
          };
          return Control_Apply.apply(Control_Monad_Free.freeApply)(Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Tuple.Tuple.create)(Pha_Random["int"](0)(4)))(Pha_Random["int"](0)(9));
      })());
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return (v.value1 - v.value0 | 0) === 1 && v.value0 === (function () {
              var $35 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
              if ($35) {
                  return Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)) - 2 | 0;
              };
              return 0;
          })();
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, Game_Core.defaultOnNewGame, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (v) {
          var $40 = canPlay(state)(v);
          if ($40) {
              return Data_Array.modifyAt(v.value0)(function (v1) {
                  var $42 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
                  if ($42) {
                      return new Data_Tuple.Tuple(v.value1, v1.value1);
                  };
                  return new Data_Tuple.Tuple(v1.value0, v.value1);
              })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
          };
          return Data_Maybe.Nothing.value;
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(nimGame)(v.value0);
      };
      if (v instanceof SetNbPiles) {
          return Game_Core.newGame(nimGame)(Data_Lens_Setter.set(_nbPiles(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetLength) {
          return Game_Core.newGame(nimGame)(Data_Lens_Setter.set(_length(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Game_Core.playA(nimGame)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Nim.Model (line 79, column 1 - line 79, column 33): " + [ v.constructor.name ]);
  };
  exports["Move"] = Move;
  exports["istate"] = istate;
  exports["_length"] = _length;
  exports["_nbPiles"] = _nbPiles;
  exports["SetNbPiles"] = SetNbPiles;
  exports["SetLength"] = SetLength;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["nimGame"] = nimGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Nim.View"] = $PS["Game.Nim.View"] || {};
  var exports = $PS["Game.Nim.View"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var view = function (state) {
      var winTitle = "Les " + ((function () {
          var $1 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
          if ($1) {
              return "bleu";
          };
          return "rouge";
      })() + "s gagnent");
      var rules = [ Pha.text("Le but du jeu est d'acculer chacun des jetons de l'adversaire au bord du plateau de telle fa\xe7on qu'il ne puisse plus en d\xe9placer."), Pha_Elements.br, Pha.text("\xc0 chaque tour, tu peux d\xe9placer un de tes jetons vers la gauche ou vers la droite d'autant de cases que tu veux mais tu ne peux pas sauter par-dessus un jeton adverse."), Pha_Elements.br, Pha.text("Tu es oblig\xe9 de d\xe9placer un jeton d'au moins une case, tu ne peux pas passer ton tour."), Pha_Elements.br, Pha.text("Tu gagnes la partie si ton adversaire n'a aucun mouvement possible.") ];
      var nbPiles = Data_Lens_Getter.viewOn(state)(Game_Nim_Model["_nbPiles"](Data_Lens_Internal_Forget.strongForget));
      var length = Data_Lens_Getter.viewOn(state)(Game_Nim_Model["_length"](Data_Lens_Internal_Forget.strongForget));
      var drawSquare = function (i) {
          return function (j) {
              return Pha_Svg.rect([ Pha.key("base-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(j)))), Pha.class_("nim-square"), Pha_Events.onclick(new Game_Nim_Model.Play(new Game_Nim_Model.Move(i, j))), Pha.style("transform")(Pha_Util.translate(Pha_Util["px'"]((function () {
                  var $2 = length === 5;
                  if ($2) {
                      return 30;
                  };
                  return 5;
              })() + (10 * j | 0) | 0))(Pha_Util["px'"](15 + (19 * i | 0) | 0)) + " rotate(45deg)"), Pha.style("cursor")((function () {
                  var $3 = Game_Core.canPlay(Game_Nim_Model.nimGame)(state)(new Game_Nim_Model.Move(i, j));
                  if ($3) {
                      return "pointer";
                  };
                  return "not-allowed";
              })()) ]);
          };
      };
      var drawRow = function (i) {
          return Pha_Svg.rect([ Pha.key("pile" + Data_Show.show(Data_Show.showInt)(i)), Pha.class_("nim-row"), Pha.class_((function () {
              var $4 = length === 5;
              if ($4) {
                  return "nim-row-5";
              };
              return "nim-row-10";
          })()), Pha_Svg.y_(Data_Show.show(Data_Show.showInt)(10 + (19 * i | 0) | 0)) ]);
      };
      var drawPeg = function (i) {
          return function (player) {
              return function (j) {
                  return Pha_Svg.use("#meeple")([ Pha.key("p-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(player)))), Pha_Svg.width("8"), Pha_Svg.height("8"), Pha.class_("nim-player"), Pha_Svg.fill((function () {
                      var $5 = player === 0;
                      if ($5) {
                          return "blue";
                      };
                      return "red";
                  })()), Pha.style("transform")(Pha_Util.translate(Pha_Util["px'"]((function () {
                      var $6 = length === 5;
                      if ($6) {
                          return 26;
                      };
                      return 1;
                  })() + (10 * j | 0) | 0))(Pha_Util["px'"](11 + (19 * i | 0) | 0))) ]);
              };
          };
      };
      var config = UI_Template.card("Poker Nim")([ UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Nombre de rang\xe9es")([ 1, 2, 3, 4, 5 ])(nbPiles)(Game_Nim_Model.SetNbPiles.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Taille des rang\xe9es")([ 10, 5 ])(length)(Game_Nim_Model.SetLength.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icons2Players(Game_Nim_Model.withcore)(Game_Nim_Model.nimGame)(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Nim_Model.withcore), UI_Icons.iredo(Game_Nim_Model.withcore), UI_Icons.ireset(Game_Nim_Model.withcore), UI_Icons.irules(Game_Nim_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = Pha_Elements.div([ Pha.class_("ui-board nim-board") ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_Monoid.monoidArray)(function (i) {
          return function (v) {
              return Data_Array.concat([ [ drawRow(i) ], Lib_Util.repeat(length)(drawSquare(i)), Data_Array.mapWithIndex(drawPeg(i))([ v.value0, v.value1 ]) ]);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))), Pha_Elements.span([ Pha.class_("nim-turn-message") ])([ Pha.text((function () {
          var $10 = Game_Core.isLevelFinished(Game_Nim_Model.nimGame)(state);
          if ($10) {
              return "Partie finie";
          };
          var $11 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
          if ($11) {
              return "Tour du joueur bleu";
          };
          return "Tour du joueur rouge";
      })()) ]) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Nim_Model.withcore)(Game_Nim_Model.nimGame)({
          config: config,
          board: board,
          rules: rules,
          winTitle: winTitle
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Nim"] = $PS["Game.Nim"] || {};
  var exports = $PS["Game.Nim"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Game_Nim_View = $PS["Game.Nim.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Nim_Model.withcore)(Game_Core.Init.value)),
      view: Game_Nim_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Noirblanc.Model"] = $PS["Game.Noirblanc.Model"] || {};
  var exports = $PS["Game.Noirblanc.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_KonamiCode = $PS["Lib.KonamiCode"];
  var Lib_Util = $PS["Lib.Util"];
  var MyPrelude = $PS["MyPrelude"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SelectMode = (function () {
      function SelectMode(value0) {
          this.value0 = value0;
      };
      SelectMode.create = function (value0) {
          return new SelectMode(value0);
      };
      return SelectMode;
  })();
  var SelectLevel = (function () {
      function SelectLevel(value0) {
          this.value0 = value0;
      };
      SelectLevel.create = function (value0) {
          return new SelectLevel(value0);
      };
      return SelectLevel;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Konami = (function () {
      function Konami(value0) {
          this.value0 = value0;
      };
      Konami.create = function (value0) {
          return new Konami(value0);
      };
      return Konami;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var sizes = [ new Data_Tuple.Tuple(3, 3), new Data_Tuple.Tuple(4, 4), new Data_Tuple.Tuple(2, 10), new Data_Tuple.Tuple(3, 10), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(8, 8), new Data_Tuple.Tuple(8, 8) ];
  var onKeyDown = function ($50) {
      return Data_Maybe.Just.create(Konami.create($50));
  };
  var istate = Game_Core.genState({
      light: [  ],
      played: [  ]
  })(Control_Category.identity(Control_Category.categoryFn))({
      level: 0,
      mode: 0,
      maxLevels: [ 0, 1, 1, 0 ],
      keySequence: [  ]
  });
  var _played = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.played;
      })(function (v) {
          return function (v1) {
              return {
                  played: v1,
                  light: v.light
              };
          };
      })(dictStrong);
  };
  var _light = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.light;
      })(function (v) {
          return function (v1) {
              return {
                  light: v1,
                  played: v.played
              };
          };
      })(dictStrong);
  };
  var _ext$prime = function (dictStrong) {
      var $51 = Game_Core["_ext"](dictStrong);
      var $52 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($53) {
          return $51($52($53));
      };
  };
  var _keySequence = function (dictStrong) {
      var $54 = _ext$prime(dictStrong);
      var $55 = Data_Lens_Lens.lens(function (v) {
          return v.keySequence;
      })(function (v) {
          return function (v1) {
              return {
                  keySequence: v1,
                  level: v.level,
                  maxLevels: v.maxLevels,
                  mode: v.mode
              };
          };
      })(dictStrong);
      return function ($56) {
          return $54($55($56));
      };
  };
  var _level = function (dictStrong) {
      var $57 = _ext$prime(dictStrong);
      var $58 = Data_Lens_Lens.lens(function (v) {
          return v.level;
      })(function (v) {
          return function (v1) {
              return {
                  level: v1,
                  keySequence: v.keySequence,
                  maxLevels: v.maxLevels,
                  mode: v.mode
              };
          };
      })(dictStrong);
      return function ($59) {
          return $57($58($59));
      };
  };
  var _maxLevels = function (dictStrong) {
      var $60 = _ext$prime(dictStrong);
      var $61 = Data_Lens_Lens.lens(function (v) {
          return v.maxLevels;
      })(function (v) {
          return function (v1) {
              return {
                  maxLevels: v1,
                  keySequence: v.keySequence,
                  level: v.level,
                  mode: v.mode
              };
          };
      })(dictStrong);
      return function ($62) {
          return $60($61($62));
      };
  };
  var _mode = function (dictStrong) {
      var $63 = _ext$prime(dictStrong);
      var $64 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  keySequence: v.keySequence,
                  level: v.level,
                  maxLevels: v.maxLevels
              };
          };
      })(dictStrong);
      return function ($65) {
          return $63($64($65));
      };
  };
  var neighbor = function (state) {
      return function (index1) {
          return function (index2) {
              var mode = Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget));
              var v = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(index1)(index2);
              return ((v.row * v.row | 0) + (v.col * v.col | 0) | 0) === 1 || (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(mode)(3) === 0 && index1 === index2 || mode >= 2 && (index1 !== index2 && (v.row * v.col | 0) === 0));
          };
      };
  };
  var toggleCell = function (state) {
      return function (index) {
          return Data_Array.mapWithIndex(function (i) {
              return function (v) {
                  return v !== neighbor(state)(index)(i);
              };
          });
      };
  };
  var genRandomBoard = function (state) {
      var size = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0;
      return Control_Bind.bind(Control_Monad_Free.freeBind)(Pha_Random["int"](0)(size))(function (nbMoves) {
          return Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(MyPrelude.replicateA(Control_Monad_Free.freeApplicative)(nbMoves)(Pha_Random["int'"](size)))(Data_Foldable.foldr(Data_Foldable.foldableArray)(toggleCell(state))(Data_Array.replicate(size)(true)));
      });
  };
  var noirblancGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      var size = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0;
      return Control_Bind.bind(Control_Monad_Free.freeBind)((function () {
          var $38 = Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget)) >= 6;
          if ($38) {
              return genRandomBoard(state);
          };
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Array.replicate(size)(true));
      })())(function (board) {
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)({
              light: board,
              played: Data_Array.replicate(size)(false)
          });
      });
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))((Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).light);
  }, function (state) {
      var v = Data_Maybe.fromMaybe(new Data_Tuple.Tuple(8, 8))(Data_Array.index(sizes)(Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget))));
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(v.value1)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(v.value0)(state)));
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (index) {
          return Data_Maybe.Just.create(Data_Lens_Setter.over((function () {
              var $66 = _played(Data_Profunctor_Strong.strongFn);
              var $67 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(index)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($68) {
                  return $66($67($68));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Lens_Setter.over(_light(Data_Profunctor_Strong.strongFn))(toggleCell(state)(index))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))));
      };
  }, function (v) {
      return new Game_Core.SizeLimit(3, 3, 10, 10);
  }, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var afterPlay = Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (state) {
      var mode = Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget));
      return Control_Applicative.when(Run.applicativeRun)(Game_Core.isLevelFinished(noirblancGame)(state))((function () {
          var nextLevel = (function () {
              var $42 = Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget)) >= 4;
              if ($42) {
                  return 6;
              };
              return Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget)) + (function () {
                  var $43 = mode === 0 || mode === 3;
                  if ($43) {
                      return 1;
                  };
                  return 2;
              })() | 0;
          })();
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set((function () {
              var $69 = _maxLevels(Data_Profunctor_Strong.strongFn);
              var $70 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(mode)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($71) {
                  return $69($70($71));
              };
          })())(nextLevel)))(function () {
              return Game_Core.newGame(noirblancGame)(Data_Lens_Setter.over(_level(Data_Profunctor_Strong.strongFn))(function (lvl) {
                  return Data_Ord.min(Data_Ord.ordInt)(lvl + 1 | 0)(6);
              }));
          });
      })());
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(noirblancGame)(v.value0);
      };
      if (v instanceof SelectMode) {
          return Game_Core.newGame(noirblancGame)((function () {
              var $72 = Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn))(v.value0);
              var $73 = Data_Lens_Setter.set(_level(Data_Profunctor_Strong.strongFn))(0);
              return function ($74) {
                  return $72($73($74));
              };
          })());
      };
      if (v instanceof SelectLevel) {
          return Game_Core.newGame(noirblancGame)(Data_Lens_Setter.set(_level(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Control_Apply.applySecond(Run.applyRun)(Game_Core.playA(noirblancGame)(v.value0))(afterPlay);
      };
      if (v instanceof Konami) {
          return Lib_KonamiCode.konamiCode(function (dictStrong) {
              return _keySequence(dictStrong);
          })(Pha_Update.purely(Data_Lens_Setter.set(_maxLevels(Data_Profunctor_Strong.strongFn))([ 6, 6, 6, 6 ])))(v.value0);
      };
      throw new Error("Failed pattern match at Game.Noirblanc.Model (line 121, column 1 - line 121, column 33): " + [ v.constructor.name ]);
  };
  exports["istate"] = istate;
  exports["_mode"] = _mode;
  exports["_level"] = _level;
  exports["_maxLevels"] = _maxLevels;
  exports["SelectMode"] = SelectMode;
  exports["SelectLevel"] = SelectLevel;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["onKeyDown"] = onKeyDown;
  exports["noirblancGame"] = noirblancGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Noirblanc.View"] = $PS["Game.Noirblanc.View"] || {};
  var exports = $PS["Game.Noirblanc.View"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var square = function (light) {
      return function (cross) {
          return function (props) {
              return Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("noirblanc-square") ])(props))([ Pha_Elements.div([ Pha.class_("noirblanc-square-inner"), Pha["class'"]("blanc")(light) ])([ Pha_Elements.div([ Pha.class_("noirblanc-square-blanc") ])((function () {
                  if (cross) {
                      return [ Pha_Svg.svg([ Pha.class_("ui-absolute noirblanc-cross") ])([ Pha_Svg.use("#cross")([  ]) ]) ];
                  };
                  return [  ];
              })()), Pha_Elements.div([ Pha.class_("noirblanc-square-noir") ])((function () {
                  if (cross) {
                      return [ Pha_Svg.svg([ Pha.class_("ui-absolute noirblanc-cross") ])([ Pha_Svg.use("#cross")([  ]) ]) ];
                  };
                  return [  ];
              })()) ]) ]);
          };
      };
  };
  var levelOptions = function (v) {
      return function (v1) {
          return function (opt) {
              if (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#locked"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Difficult\xe9 non d\xe9bloqu\xe9e"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: true,
                      style: opt.style
                  };
              };
              if (v === 0) {
                  return {
                      icon: new UI_Icon.IconText("3x3"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 1) {
                  return {
                      icon: new UI_Icon.IconText("4x4"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 2) {
                  return {
                      icon: new UI_Icon.IconText("2x10"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 3) {
                  return {
                      icon: new UI_Icon.IconText("3x10"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 4) {
                  return {
                      icon: new UI_Icon.IconText("5x5"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 5) {
                  return {
                      icon: new UI_Icon.IconText("NxM"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Dimensions personnalis\xe9es"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              return {
                  icon: new UI_Icon.IconSymbol("#lo-rand"),
                  selected: opt.selected,
                  tooltip: new Data_Maybe.Just("Grille al\xe9atoire"),
                  round: opt.round,
                  large: opt.large,
                  hidden: opt.hidden,
                  disabled: opt.disabled,
                  style: opt.style
              };
          };
      };
  };
  var view = function (state) {
      var rules = [ Pha.text("Le but du jeu est de retourner des tuiles pour que toutes soient face noire."), Pha_Elements.br, Pha.text("La difficult\xe9 est que lorsque tu retournes une tuile, les tuiles adjacentes sont \xe9galement retourn\xe9es."), Pha_Elements.br, Pha.text("Ce jeu poss\xe8de diff\xe9rents niveaux d\xe9bloqu\xe9s au fur et \xe0 mesure ainsi que d'autres modes de jeu. Selon le mode choisi, les r\xe8gles pour retourner les tuiles changent.") ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var config = UI_Template.card("Tout noir tout blanc")([ UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Mode jeu")([ 0, 1, 2, 3 ])(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Noirblanc_Model.SelectMode.create)(function (i) {
          return function (v) {
              return {
                  icon: UI_Icon.IconSymbol.create("#lo-mode" + Data_Show.show(Data_Show.showInt)(i + 1 | 0)),
                  selected: v.selected,
                  tooltip: v.tooltip,
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          };
      }), UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Difficult\xe9")([ 0, 1, 2, 3, 4, 5, 6 ])(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_level"](Data_Lens_Internal_Forget.strongForget)))(Game_Noirblanc_Model.SelectLevel.create)(function (i) {
          return levelOptions(i)(Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Ord.ordInt))(new Data_Maybe.Just(i))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_maxLevels"](Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_mode"](Data_Lens_Internal_Forget.strongForget)))));
      }), UI_Icons.icongroup("Options")([ UI_Icons.ihelp(Game_Noirblanc_Model.withcore)(state), UI_Icons.ireset(Game_Noirblanc_Model.withcore)(state), UI_Icons.irules(Game_Noirblanc_Model.withcore)(state) ]) ]);
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-board") ])(UI_Template.gridStyle(rows)(columns)(4)))(Lib_Util.map2(position.light)(position.played)(function (index) {
          return function (light) {
              return function (played) {
                  var v = Lib_Util.coords(columns)(index);
                  return square(light)(Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && played)([ Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha.style("height")(Pha_Util.pc(0.86 / Data_Int.toNumber(rows))), Pha.style("width")(Pha_Util.pc(0.86 / Data_Int.toNumber(columns))), Pha.style("left")(Pha_Util.pc((Data_Int.toNumber(v.col) + 7.0e-2) / Data_Int.toNumber(columns))), Pha.style("top")(Pha_Util.pc((Data_Int.toNumber(v.row) + 7.0e-2) / Data_Int.toNumber(rows))), Pha_Events.onclick(new Game_Noirblanc_Model.Play(index)) ]);
              };
          };
      }));
      var board = UI_Template.incDecGrid(Game_Noirblanc_Model.withcore)(Game_Noirblanc_Model.noirblancGame)(state)([ grid ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Noirblanc_Model.withcore)(Game_Noirblanc_Model.noirblancGame)({
          config: config,
          board: board,
          rules: rules,
          winTitle: "GAGN\xc9"
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Noirblanc"] = $PS["Game.Noirblanc"] || {};
  var exports = $PS["Game.Noirblanc"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];
  var Game_Noirblanc_View = $PS["Game.Noirblanc.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Noirblanc_Model.withcore)(Game_Core.Init.value)),
      view: Game_Noirblanc_View.view,
      onKeydown: Game_Noirblanc_Model.onKeyDown
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Paths.Model"] = $PS["Game.Paths.Model"] || {};
  var exports = $PS["Game.Paths.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var Mode1 = (function () {
      function Mode1() {

      };
      Mode1.value = new Mode1();
      return Mode1;
  })();
  var Mode2 = (function () {
      function Mode2() {

      };
      Mode2.value = new Mode2();
      return Mode2;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SelectVertex = (function () {
      function SelectVertex(value0) {
          this.value0 = value0;
      };
      SelectVertex.create = function (value0) {
          return new SelectVertex(value0);
      };
      return SelectVertex;
  })();
  var SelectMode = (function () {
      function SelectMode(value0) {
          this.value0 = value0;
      };
      SelectMode.create = function (value0) {
          return new SelectMode(value0);
      };
      return SelectMode;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var pathBetween = function (columns) {
      return function (u) {
          return function (v) {
              var v1 = Lib_Util.dCoords(columns)(u)(v);
              var $22 = v1.row === 0;
              if ($22) {
                  return new Data_Maybe.Just((function () {
                      var $23 = u < v;
                      if ($23) {
                          return Lib_Util.rangeWithStep(u + 1 | 0)(v)(1);
                      };
                      return Lib_Util.rangeWithStep(u - 1 | 0)(v)(-1 | 0);
                  })());
              };
              var $24 = v1.col === 0;
              if ($24) {
                  return new Data_Maybe.Just((function () {
                      var $25 = u < v;
                      if ($25) {
                          return Lib_Util.rangeWithStep(u + columns | 0)(v)(columns);
                      };
                      return Lib_Util.rangeWithStep(u - columns | 0)(v)(-columns | 0);
                  })());
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 4,
          nbColumns: 6,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      exit: Data_Maybe.Nothing.value,
      mode: Mode1.value
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Mode1 && y instanceof Mode1) {
              return true;
          };
          if (x instanceof Mode2 && y instanceof Mode2) {
              return true;
          };
          return false;
      };
  });
  var _ext$prime = function (dictStrong) {
      var $46 = Game_Core["_ext"](dictStrong);
      var $47 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($48) {
          return $46($47($48));
      };
  };
  var _mode = function (dictStrong) {
      var $49 = _ext$prime(dictStrong);
      var $50 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  exit: v.exit
              };
          };
      })(dictStrong);
      return function ($51) {
          return $49($50($51));
      };
  };
  var _exit = function (dictStrong) {
      var $52 = _ext$prime(dictStrong);
      var $53 = Data_Lens_Lens.lens(function (v) {
          return v.exit;
      })(function (v) {
          return function (v1) {
              return {
                  exit: v1,
                  mode: v.mode
              };
          };
      })(dictStrong);
      return function ($54) {
          return $52($53($54));
      };
  };
  var isValidPath = function (state) {
      return function (path) {
          return Data_Maybe.fromMaybe(true)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Lens_Getter.viewOn(state)(_exit(Data_Lens_Internal_Forget.strongForget)))(function (exit) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.fromArray(path))(function (path$prime) {
                  var path2 = Data_Array_NonEmpty.init(path$prime);
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.fromArray(path2))(function (path2$prime) {
                      var path3 = Data_Array_NonEmpty.tail(path2$prime);
                      var begin = Data_Array_NonEmpty.head(path$prime);
                      var end = Data_Array_NonEmpty.last(path$prime);
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.length(Data_Array.nub(Data_Ord.ordInt)(path2)) === Data_Array.length(path2) && (!Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(exit)(path3) && (!Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(end)(path3) && (begin !== end || Data_Array.length(path) === ((Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0) + (function () {
                          var $31 = begin === exit;
                          if ($31) {
                              return 1;
                          };
                          return 0;
                      })() | 0) && end === exit))));
                  });
              });
          }));
      };
  };
  var game = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)((function () {
          var v = Data_Lens_Getter.viewOn(state)(_exit(Data_Lens_Internal_Forget.strongForget));
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return [ v.value0 ];
          };
          throw new Error("Failed pattern match at Game.Paths.Model (line 77, column 36 - line 79, column 27): " + [ v.constructor.name ]);
      })());
  }, function (state) {
      return Data_Array.length(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))) === ((Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) | 0) + (function () {
          var $34 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Lens_Getter.viewOn(state)(_exit(Data_Lens_Internal_Forget.strongForget)))(Data_Array.head(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
          if ($34) {
              return 1;
          };
          return 0;
      })() | 0);
  }, function (state) {
      return Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Function.flip(Data_Lens_Setter.set(_exit(Data_Profunctor_Strong.strongFn)))(state))((function () {
          var $35 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(Mode1.value);
          if ($35) {
              return Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(Pha_Random["int'"](Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0))(Data_Maybe.Just.create);
          };
          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
      })());
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (v) {
          var v1 = Data_Array.last(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
          if (v1 instanceof Data_Maybe.Nothing) {
              var $37 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(Mode2.value);
              if ($37) {
                  return new Data_Maybe.Just([ v ]);
              };
              return Data_Maybe.Nothing.value;
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(pathBetween(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v1.value0)(v))(function (p) {
                  var $38 = !Data_Array["null"](p) && isValidPath(state)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(p));
                  if ($38) {
                      return new Data_Maybe.Just(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(p));
                  };
                  return Data_Maybe.Nothing.value;
              });
          };
          throw new Error("Failed pattern match at Game.Paths.Model (line 65, column 9 - line 72, column 28): " + [ v1.constructor.name ]);
      };
  }, function (v) {
      return new Game_Core.SizeLimit(2, 2, 9, 9);
  }, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(game)(v.value0);
      };
      if (v instanceof SelectVertex) {
          return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (state) {
              var $42 = Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
              if ($42) {
                  return Pha_Update.purely(Data_Lens_Setter.set(Game_Core["_position"](Data_Profunctor_Strong.strongFn))([ v.value0 ]));
              };
              var $43 = Data_Maybe.isNothing(Data_Lens_Getter.viewOn(state)(_exit(Data_Lens_Internal_Forget.strongForget)));
              if ($43) {
                  return Pha_Update.purely(Data_Lens_Setter.set(_exit(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v.value0)));
              };
              return Game_Core.playA(game)(v.value0);
          });
      };
      if (v instanceof SelectMode) {
          return Game_Core.newGame(game)(Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      throw new Error("Failed pattern match at Game.Paths.Model (line 95, column 1 - line 95, column 33): " + [ v.constructor.name ]);
  };
  exports["Mode1"] = Mode1;
  exports["Mode2"] = Mode2;
  exports["istate"] = istate;
  exports["_exit"] = _exit;
  exports["_mode"] = _mode;
  exports["SelectVertex"] = SelectVertex;
  exports["SelectMode"] = SelectMode;
  exports["update"] = update;
  exports["eqMode"] = eqMode;
  exports["game"] = game;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Paths.View"] = $PS["Game.Paths.View"] || {};
  var exports = $PS["Game.Paths.View"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Paths_Model = $PS["Game.Paths.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var square = function (v) {
      return function (props) {
          var pos = [ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(v.x)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(v.y)), Pha_Svg.width("100"), Pha_Svg.height("100") ];
          return Pha_Svg.g(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha["class'"]("paths-darken")(v.darken) ])(props))([ Pha_Svg.use("#paths-background")(pos), Pha.when(v.door)(function (v1) {
              return Pha_Svg.use("#paths-door")(pos);
          }), Pha_Svg.use("#paths-trap")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(pos)([ Pha.class_("paths-trap"), Pha["class'"]("visible")(v.trap && !v.door) ])) ]);
      };
  };
  var heroCursor = function (pp) {
      return Pha_Svg.use("#meeplehat")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.key("chero"), Pha.class_("paths-cursor"), Pha_Svg.x_("-40"), Pha_Svg.y_("-40"), Pha_Svg.width("80"), Pha_Svg.height("80") ])(UI_Template.svgCursorStyle(pp)));
  };
  var doorCursor = function (pp) {
      return Pha_Svg.use("#paths-door")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.key("cdoor"), Pha.class_("paths-cursor"), Pha_Svg.x_("-50"), Pha_Svg.y_("-50"), Pha_Svg.width("100"), Pha_Svg.height("100") ])(UI_Template.svgCursorStyle(pp)));
  };
  var view = function (state) {
      var rules = [ Pha_Elements.p([  ])([ Pha.text("Apr\xe8s moultes p\xe9rip\xe9ties dans le temple maudit de Berge, le professeur Hamilton Jones se retrouve dans la derni\xe8re salle"), Pha_Elements.br, Pha.text("Pour sortir de celle-ci, il doit s'enfuir par une porte au-dessous de lui."), Pha_Elements.br, Pha.text("Celle-ci ne peut \xeatre ouverte qu'en marchant sur chacune des dalles dans la salle.") ]), Pha_Elements.p([  ])([ Pha.text("Malheusement, ces dalles sont pi\xe9g\xe9es, le pi\xe8ge se d\xe9clenchant peu de temps apr\xe8s avoir march\xe9 dessus."), Pha_Elements.br, Pha.text("Donc, Hamilton ne peut pas remarcher sur une dalle sur laquelle il a d\xe9j\xe0 \xe9t\xe9."), Pha_Elements.br, Pha.text("N'ayant plus l'aisance de sa jeunesse, Hamilton ne peut se d\xe9placer que d'une dalle \xe0 la fois et ne peut le faire en diagonale.") ]), Pha_Elements.p([  ])([ Pha.text("Trouve un parcours pour r\xe9soudre l'\xe9nigme. Ca semble facile ? Mais, cela est-il possible pour toutes les tailles de grille ?") ]), Pha_Elements.p([  ])([ Pha.text("Dans le deuxi\xe8me mode de jeu, tu peux choisir la position de d\xe9part d'Hamilton ainsi que celle de la porte."), Pha_Elements.br, Pha.text("Tu remarqueras qu'il n'y a pas toujours de solution."), Pha_Elements.br, Pha.text("Trouve des crit\xe8res sur les positions d'Hamilton et de la porte pour qu'une solution soit possible.") ]) ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var config = UI_Template.card("Chemins")([ UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Paths_Model.eqMode)(state)("Mode de jeu")([ Game_Paths_Model.Mode1.value, Game_Paths_Model.Mode2.value ])(Data_Lens_Getter.viewOn(state)(Game_Paths_Model["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Paths_Model.SelectMode.create)(function (v) {
          if (v instanceof Game_Paths_Model.Mode1) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#paths-mode0"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Mode 1"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          if (v instanceof Game_Paths_Model.Mode2) {
              return function (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#paths-mode1"),
                      selected: v1.selected,
                      tooltip: new Data_Maybe.Just("Mode 2"),
                      round: v1.round,
                      large: v1.large,
                      hidden: v1.hidden,
                      disabled: v1.disabled,
                      style: v1.style
                  };
              };
          };
          throw new Error("Failed pattern match at Game.Paths.View (line 59, column 90 - line 61, column 85): " + [ v.constructor.name ]);
      }), UI_Icons.iconSizesGroup(Game_Paths_Model.withcore)(state)([ new Data_Tuple.Tuple(4, 6), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(3, 8) ])(true), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp(Game_Paths_Model.withcore), UI_Icons.iundo(Game_Paths_Model.withcore), UI_Icons.iredo(Game_Paths_Model.withcore), UI_Icons.ireset(Game_Paths_Model.withcore), UI_Icons.irules(Game_Paths_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var hero = function (h) {
          var v = Lib_Util.coords(columns)(h);
          return Pha_Svg.use("#meeplehat")([ Pha.key("hero"), Pha_Svg.width("80"), Pha_Svg.height("80"), Pha.class_("paths-hero"), Pha.style("transform")(Pha_Util.translate(Pha_Util.pc((Data_Int.toNumber(v.col) + 0.1) / Data_Int.toNumber(columns)))(Pha_Util.pc((Data_Int.toNumber(v.row) + 0.1) / Data_Int.toNumber(rows)))) ]);
      };
      var pathdec = Data_String_Common.joinWith(" ")(Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_Monoid.monoidArray)(function (i) {
          return function (v) {
              var v1 = Lib_Util.coords(columns)(v);
              return [ (function () {
                  var $20 = i === 0;
                  if ($20) {
                      return "M";
                  };
                  return "L";
              })(), Data_Show.show(Data_Show.showInt)((100 * v1.col | 0) + 50 | 0), Data_Show.show(Data_Show.showInt)((100 * v1.row | 0) + 50 | 0) ];
          };
      })(position));
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))(UI_Template.trackPointer(Game_Paths_Model.withcore)))([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(100 * columns | 0)(100 * rows | 0) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.repeat(rows * columns | 0)(function (index) {
          var v = Lib_Util.coords(columns)(index);
          return square({
              darken: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && Data_Int.even(v.row + v.col | 0),
              trap: Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(index)(position) && Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(index))(Data_Array.last(position)),
              door: Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Lens_Getter.viewOn(state)(Game_Paths_Model["_exit"](Data_Lens_Internal_Forget.strongForget)))(new Data_Maybe.Just(index)),
              x: Data_Int.toNumber(100 * v.col | 0),
              y: Data_Int.toNumber(100 * v.row | 0)
          })([ Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha_Events.onclick(new Game_Paths_Model.SelectVertex(index)) ]);
      }))([ Pha_Svg.path(pathdec)([ Pha.class_("paths-path") ]), Pha.maybe(Data_Array.last(position))(hero), Pha.maybe(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)))(function (pp) {
          var $26 = Data_Array["null"](position);
          if ($26) {
              return heroCursor(pp);
          };
          var $27 = Data_Maybe.isNothing(Data_Lens_Getter.viewOn(state)(Game_Paths_Model["_exit"](Data_Lens_Internal_Forget.strongForget)));
          if ($27) {
              return doorCursor(pp);
          };
          return Pha.emptyNode;
      }) ])) ]);
      var board = UI_Template.incDecGrid(Game_Paths_Model.withcore)(Game_Paths_Model.game)(state)([ grid ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Paths_Model.withcore)(Game_Paths_Model.game)({
          config: config,
          board: board,
          rules: rules
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Paths"] = $PS["Game.Paths"] || {};
  var exports = $PS["Game.Paths"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Paths_Model = $PS["Game.Paths.Model"];
  var Game_Paths_View = $PS["Game.Paths.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Paths_Model.withcore)(Game_Core.Init.value)),
      view: Game_Paths_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Queens.Model"] = $PS["Game.Queens.Model"] || {};
  var exports = $PS["Game.Queens.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Update = $PS["Pha.Update"];                
  var Rook = (function () {
      function Rook() {

      };
      Rook.value = new Rook();
      return Rook;
  })();
  var Bishop = (function () {
      function Bishop() {

      };
      Bishop.value = new Bishop();
      return Bishop;
  })();
  var King = (function () {
      function King() {

      };
      King.value = new King();
      return King;
  })();
  var Knight = (function () {
      function Knight() {

      };
      Knight.value = new Knight();
      return Knight;
  })();
  var Queen = (function () {
      function Queen() {

      };
      Queen.value = new Queen();
      return Queen;
  })();
  var Custom = (function () {
      function Custom() {

      };
      Custom.value = new Custom();
      return Custom;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var SelectPiece = (function () {
      function SelectPiece(value0) {
          this.value0 = value0;
      };
      SelectPiece.create = function (value0) {
          return new SelectPiece(value0);
      };
      return SelectPiece;
  })();
  var SelectSquare = (function () {
      function SelectSquare(value0) {
          this.value0 = value0;
      };
      SelectSquare.create = function (value0) {
          return new SelectSquare(value0);
      };
      return SelectSquare;
  })();
  var SelectAllowedPiece = (function () {
      function SelectAllowedPiece(value0) {
          this.value0 = value0;
      };
      SelectAllowedPiece.create = function (value0) {
          return new SelectAllowedPiece(value0);
      };
      return SelectAllowedPiece;
  })();
  var ToggleMultiPieces = (function () {
      function ToggleMultiPieces() {

      };
      ToggleMultiPieces.value = new ToggleMultiPieces();
      return ToggleMultiPieces;
  })();
  var FlipDirection = (function () {
      function FlipDirection(value0) {
          this.value0 = value0;
      };
      FlipDirection.create = function (value0) {
          return new FlipDirection(value0);
      };
      return FlipDirection;
  })();
  var FlipLocalMove = (function () {
      function FlipLocalMove(value0) {
          this.value0 = value0;
      };
      FlipLocalMove.create = function (value0) {
          return new FlipLocalMove(value0);
      };
      return FlipLocalMove;
  })();
  var Customize = (function () {
      function Customize() {

      };
      Customize.value = new Customize();
      return Customize;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var sign = function (v) {
      if (v === 0) {
          return 0;
      };
      var $44 = v > 0;
      if ($44) {
          return 1;
      };
      return -1 | 0;
  };
  var showPiece = new Data_Show.Show(function (v) {
      if (v instanceof Queen) {
          return "queen";
      };
      if (v instanceof King) {
          return "king";
      };
      if (v instanceof Rook) {
          return "rook";
      };
      if (v instanceof Bishop) {
          return "bishop";
      };
      if (v instanceof Knight) {
          return "knight";
      };
      return "custom";
  });
  var piecesList = [ Rook.value, Bishop.value, King.value, Knight.value, Queen.value ];
  var legalMoves = function (v) {
      return function (v1) {
          return function (v2) {
              if (v instanceof Queen) {
                  return ((((v1 * v1 | 0) - (v2 * v2 | 0) | 0) * v1 | 0) * v2 | 0) === 0;
              };
              if (v instanceof King) {
                  return ((v1 * v1 | 0) + (v2 * v2 | 0) | 0) <= 2;
              };
              if (v instanceof Rook) {
                  return (v1 * v2 | 0) === 0;
              };
              if (v instanceof Bishop) {
                  return ((v1 * v1 | 0) - (v2 * v2 | 0) | 0) === 0;
              };
              if (v instanceof Knight) {
                  return ((v1 * v1 | 0) + (v2 * v2 | 0) | 0) === 5;
              };
              return false;
          };
      };
  };
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 8,
          nbColumns: 8,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      selectedPiece: Queen.value,
      selectedSquare: Data_Maybe.Nothing.value,
      allowedPieces: Data_Array_NonEmpty.singleton(Rook.value),
      multiPieces: false,
      customLocalMoves: Data_Array.replicate(25)(false),
      customDirections: Data_Array.replicate(9)(false)
  });
  var eqPiece = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Rook && y instanceof Rook) {
              return true;
          };
          if (x instanceof Bishop && y instanceof Bishop) {
              return true;
          };
          if (x instanceof King && y instanceof King) {
              return true;
          };
          if (x instanceof Knight && y instanceof Knight) {
              return true;
          };
          if (x instanceof Queen && y instanceof Queen) {
              return true;
          };
          if (x instanceof Custom && y instanceof Custom) {
              return true;
          };
          if (x instanceof Empty && y instanceof Empty) {
              return true;
          };
          return false;
      };
  });
  var toggleAllowedPiece = function (piece) {
      return function (v) {
          return function (pieces) {
              if (!v) {
                  return Data_Array_NonEmpty.singleton(piece);
              };
              if (v) {
                  var pieces2 = Data_Array.filter(function (p2) {
                      return Data_Eq.eq(eqPiece)(p2)(piece) !== Data_Foldable.elem(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(eqPiece)(p2)(pieces);
                  })(piecesList);
                  return Data_Maybe.fromMaybe(pieces)(Data_Array_NonEmpty.fromArray(pieces2));
              };
              throw new Error("Failed pattern match at Game.Queens.Model (line 110, column 1 - line 110, column 87): " + [ piece.constructor.name, v.constructor.name, pieces.constructor.name ]);
          };
      };
  };
  var _ext$prime = function (dictStrong) {
      var $71 = Game_Core["_ext"](dictStrong);
      var $72 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($73) {
          return $71($72($73));
      };
  };
  var _multiPieces = function (dictStrong) {
      var $74 = _ext$prime(dictStrong);
      var $75 = Data_Lens_Lens.lens(function (v) {
          return v.multiPieces;
      })(function (v) {
          return function (v1) {
              return {
                  multiPieces: v1,
                  allowedPieces: v.allowedPieces,
                  customDirections: v.customDirections,
                  customLocalMoves: v.customLocalMoves,
                  selectedPiece: v.selectedPiece,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($76) {
          return $74($75($76));
      };
  };
  var _selectedPiece = function (dictStrong) {
      var $77 = _ext$prime(dictStrong);
      var $78 = Data_Lens_Lens.lens(function (v) {
          return v.selectedPiece;
      })(function (v) {
          return function (v1) {
              return {
                  selectedPiece: v1,
                  allowedPieces: v.allowedPieces,
                  customDirections: v.customDirections,
                  customLocalMoves: v.customLocalMoves,
                  multiPieces: v.multiPieces,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($79) {
          return $77($78($79));
      };
  };
  var _selectedSquare = function (dictStrong) {
      var $80 = _ext$prime(dictStrong);
      var $81 = Data_Lens_Lens.lens(function (v) {
          return v.selectedSquare;
      })(function (v) {
          return function (v1) {
              return {
                  selectedSquare: v1,
                  allowedPieces: v.allowedPieces,
                  customDirections: v.customDirections,
                  customLocalMoves: v.customLocalMoves,
                  multiPieces: v.multiPieces,
                  selectedPiece: v.selectedPiece
              };
          };
      })(dictStrong);
      return function ($82) {
          return $80($81($82));
      };
  };
  var _customLocalMoves = function (dictStrong) {
      var $83 = _ext$prime(dictStrong);
      var $84 = Data_Lens_Lens.lens(function (v) {
          return v.customLocalMoves;
      })(function (v) {
          return function (v1) {
              return {
                  customLocalMoves: v1,
                  allowedPieces: v.allowedPieces,
                  customDirections: v.customDirections,
                  multiPieces: v.multiPieces,
                  selectedPiece: v.selectedPiece,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($85) {
          return $83($84($85));
      };
  };
  var _customDirections = function (dictStrong) {
      var $86 = _ext$prime(dictStrong);
      var $87 = Data_Lens_Lens.lens(function (v) {
          return v.customDirections;
      })(function (v) {
          return function (v1) {
              return {
                  customDirections: v1,
                  allowedPieces: v.allowedPieces,
                  customLocalMoves: v.customLocalMoves,
                  multiPieces: v.multiPieces,
                  selectedPiece: v.selectedPiece,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($88) {
          return $86($87($88));
      };
  };
  var canCapture = function (state) {
      return function (piece) {
          return function (index1) {
              return function (index2) {
                  var v = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(index2)(index1);
                  var $56 = Data_Eq.notEq(eqPiece)(piece)(Custom.value);
                  if ($56) {
                      return index1 !== index2 && legalMoves(piece)(v.row)(v.col);
                  };
                  return ((((v.row * v.row | 0) - (v.col * v.col | 0) | 0) * v.row | 0) * v.col | 0) === 0 && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Array.index(Data_Lens_Getter.viewOn(state)(_customDirections(Data_Lens_Internal_Forget.strongForget)))(((3 * sign(v.row) | 0) + sign(v.col) | 0) + 4 | 0))(new Data_Maybe.Just(true)) || ((v.row * v.row | 0) + (v.col * v.col | 0) | 0) <= 8 && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Array.index(Data_Lens_Getter.viewOn(state)(_customLocalMoves(Data_Lens_Internal_Forget.strongForget)))(((5 * v.row | 0) + v.col | 0) + 12 | 0))(new Data_Maybe.Just(true));
              };
          };
      };
  };
  var attackedBy = function (state) {
      return function (piece) {
          return function (index) {
              return Lib_Util.repeat(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(canCapture(state)(piece)(index));
          };
      };
  };
  var attackedBySelected = function (state) {
      var v = Data_Lens_Getter.viewOn(state)(_selectedSquare(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(false);
      };
      if (v instanceof Data_Maybe.Just) {
          return attackedBy(state)(Data_Lens_Getter.viewOn(state)(_selectedPiece(Data_Lens_Internal_Forget.strongForget)))(v.value0);
      };
      throw new Error("Failed pattern match at Game.Queens.Model (line 106, column 28 - line 108, column 64): " + [ v.constructor.name ]);
  };
  var capturableSquares = function (state) {
      return Data_FoldableWithIndex.foldrWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(function (index) {
          return function (piece) {
              var $61 = Data_Eq.eq(eqPiece)(piece)(Empty.value);
              if ($61) {
                  return Control_Category.identity(Control_Category.categoryFn);
              };
              return Data_Array.zipWith(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(attackedBy(state)(piece)(index));
          };
      })(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(false))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  };
  var _allowedPieces = function (dictStrong) {
      var $89 = _ext$prime(dictStrong);
      var $90 = Data_Lens_Lens.lens(function (v) {
          return v.allowedPieces;
      })(function (v) {
          return function (v1) {
              return {
                  allowedPieces: v1,
                  customDirections: v.customDirections,
                  customLocalMoves: v.customLocalMoves,
                  multiPieces: v.multiPieces,
                  selectedPiece: v.selectedPiece,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($91) {
          return $89($90($91));
      };
  };
  var queensScoreGame = new Game_Core.ScoreGame(function () {
      return queensGame;
  }, function (state) {
      return Data_Lens_Getter.viewOn(state)(_multiPieces(Data_Lens_Internal_Forget.strongForget)) || Data_Eq.eq(eqPiece)(Data_Array_NonEmpty.head(Data_Lens_Getter.viewOn(state)(_allowedPieces(Data_Lens_Internal_Forget.strongForget))))(Custom.value);
  }, function (v) {
      return Game_Core.Maximize.value;
  }, (function () {
      var $92 = Data_Array.filter(function (v) {
          return Data_Eq.notEq(eqPiece)(v)(Empty.value);
      });
      var $93 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($94) {
          return Data_Array.length($92($93($94)));
      };
  })(), function (state) {
      return Data_String_Common.joinWith("-")([ Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))), Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget))), Data_Show.show(showPiece)(Data_Array_NonEmpty.head(Data_Lens_Getter.viewOn(state)(_allowedPieces(Data_Lens_Internal_Forget.strongForget)))) ]);
  });
  var queensGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(Empty.value));
  }, function (state) {
      return Data_Foldable.and(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Lib_Util.map2(capturableSquares(state))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(function (v) {
          return function (captured) {
              return function (piece) {
                  return !captured || Data_Eq.eq(eqPiece)(piece)(Empty.value);
              };
          };
      }));
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_selectedPiece(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.head(Data_Lens_Getter.viewOn(state)(_allowedPieces(Data_Lens_Internal_Forget.strongForget))))(state));
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (index) {
          var selectedPiece = Data_Lens_Getter.viewOn(state)(_selectedPiece(Data_Lens_Internal_Forget.strongForget));
          return Data_Array.modifyAt(index)(function (t) {
              var $62 = Data_Eq.eq(eqPiece)(t)(selectedPiece);
              if ($62) {
                  return Empty.value;
              };
              return selectedPiece;
          })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, function (v) {
      return new Game_Core.SizeLimit(3, 3, 9, 9);
  }, Game_Core["updateScore'"](queensScoreGame)(Game_Core.NeverShowWin.value));
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(queensGame)(v.value0);
      };
      if (v instanceof Play) {
          return Game_Core.playA(queensGame)(v.value0);
      };
      if (v instanceof SelectPiece) {
          return Pha_Update.purely(Data_Lens_Setter.set(_selectedPiece(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SelectSquare) {
          return Pha_Update.purely(Data_Lens_Setter.set(_selectedSquare(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SelectAllowedPiece) {
          return Game_Core.newGame(queensGame)(function (state) {
              return Data_Lens_Setter.over(_allowedPieces(Data_Profunctor_Strong.strongFn))(toggleAllowedPiece(v.value0)(Data_Lens_Getter.viewOn(state)(_multiPieces(Data_Lens_Internal_Forget.strongForget))))(state);
          });
      };
      if (v instanceof ToggleMultiPieces) {
          return Pha_Update.purely(Data_Lens_Setter.over(_multiPieces(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      if (v instanceof FlipDirection) {
          return Game_Core.newGame(queensGame)(Data_Lens_Setter.over((function () {
              var $95 = _customDirections(Data_Profunctor_Strong.strongFn);
              var $96 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($97) {
                  return $95($96($97));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      if (v instanceof FlipLocalMove) {
          return Game_Core.newGame(queensGame)(Data_Lens_Setter.over((function () {
              var $98 = _customLocalMoves(Data_Profunctor_Strong.strongFn);
              var $99 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($100) {
                  return $98($99($100));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      if (v instanceof Customize) {
          return Game_Core.newGame(queensGame)((function () {
              var $101 = Data_Lens_Setter.set(_multiPieces(Data_Profunctor_Strong.strongFn))(false);
              var $102 = Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.CustomDialog.value);
              var $103 = Data_Lens_Setter.set(_allowedPieces(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.singleton(Custom.value));
              return function ($104) {
                  return $101($102($103($104)));
              };
          })());
      };
      throw new Error("Failed pattern match at Game.Queens.Model (line 143, column 1 - line 143, column 33): " + [ v.constructor.name ]);
  };
  exports["piecesList"] = piecesList;
  exports["Rook"] = Rook;
  exports["Bishop"] = Bishop;
  exports["King"] = King;
  exports["Knight"] = Knight;
  exports["Queen"] = Queen;
  exports["Custom"] = Custom;
  exports["Empty"] = Empty;
  exports["istate"] = istate;
  exports["_selectedPiece"] = _selectedPiece;
  exports["_selectedSquare"] = _selectedSquare;
  exports["_allowedPieces"] = _allowedPieces;
  exports["_multiPieces"] = _multiPieces;
  exports["_customLocalMoves"] = _customLocalMoves;
  exports["_customDirections"] = _customDirections;
  exports["capturableSquares"] = capturableSquares;
  exports["attackedBySelected"] = attackedBySelected;
  exports["Play"] = Play;
  exports["SelectPiece"] = SelectPiece;
  exports["SelectSquare"] = SelectSquare;
  exports["SelectAllowedPiece"] = SelectAllowedPiece;
  exports["ToggleMultiPieces"] = ToggleMultiPieces;
  exports["FlipDirection"] = FlipDirection;
  exports["FlipLocalMove"] = FlipLocalMove;
  exports["Customize"] = Customize;
  exports["update"] = update;
  exports["eqPiece"] = eqPiece;
  exports["showPiece"] = showPiece;
  exports["queensGame"] = queensGame;
  exports["queensScoreGame"] = queensScoreGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Queens.View"] = $PS["Game.Queens.View"] || {};
  var exports = $PS["Game.Queens.View"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Queens_Model = $PS["Game.Queens.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var tooltip = function (v) {
      if (v instanceof Game_Queens_Model.Queen) {
          return "Reine";
      };
      if (v instanceof Game_Queens_Model.King) {
          return "Roi";
      };
      if (v instanceof Game_Queens_Model.Rook) {
          return "Tour";
      };
      if (v instanceof Game_Queens_Model.Bishop) {
          return "Fou";
      };
      if (v instanceof Game_Queens_Model.Knight) {
          return "Cavalier";
      };
      return "Pi\xe8ce personnalis\xe9e";
  };
  var square = function (v) {
      return function (props) {
          return Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(props)([ Pha.class_("queens-square"), Pha["class'"]("queens-square-capturable")(v.capturable), Pha["class'"]("queens-square-nonavailable")(v.nonavailable), Pha["class'"]("queens-square-selected")(v.selected) ]))((function () {
              var $8 = Data_Eq.eq(Game_Queens_Model.eqPiece)(v.piece)(Game_Queens_Model.Empty.value);
              if ($8) {
                  return [  ];
              };
              return [ Pha_Svg.svg([ Pha_Svg.width("100%"), Pha_Svg.height("100%"), Pha.class_("queens-piece") ])([ Pha_Svg.use("#piece-" + Data_Show.show(Game_Queens_Model.showPiece)(v.piece))([ Pha_Svg.x_("10%"), Pha_Svg.y_("10%"), Pha_Svg.width("80%"), Pha_Svg.height("80%") ]) ]) ];
          })());
      };
  };
  var view = function (state) {
      var rules = [ Pha.text("Place le plus de pi\xe8ces possible sur ta grille sans qu'aucune ne soit menac\xe9e par une autre pi\xe8ce."), Pha_Elements.br, Pha.text("Tu peux choisir de jouer avec diff\xe9rentes pi\xe8ces comme celles du jeu d'\xe9checs."), Pha_Elements.br, Pha.text("Le mode mixte permet de jouer avec plusieurs pi\xe8ces diff\xe9rentes."), Pha_Elements.br, Pha.text("Tu peux jouer avec une pi\xe8ce personnalis\xe9e si tu le souhaites.") ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var pieceSelector = Pha_Elements.div([ Pha.class_("ui-flex-center gutter2 queens-pieceselector") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Array_NonEmpty.toArray(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_allowedPieces"](Data_Lens_Internal_Forget.strongForget))))(function (piece) {
          var name = Data_Show.show(Game_Queens_Model.showPiece)(piece);
          return UI_Icons.iconbutton(Lib_Util.precord()())(state)({
              selected: Data_Eq.eq(Game_Queens_Model.eqPiece)(piece)(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_selectedPiece"](Data_Lens_Internal_Forget.strongForget))),
              icon: UI_Icon.IconSymbol.create("#piece-" + name)
          })([ Pha.key(name), Pha_Events.onclick(new Game_Queens_Model.SelectPiece(piece)) ]);
      }));
      var config = UI_Template.card("Les reines")([ UI_Icons.iconSizesGroup(Game_Queens_Model.withcore)(state)([ new Data_Tuple.Tuple(4, 4), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(7, 7), new Data_Tuple.Tuple(8, 8) ])(true), UI_Icons.iconSelectGroupM(UI_Icons.defa)(Game_Queens_Model.eqPiece)(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(state)("Pi\xe8ces disponibles")(Game_Queens_Model.piecesList)(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_allowedPieces"](Data_Lens_Internal_Forget.strongForget)))(Game_Queens_Model.SelectAllowedPiece.create)(function (piece) {
          return function (v) {
              return {
                  icon: UI_Icon.IconSymbol.create("#piece-" + Data_Show.show(Game_Queens_Model.showPiece)(piece)),
                  selected: v.selected,
                  tooltip: Data_Maybe.Just.create(tooltip(piece)),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          };
      }), UI_Icons.icongroup("Options")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ UI_Icons.iconbutton(Lib_Util.precord()())(state)({
          icon: new UI_Icon.IconSymbol("#customize"),
          selected: Data_Eq.eq(Game_Queens_Model.eqPiece)(Data_Array_NonEmpty.head(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_allowedPieces"](Data_Lens_Internal_Forget.strongForget))))(Game_Queens_Model.Custom.value),
          tooltip: new Data_Maybe.Just("Cr\xe9e ta propre propre pi\xe8ce")
      })([ Pha_Events.onclick(Game_Queens_Model.Customize.value) ]), UI_Icons.iconbutton(Lib_Util.precord()())(state)({
          icon: new UI_Icon.IconSymbol("#piece-mix"),
          selected: Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_multiPieces"](Data_Lens_Internal_Forget.strongForget)),
          tooltip: new Data_Maybe.Just("Mode mixte")
      })([ Pha_Events.onclick(Game_Queens_Model.ToggleMultiPieces.value) ]) ])([ UI_Icons.ihelp(Game_Queens_Model.withcore)(state), UI_Icons.ireset(Game_Queens_Model.withcore)(state), UI_Icons.irules(Game_Queens_Model.withcore)(state) ])), UI_Icons.iconBestScore(Game_Queens_Model.withcore)(Game_Queens_Model.queensScoreGame)(state) ]);
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var cursor = function (pp) {
          return Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-cursor") ])(UI_Template.cursorStyle(pp)(rows)(columns)(0.8)))([ Pha_Svg.svg([ Pha_Svg.width("100%"), Pha_Svg.height("100%") ])([ Pha_Svg.use("#piece-" + Data_Show.show(Game_Queens_Model.showPiece)(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_selectedPiece"](Data_Lens_Internal_Forget.strongForget))))([  ]) ]) ]);
      };
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-board") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))(UI_Template.trackPointer(Game_Queens_Model.withcore))))(Data_Array.concat([ Lib_Util.map3(position)(Game_Queens_Model.attackedBySelected(state))(Game_Queens_Model.capturableSquares(state))(function (index) {
          return function (piece) {
              return function (attacked) {
                  return function (capturable) {
                      return square({
                          piece: piece,
                          selected: attacked || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_selectedSquare"](Data_Lens_Internal_Forget.strongForget)))(new Data_Maybe.Just(index)),
                          nonavailable: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && (Data_Eq.notEq(Game_Queens_Model.eqPiece)(piece)(Game_Queens_Model.Empty.value) || capturable),
                          capturable: capturable
                      })([ Pha.style("width")(Pha_Util.pc(1.0 / Data_Int.toNumber(columns))), Pha.style("height")(Pha_Util.pc(1.0 / Data_Int.toNumber(rows))), Pha_Events.onclick(new Game_Queens_Model.Play(index)), Pha_Events.onpointerenter(new Game_Queens_Model.SelectSquare(new Data_Maybe.Just(index))), Pha_Events.onpointerleave(new Game_Queens_Model.SelectSquare(Data_Maybe.Nothing.value)) ]);
                  };
              };
          };
      }), [ Pha.maybe(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)))(cursor) ] ]));
      var scoreDialog = function (v) {
          return UI_Template.bestScoreDialog(Game_Queens_Model.withcore)(Game_Queens_Model.queensScoreGame)(state)(function (pos) {
              return [ Pha_Elements.div([ Pha.class_("ui-flex-center queens-bestscore-container") ])([ Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))([ Pha.class_("ui-board queens-grid") ]))(Data_Functor.mapFlipped(Data_Functor.functorArray)(pos)(function (piece) {
                  return square({
                      piece: piece,
                      capturable: false,
                      selected: false,
                      nonavailable: false
                  })([ Pha.style("width")(Pha_Util.pc(1.0 / Data_Int.toNumber(columns))), Pha.style("height")(Pha_Util.pc(1.0 / Data_Int.toNumber(rows))) ]);
              })) ]) ];
          });
      };
      var board = Pha_Elements.div([  ])([ pieceSelector, UI_Template.incDecGrid(Game_Queens_Model.withcore)(Game_Queens_Model.queensGame)(state)([ grid ]) ]);
      var angles = [ 45, 90, 135, 0, 0, 180, -45 | 0, -90 | 0, -135 | 0 ];
      var customDialog = function (v) {
          return UI_Template.dialog(Game_Queens_Model.withcore)("Personnalise ta pi\xe8ce")([ Pha_Elements.div([ Pha.class_("flex queens-custompiece") ])([ Pha_Elements.div([ Pha.class_("queens-grid queens-custompiece-grid") ])(Data_Array.mapWithIndex(function (index) {
              return function (selected) {
                  return square({
                      piece: (function () {
                          var $13 = index === 12;
                          if ($13) {
                              return Game_Queens_Model.Custom.value;
                          };
                          return Game_Queens_Model.Empty.value;
                      })(),
                      selected: selected,
                      capturable: false,
                      nonavailable: false
                  })([ Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha.style("width")("20%"), Pha.style("height")("20%"), Pha_Events["onclick'"]((function () {
                      var $14 = index !== 12;
                      if ($14) {
                          return new Data_Maybe.Just(new Game_Queens_Model.FlipLocalMove(index));
                      };
                      return Data_Maybe.Nothing.value;
                  })()) ]);
              };
          })(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_customLocalMoves"](Data_Lens_Internal_Forget.strongForget)))), Pha_Elements.div([ Pha.class_("flex queens-custompiece-directions") ])(Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_customDirections"](Data_Lens_Internal_Forget.strongForget)))(angles)(function (i) {
              return function (selected) {
                  return function (angle) {
                      return UI_Icons.iconbutton(Lib_Util.precord()())(state)({
                          selected: selected,
                          icon: (function () {
                              var $15 = i === 4;
                              if ($15) {
                                  return UI_Icon.IconNone.value;
                              };
                              return new UI_Icon.IconSymbol("#arrow");
                          })(),
                          style: [ new Data_Tuple.Tuple("transform", "rotate(" + (Data_Show.show(Data_Show.showInt)(angle) + "deg)")) ]
                      })([ Pha.key(Data_Show.show(Data_Show.showInt)(i)), Pha_Events["onclick'"]((function () {
                          var $16 = i !== 4;
                          if ($16) {
                              return new Data_Maybe.Just(new Game_Queens_Model.FlipDirection(i));
                          };
                          return Data_Maybe.Nothing.value;
                      })()) ]);
                  };
              };
          })) ]) ]);
      };
      return UI_Template.template(Lib_Util.precord()())(Game_Queens_Model.withcore)(Game_Queens_Model.queensGame)({
          config: config,
          board: board,
          rules: rules,
          customDialog: customDialog,
          scoreDialog: scoreDialog
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Queens"] = $PS["Game.Queens"] || {};
  var exports = $PS["Game.Queens"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Queens_Model = $PS["Game.Queens.Model"];
  var Game_Queens_View = $PS["Game.Queens.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Queens_Model.withcore)(Game_Core.Init.value)),
      view: Game_Queens_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Roue.Model"] = $PS["Game.Roue.Model"] || {};
  var exports = $PS["Game.Roue.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var Panel = (function () {
      function Panel(value0) {
          this.value0 = value0;
      };
      Panel.create = function (value0) {
          return new Panel(value0);
      };
      return Panel;
  })();
  var Wheel = (function () {
      function Wheel(value0) {
          this.value0 = value0;
      };
      Wheel.create = function (value0) {
          return new Wheel(value0);
      };
      return Wheel;
  })();
  var Board = (function () {
      function Board() {

      };
      Board.value = new Board();
      return Board;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var DnD = (function () {
      function DnD(value0) {
          this.value0 = value0;
      };
      DnD.create = function (value0) {
          return new DnD(value0);
      };
      return DnD;
  })();
  var Rotate = (function () {
      function Rotate(value0) {
          this.value0 = value0;
      };
      Rotate.create = function (value0) {
          return new Rotate(value0);
      };
      return Rotate;
  })();
  var SetSize = (function () {
      function SetSize(value0) {
          this.value0 = value0;
      };
      SetSize.create = function (value0) {
          return new SetSize(value0);
      };
      return SetSize;
  })();
  var Check = (function () {
      function Check() {

      };
      Check.value = new Check();
      return Check;
  })();
  var Ext = function (x) {
      return x;
  };
  var withdnd = new Game_Core.MsgWithDnd(DnD.create);
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      rotation: 0,
      size: 5,
      dragged: Data_Maybe.Nothing.value
  });
  var eqLoc = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Panel && y instanceof Panel) {
              return x.value0 === y.value0;
          };
          if (x instanceof Wheel && y instanceof Wheel) {
              return x.value0 === y.value0;
          };
          if (x instanceof Board && y instanceof Board) {
              return true;
          };
          return false;
      };
  });
  var _ext$prime = function (dictStrong) {
      var $59 = Game_Core["_ext"](dictStrong);
      var $60 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($61) {
          return $59($60($61));
      };
  };
  var _rotation = function (dictStrong) {
      var $62 = _ext$prime(dictStrong);
      var $63 = Data_Lens_Lens.lens(function (v) {
          return v.rotation;
      })(function (v) {
          return function (v1) {
              return {
                  rotation: v1,
                  dragged: v.dragged,
                  size: v.size
              };
          };
      })(dictStrong);
      return function ($64) {
          return $62($63($64));
      };
  };
  var aligned = function (state) {
      var rot = Data_Lens_Getter.viewOn(state)(_rotation(Data_Lens_Internal_Forget.strongForget));
      var n = Data_Array.length(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      return Data_Array.mapWithIndex(function (index) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return false;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(index + rot | 0)(n) === v.value0;
              };
              throw new Error("Failed pattern match at Game.Roue.Model (line 44, column 46 - line 46, column 42): " + [ v.constructor.name ]);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  };
  var validRotation$prime = function (state) {
      return Data_Array.length(Data_Array.filter(Control_Category.identity(Control_Category.categoryFn))(aligned(state))) === 1;
  };
  var validRotation = function (state) {
      return validRotation$prime(state) && Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Maybe.isJust)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  };
  var rotate = function (i) {
      return Data_Lens_Setter.addOver(Data_Semiring.semiringInt)(_rotation(Data_Profunctor_Strong.strongFn))(i);
  };
  var _size = function (dictStrong) {
      var $65 = _ext$prime(dictStrong);
      var $66 = Data_Lens_Lens.lens(function (v) {
          return v.size;
      })(function (v) {
          return function (v1) {
              return {
                  size: v1,
                  dragged: v.dragged,
                  rotation: v.rotation
              };
          };
      })(dictStrong);
      return function ($67) {
          return $65($66($67));
      };
  };
  var roueGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(_size(Data_Lens_Internal_Forget.strongForget)))(Data_Maybe.Nothing.value));
  }, function (v) {
      return false;
  }, (function () {
      var $68 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
      var $69 = Data_Lens_Setter.set(_rotation(Data_Profunctor_Strong.strongFn))(0);
      return function ($70) {
          return $68($69($70));
      };
  })(), Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (move) {
          var act = (function () {
              if (move.from instanceof Panel && move.to instanceof Wheel) {
                  return Data_Array.updateAt(move.to.value0)(new Data_Maybe.Just(move.from.value0));
              };
              if (move.from instanceof Wheel && move.to instanceof Wheel) {
                  return Lib_Util.swap(move.from.value0)(move.to.value0);
              };
              if (move.from instanceof Wheel && move.to instanceof Board) {
                  return Data_Array.updateAt(move.from.value0)(Data_Maybe.Nothing.value);
              };
              return Data_Function["const"](Data_Maybe.Nothing.value);
          })();
          return act(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var _dragged = function (dictStrong) {
      var $71 = _ext$prime(dictStrong);
      var $72 = Data_Lens_Lens.lens(function (v) {
          return v.dragged;
      })(function (v) {
          return function (v1) {
              return {
                  dragged: v1,
                  rotation: v.rotation,
                  size: v.size
              };
          };
      })(dictStrong);
      return function ($73) {
          return $71($72($73));
      };
  };
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(roueGame)(v.value0);
      };
      if (v instanceof DnD && v.value0 instanceof Game_Core.DropOnBoard) {
          return Pha_Update.purely(function (state) {
              var state2 = Data_Lens_Setter.set(_dragged(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(state);
              var v1 = Data_Lens_Getter.viewOn(state)(_dragged(Data_Lens_Internal_Forget.strongForget));
              if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Wheel) {
                  return Data_Lens_Setter.set((function () {
                      var $74 = Game_Core["_position"](Data_Profunctor_Strong.strongFn);
                      var $75 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v1.value0.value0)(Data_Lens_Internal_Wander.wanderFunction);
                      return function ($76) {
                          return $74($75($76));
                      };
                  })())(Data_Maybe.Nothing.value)(state2);
              };
              return state2;
          });
      };
      if (v instanceof DnD) {
          return Game_Core.dndUpdate(eqLoc)(roueGame)(function (dictStrong) {
              return _dragged(dictStrong);
          })(v.value0);
      };
      if (v instanceof Rotate) {
          return Pha_Update.purely(rotate(v.value0));
      };
      if (v instanceof SetSize) {
          return Game_Core.newGame(roueGame)(Data_Lens_Setter.set(_size(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Check) {
          var go = function (v1) {
              if (v1 === 0) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set(Game_Core["_showWin"](Data_Profunctor_Strong.strongFn))(true)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(1000))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set(Game_Core["_showWin"](Data_Profunctor_Strong.strongFn))(false)))(function () {
                              return Control_Applicative.pure(Run.applicativeRun)(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
                          });
                      });
                  });
              };
              return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (st2) {
                  var $58 = !validRotation(st2);
                  if ($58) {
                      return Control_Applicative.pure(Run.applicativeRun)(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
                  };
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(rotate(1)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(600))(function () {
                          return Control_Applicative.pure(Run.applicativeRun)(new Control_Monad_Rec_Class.Loop(v1 - 1 | 0));
                      });
                  });
              });
          };
          return Game_Core.lockAction(Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (st) {
              return Control_Monad_Rec_Class.tailRecM(Run.monadRecRun)(go)(Data_Lens_Getter.viewOn(st)(_size(Data_Lens_Internal_Forget.strongForget)));
          }));
      };
      throw new Error("Failed pattern match at Game.Roue.Model (line 87, column 1 - line 87, column 33): " + [ v.constructor.name ]);
  };
  exports["Panel"] = Panel;
  exports["Wheel"] = Wheel;
  exports["istate"] = istate;
  exports["_rotation"] = _rotation;
  exports["_size"] = _size;
  exports["_dragged"] = _dragged;
  exports["aligned"] = aligned;
  exports["validRotation'"] = validRotation$prime;
  exports["validRotation"] = validRotation;
  exports["Rotate"] = Rotate;
  exports["SetSize"] = SetSize;
  exports["Check"] = Check;
  exports["update"] = update;
  exports["eqLoc"] = eqLoc;
  exports["roueGame"] = roueGame;
  exports["withcore"] = withcore;
  exports["withdnd"] = withdnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Roue.View"] = $PS["Game.Roue.View"] || {};
  var exports = $PS["Game.Roue.View"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Roue_Model = $PS["Game.Roue.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var polarToCartesian = function (centerX) {
      return function (centerY) {
          return function (radius) {
              return function (angle) {
                  return {
                      x: centerX + radius * $$Math.cos(angle),
                      y: centerY + radius * $$Math.sin(angle)
                  };
              };
          };
      };
  };
  var pizza = function (cx) {
      return function (cy) {
          return function (radius) {
              return function (startAngle) {
                  return function (endAngle) {
                      var s = polarToCartesian(cx)(cy)(radius)(startAngle);
                      var e = polarToCartesian(cx)(cy)(radius)(endAngle);
                      return Data_String_Common.joinWith(" ")([ "M", Data_Show.show(Data_Show.showNumber)(cx), Data_Show.show(Data_Show.showNumber)(cy), "L", Data_Show.show(Data_Show.showNumber)(e.x), Data_Show.show(Data_Show.showNumber)(e.y), "A", Data_Show.show(Data_Show.showNumber)(radius), Data_Show.show(Data_Show.showNumber)(radius), "0 0 0", Data_Show.show(Data_Show.showNumber)(s.x), Data_Show.show(Data_Show.showNumber)(s.y), "L", Data_Show.show(Data_Show.showNumber)(cx), Data_Show.show(Data_Show.showNumber)(cy) ]);
                  };
              };
          };
      };
  };
  var cursor = function (v) {
      return function (color) {
          return Pha_Elements.div([ Pha.class_("ui-cursor roue-select-color roue-cursor"), Pha.style("left")(Pha_Util.pc(v.x)), Pha.style("top")(Pha_Util.pc(v.y)), Pha.style("background-color")(color) ])([  ]);
      };
  };
  var colors = [ "blue", "red", "magenta", "orange", "brown", "cyan", "gray", "black" ];
  var innerWheel = function (size) {
      return Pha_Elements.div([ Pha.class_("roue-inner") ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_Array.mapWithIndex(function (i) {
          return function (color) {
              return Pha_Svg.path(pizza(50.0)(50.0)(50.0)((2.0 * $$Math.pi * (Data_Int.toNumber(i) - 0.5)) / Data_Int.toNumber(size))((2.0 * $$Math.pi * (Data_Int.toNumber(i) + 0.5)) / Data_Int.toNumber(size)))([ Pha_Svg.fill(color), Pha_Svg.stroke("black") ]);
          };
      })(Data_Array.take(size)(colors))) ]);
  };
  var view = function (state) {
      var valid = Game_Roue_Model.validRotation(state);
      var size = Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_size"](Data_Lens_Internal_Forget.strongForget));
      var rules = [ Pha.text("Le but du jeu est de poser une bille sur chaque emplacement de la roue et effectuer un tour complet de la roue en respectant la condition suivante:"), Pha_Elements.br, Pha.text("\xe0 chaque moment durant la rotation de la roue, exactement une bille a sa couleur qui correspond avec la couleur de la roue."), Pha_Elements.br, Pha.text("Tu peux tester en faisant varier le nombre de couleurs de la roue mais \xe9galement en faisant varier le nombre de couleurs que tu utilises.") ];
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var outerWheel = Pha_Elements.div([ Pha.class_("roue-outer"), Pha.style("transform")("rotate(" + (Data_Show.show(Data_Show.showNumber)((360.0 * Data_Int.toNumber(Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_rotation"](Data_Lens_Internal_Forget.strongForget)))) / Data_Int.toNumber(size)) + "deg)")) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.svg([ Pha.key("svg"), Pha_Svg.viewBox(0)(0)(100)(100) ])(Lib_Util.map2(position)(Game_Roue_Model.aligned(state))(function (i) {
          return function (pos) {
              return function (align) {
                  return Pha_Svg.path(pizza(50.0)(50.0)(50.0)((2.0 * $$Math.pi * (Data_Int.toNumber(i) - 0.5)) / Data_Int.toNumber(size))((2.0 * $$Math.pi * (Data_Int.toNumber(i) + 0.5)) / Data_Int.toNumber(size)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("roue-wheel-part"), Pha_Svg.fill((function () {
                      var $6 = !align;
                      if ($6) {
                          return "#F0B27A";
                      };
                      var $7 = Game_Roue_Model["validRotation'"](state);
                      if ($7) {
                          return "lightgreen";
                      };
                      return "#F5B7B1";
                  })()) ])(UI_Template.dndItemProps(Game_Roue_Model.eqLoc)(Game_Roue_Model.withdnd)(Game_Roue_Model.roueGame)(state)({
                      currentDragged: Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)),
                      draggable: Data_Maybe.isJust(pos),
                      droppable: true,
                      id: new Game_Roue_Model.Wheel(i)
                  })));
              };
          };
      })) ])(Data_Array.catMaybes(Data_Array.mapWithIndex(function (index) {
          return function (c) {
              return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(c)(function (color) {
                  return Pha_Elements.div([ Pha.class_("roue-outer-piece"), Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha.style("left")(Pha_Util.pc(0.44 + 0.4 * $$Math.cos((Data_Int.toNumber(index) * 2.0 * $$Math.pi) / Data_Int.toNumber(size)))), Pha.style("top")(Pha_Util.pc(0.44 + 0.4 * $$Math.sin((Data_Int.toNumber(index) * 2.0 * $$Math.pi) / Data_Int.toNumber(size)))), Pha.style("background-color")(Data_Maybe.fromMaybe("")(Data_Array.index(colors)(color))) ])([  ]);
              });
          };
      })(position))));
      var drawButtons = Pha_Elements.div([ Pha.class_("roue-buttons") ])(Data_Array.concat([ [ Pha_Elements.button([ Pha.class_("ui-button ui-button-primary roue-button"), Pha_Attributes.disabled(Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Events.onclick(new Game_Roue_Model.Rotate(-1 | 0)) ])([ Pha.text("\u21b6") ]) ], Data_Array.mapWithIndex(function (i) {
          return function (color) {
              return Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("roue-select-color ui-flex-center"), Pha.style("background-color")(color) ])(UI_Template.dndItemProps(Game_Roue_Model.eqLoc)(Game_Roue_Model.withdnd)(Game_Roue_Model.roueGame)(state)({
                  currentDragged: Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)),
                  draggable: true,
                  droppable: false,
                  id: new Game_Roue_Model.Panel(i)
              })))([ Pha.when(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(i))(position))(function (v) {
                  return Pha_Elements.span([  ])([ Pha.text("\u2713") ]);
              }) ]);
          };
      })(Data_Array.take(size)(colors)), [ Pha_Elements.button([ Pha.class_("ui-button ui-button-primary roue-button"), Pha_Attributes.disabled(Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Events.onclick(new Game_Roue_Model.Rotate(1)) ])([ Pha.text("\u21b7") ]) ] ]));
      var draggedColor = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)))(function (d) {
          var colorIndex = (function () {
              if (d instanceof Game_Roue_Model.Panel) {
                  return d.value0;
              };
              if (d instanceof Game_Roue_Model.Wheel) {
                  return Data_Maybe.fromMaybe(-1 | 0)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(position)(d.value0)));
              };
              return -1 | 0;
          })();
          return Data_Array.index(colors)(colorIndex);
      });
      var config = UI_Template.card("Roue des couleurs")([ UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Nombre de couleurs")([ 4, 5, 6, 7, 8 ])(size)(Game_Roue_Model.SetSize.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")([ UI_Icons.ireset(Game_Roue_Model.withcore)(state), UI_Icons.irules(Game_Roue_Model.withcore)(state) ]) ]);
      var board = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.dndBoardProps(Game_Roue_Model.withcore)(Game_Roue_Model.withdnd))([ Pha.class_("roue-board") ]))([ drawButtons, Pha_Elements.div([ Pha.class_("roue-roue") ])([ outerWheel, innerWheel(size), Pha_Elements.button([ Pha.class_("ui-button ui-button-primary roue-validate"), Pha_Attributes.disabled(!valid || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Events.onclick(Game_Roue_Model.Check.value) ])([ Pha.text("Valider") ]), Pha_Elements.div([ Pha.class_("roue-valid-rotation") ])([ (function () {
          if (valid) {
              return Pha_Elements.span([ Pha.class_("valid") ])([ Pha.text("\u2713") ]);
          };
          return Pha_Elements.span([ Pha.class_("invalid") ])([ Pha.text("\u2717") ]);
      })() ]) ]), Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(draggedColor)) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Roue_Model.withcore)(Game_Roue_Model.roueGame)({
          config: config,
          board: board,
          rules: rules
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Roue"] = $PS["Game.Roue"] || {};
  var exports = $PS["Game.Roue"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Roue_Model = $PS["Game.Roue.Model"];
  var Game_Roue_View = $PS["Game.Roue.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Roue_Model.withcore)(Game_Core.Init.value)),
      view: Game_Roue_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Sansmot.Model"] = $PS["Game.Sansmot.Model"] || {};
  var exports = $PS["Game.Sansmot.Model"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var PythaPage = (function () {
      function PythaPage() {

      };
      PythaPage.value = new PythaPage();
      return PythaPage;
  })();
  var CarollPage = (function () {
      function CarollPage() {

      };
      CarollPage.value = new CarollPage();
      return CarollPage;
  })();
  var Step = (function () {
      function Step(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Step.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Step(value0, value1, value2);
              };
          };
      };
      return Step;
  })();
  var SetPage = (function () {
      function SetPage(value0) {
          this.value0 = value0;
      };
      SetPage.create = function (value0) {
          return new SetPage(value0);
      };
      return SetPage;
  })();
  var Animate = (function () {
      function Animate(value0) {
          this.value0 = value0;
      };
      Animate.create = function (value0) {
          return new Animate(value0);
      };
      return Animate;
  })();
  var pythaAnimation = [ new Step(500, "a", 1), new Step(200, "a", 2), new Step(600, "b", 1), new Step(200, "b", 2), new Step(600, "c", 1), new Step(200, "c", 2), new Step(600, "d", 1), new Step(200, "d", 2), new Step(600, "e", 1) ];
  var lockAction = function (act) {
      return Control_Monad.unlessM(Run.monadRun)(Data_Functor.mapFlipped(Run.functorRun)(Pha_Update.getState)(function (v) {
          return v.locked;
      }))(Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(function (v) {
          return {
              locked: true,
              anim: v.anim,
              page: v.page
          };
      }))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(act)(function () {
              return Pha_Update.setState(function (v) {
                  return {
                      locked: false,
                      anim: v.anim,
                      page: v.page
                  };
              });
          });
      }));
  };
  var istate = {
      anim: Data_Map_Internal.empty,
      locked: false,
      page: CarollPage.value
  };
  var carollAnimation = [ new Step(700, "a", 1), new Step(700, "b", 1), new Step(700, "c", 1), new Step(700, "d", 1), new Step(600, "e", 1) ];
  var _page = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.page;
      })(function (v) {
          return function (v1) {
              return {
                  page: v1,
                  anim: v.anim,
                  locked: v.locked
              };
          };
      })(dictStrong);
  };
  var _locked = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.locked;
      })(function (v) {
          return function (v1) {
              return {
                  locked: v1,
                  anim: v.anim,
                  page: v.page
              };
          };
      })(dictStrong);
  };
  var _anim = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.anim;
      })(function (v) {
          return function (v1) {
              return {
                  anim: v1,
                  locked: v.locked,
                  page: v.page
              };
          };
      })(dictStrong);
  };
  var update = function (v) {
      if (v instanceof SetPage) {
          return Pha_Update.purely(function (st) {
              var $18 = Data_Lens_Getter.viewOn(st)(_locked(Data_Lens_Internal_Forget.strongForget));
              if ($18) {
                  return st;
              };
              return Data_Lens_Setter.set(_anim(Data_Profunctor_Strong.strongFn))(Data_Map_Internal.empty)(Data_Lens_Setter.set(_page(Data_Profunctor_Strong.strongFn))(v.value0)(st));
          });
      };
      if (v instanceof Animate) {
          return lockAction(Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(Data_Lens_Setter.set(_anim(Data_Profunctor_Strong.strongFn))(Data_Map_Internal.empty)))(function () {
              return Data_Foldable.for_(Run.applicativeRun)(Data_Foldable.foldableArray)(v.value0)(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(v1.value0))(function () {
                      return Pha_Update.setState(Data_Lens_Setter.set((function () {
                          var $25 = _anim(Data_Profunctor_Strong.strongFn);
                          var $26 = Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(v1.value1)(Data_Profunctor_Strong.strongFn);
                          return function ($27) {
                              return $25($26($27));
                          };
                      })())(new Data_Maybe.Just(v1.value2)));
                  });
              });
          }));
      };
      throw new Error("Failed pattern match at Game.Sansmot.Model (line 65, column 1 - line 65, column 33): " + [ v.constructor.name ]);
  };
  exports["PythaPage"] = PythaPage;
  exports["CarollPage"] = CarollPage;
  exports["pythaAnimation"] = pythaAnimation;
  exports["carollAnimation"] = carollAnimation;
  exports["istate"] = istate;
  exports["SetPage"] = SetPage;
  exports["Animate"] = Animate;
  exports["update"] = update;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Sansmot.View"] = $PS["Game.Sansmot.View"] || {};
  var exports = $PS["Game.Sansmot.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Sansmot_Model = $PS["Game.Sansmot.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];                
  var line$prime = function (x1_) {
      return function (y1_) {
          return function (x2_) {
              return function (y2_) {
                  return function (props) {
                      return Pha_Svg.line(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.attr("x1")(Data_Show.show(Data_Show.showInt)(x1_)), Pha.attr("x2")(Data_Show.show(Data_Show.showInt)(x2_)), Pha.attr("y1")(Data_Show.show(Data_Show.showInt)(y1_)), Pha.attr("y2")(Data_Show.show(Data_Show.showInt)(y2_)) ])(props));
                  };
              };
          };
      };
  };
  var defaultStyle = [ Pha.style("transform")("translate(0px, 0px)") ];
  var compStyle = function (width) {
      return function (height) {
          return function (v) {
              return [ Pha.style("transform")(Pha_Util.translate(Pha_Util.pc(Data_Int.toNumber(v.translation.value0) / width))(Pha_Util.pc(Data_Int.toNumber(v.translation.value1) / height))), Pha.style("transition")("transform linear " + (Data_Show.show(Data_Show.showInt)(v.duration) + "ms")) ];
          };
      };
  };
  var pythaStyles = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("a", [ [ Pha_Svg.opacity("0") ], defaultStyle, compStyle(700.0)(300.0)({
      translation: new Data_Tuple.Tuple(400, -100 | 0),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("b", [ [ Pha_Svg.opacity("0") ], defaultStyle, compStyle(700.0)(300.0)({
      translation: new Data_Tuple.Tuple(600, 0),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("c", [ [ Pha_Svg.opacity("0") ], defaultStyle, compStyle(700.0)(300.0)({
      translation: new Data_Tuple.Tuple(400, 0),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("d", [ [ Pha_Svg.opacity("0") ], defaultStyle, compStyle(700.0)(300.0)({
      translation: new Data_Tuple.Tuple(300, 200),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("e", [ [ Pha_Svg.opacity("0") ], [  ] ]) ]);
  var carollStyles = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("a", [ defaultStyle, compStyle(1370.0)(270.0)({
      translation: new Data_Tuple.Tuple(300, 150),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("b", [ defaultStyle, compStyle(1370.0)(270.0)({
      translation: new Data_Tuple.Tuple(550, 50),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("c", [ defaultStyle, compStyle(1370.0)(270.0)({
      translation: new Data_Tuple.Tuple(700, 0),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("d", [ defaultStyle, compStyle(1370.0)(270.0)({
      translation: new Data_Tuple.Tuple(950, -100 | 0),
      rotation: 0,
      duration: 600
  }) ]), new Data_Tuple.Tuple("e", [ [ Pha_Svg.opacity("0") ], [  ] ]) ]);
  var animPytha = function (v) {
      var f = function (key) {
          var phase = Data_Maybe.fromMaybe(0)(Data_Lens_Getter.viewOn(v.anim)(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(key)(Data_Lens_Internal_Forget.strongForget)));
          return Data_Maybe.fromMaybe([  ])(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Lens_Getter.viewOn(pythaStyles)(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(key)(Data_Lens_Internal_Forget.strongForget)))(function (t) {
              return Data_Array.index(t)(phase);
          }));
      };
      return Pha_Svg.svg([ Pha.class_("sansmot-svg"), Pha_Svg.viewBox(0)(0)(700)(300), Pha.style("width")("84vmin"), Pha.style("height")("36vmin") ])([ Pha_Svg.path("M 0 300 h 300 v -300 h -300 Z L 100 100 M 0 100 h 300 l -200 -100 v 300")([ Pha_Svg.fill("transparent"), Pha_Svg.stroke("#000") ]), Pha_Svg.path("M 400 300 h 300 v -300 h -300 Z M 400 200 l 200 100 l 100 -200 l -200 -100 l -100 200")([ Pha_Svg.fill("transparent"), Pha_Svg.stroke("#000") ]), Pha_Svg.path("M 0 300 v -200 h 100 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("blue"), Pha_Svg.stroke("#000") ])(f("a"))), Pha_Svg.path("M 0 300 h 100 v -200 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("yellow"), Pha_Svg.stroke("#000") ])(f("b"))), Pha_Svg.path("M 100 0 h 200 v 100 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("#00FF00"), Pha_Svg.stroke("#000") ])(f("c"))), Pha_Svg.path("M 100 0 v 100 h 200 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("red"), Pha_Svg.stroke("#000") ])(f("d"))), Pha_Svg.path("M 0 300 v -200 h 100 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("blue"), Pha_Svg.stroke("#000") ])(f("e"))), Pha_Svg.path("M 0 300 h 100 v -200 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("yellow"), Pha_Svg.stroke("#000") ])(f("e"))), Pha_Svg.path("M 100 0 h 200 v 100 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("#00FF00"), Pha_Svg.stroke("#000") ])(f("e"))), Pha_Svg.path("M 100 0 v 100 h 200 0 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("red"), Pha_Svg.stroke("#000") ])(f("e"))), Pha_Svg["text'"]("a")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.x_("5"), Pha_Svg.y_("55"), Pha.style("font-size")("20") ])(f("e"))), Pha_Svg["text'"]("a")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.x_("46"), Pha_Svg.y_("12"), Pha.style("font-size")("20") ])(f("e"))), Pha_Svg["text'"]("b")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.x_("105"), Pha_Svg.y_("210"), Pha.style("font-size")("20") ])(f("e"))), Pha_Svg["text'"]("b")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.x_("198"), Pha_Svg.y_("120"), Pha.style("font-size")("20") ])(f("e"))), Pha_Svg["text'"]("c")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.x_("450"), Pha_Svg.y_("98"), Pha.style("font-size")("20") ])(f("e"))), Pha_Svg["text'"]("c")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.x_("595"), Pha_Svg.y_("80"), Pha.style("font-size")("20") ])(f("e"))) ]);
  };
  var animCaroll = function (v) {
      var f = function (key) {
          var phase = Data_Maybe.fromMaybe(0)(Data_Lens_Getter.viewOn(v.anim)(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(key)(Data_Lens_Internal_Forget.strongForget)));
          return Data_Maybe.fromMaybe([  ])(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Lens_Getter.viewOn(carollStyles)(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(key)(Data_Lens_Internal_Forget.strongForget)))(function (t) {
              return Data_Array.index(t)(phase);
          }));
      };
      return Pha_Svg.svg([ Pha.class_("sansmot-svg"), Pha_Svg.viewBox(-10 | 0)(-10 | 0)(1370)(270), Pha_Svg.width("90vw"), Pha_Svg.height("19vw") ])(Data_Array.concat([ [ Pha_Svg.path("M 400 100 h 250 v -100 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("orange") ])(f("a"))), Pha_Svg.path("M 400 200 h 150 v -50 h 100 v -50 h -250 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("red") ])(f("b"))), Pha_Svg.path("M 400 250 h 250 v -100 h -100 v 50 h -150 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("blue") ])(f("c"))), Pha_Svg.path("M 0 250 h 400 v -150 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("green") ])(f("d"))), Pha_Svg.path("M 400 100 h 250 v -100 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("orange") ])(f("e"))), Pha_Svg.path("M 400 200 h 150 v -50 h 100 v -50 h -250 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("red") ])(f("e"))), Pha_Svg.path("M 400 250 h 250 v -100 h -100 v 50 h -150 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("blue") ])(f("e"))), Pha_Svg.path("M 0 250 h 400 v -150 Z")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.fill("green") ])(f("e"))) ], Lib_Util.repeat(28)(function (i) {
          return line$prime(50 * i | 0)(-10 | 0)(50 * i | 0)(260)([ Pha.class_("sansmot-grid") ]);
      }), Lib_Util.repeat(6)(function (i) {
          return line$prime(-10 | 0)(50 * i | 0)(1360)(50 * i | 0)([ Pha.class_("sansmot-grid") ]);
      }) ]));
  };
  var view = function (state) {
      var main = function (v) {
          if (v instanceof Game_Sansmot_Model.PythaPage) {
              return Pha_Elements.div([ Pha.key("pytha") ])([ Pha_Elements.h1([ Pha.class_("sansmot-title") ])([ Pha.text("Preuve sans mot") ]), Pha_Elements.h2([ Pha.class_("sansmot-h2") ])([ Pha.text("Que raconte le th\xe9or\xe8me de Pythagore ?") ]), Pha_Elements.p([ Pha.class_("sansmot-center") ])([ Pha_Svg.svg([ Pha.class_("sansmot-svg"), Pha_Svg.viewBox(0)(-100 | 0)(200)(250), Pha_Svg.width("20vmin"), Pha_Svg.height("25vmin") ])([ Pha_Svg.path("M 50 50 h 100 v 100 h -100 Z")([ Pha_Svg.fill("yellow"), Pha_Svg.stroke("black") ]), Pha_Svg.path("M 0 0 h 50 v 50 h -50 Z")([ Pha_Svg.fill("yellow"), Pha_Svg.stroke("black") ]), Pha_Svg.path("M 50 0 l 100 50 l 50 -100 l -100 -50 Z")([ Pha_Svg.fill("#00ff00"), Pha_Svg.stroke("black") ]), Pha_Svg["text'"]("a\xb2")([ Pha_Svg.x_("90"), Pha_Svg.y_("105"), Pha.attr("font-size")("35") ]), Pha_Svg["text'"]("b\xb2")([ Pha_Svg.x_("18"), Pha_Svg.y_("35"), Pha.attr("font-size")("35") ]), Pha_Svg["text'"]("c\xb2")([ Pha_Svg.x_("110"), Pha_Svg.y_("-10"), Pha.attr("font-size")("35") ]) ]) ]), Pha_Elements.h2([ Pha.class_("sansmot-h2") ])([ Pha.text("Preuve sans mot due \xe0 un auteur chinois inconnu qui vivait vers 200 avant J.-C.") ]), Pha_Elements.p([ Pha.class_("sansmot-center") ])([ animPytha(state) ]), Pha_Elements.p([ Pha.class_("sansmot-center sansmot-link"), Pha_Events.onclick(new Game_Sansmot_Model.Animate(Game_Sansmot_Model.pythaAnimation)) ])([ Pha.text("Lancer l'animation") ]) ]);
          };
          if (v instanceof Game_Sansmot_Model.CarollPage) {
              return Pha_Elements.div([ Pha.key("caroll") ])([ Pha_Elements.h1([ Pha.class_("sansmot-title") ])([ Pha.text("Preuve sans mot") ]), Pha_Elements.h2([ Pha.class_("sansmot-h2") ])([ Pha.text("O\xf9 est pass\xe9 le carr\xe9 manquant ?") ]), Pha_Elements.p([ Pha.class_("sansmot-center") ])([ animCaroll(state) ]), Pha_Elements.p([ Pha.class_("sansmot-center sansmot-link"), Pha_Events.onclick(new Game_Sansmot_Model.Animate(Game_Sansmot_Model.carollAnimation)) ])([ Pha.text("Lancer l'animation") ]) ]);
          };
          throw new Error("Failed pattern match at Game.Sansmot.View (line 105, column 5 - line 126, column 6): " + [ v.constructor.name ]);
      };
      return Pha_Elements.div([ Pha.class_("sansmot-main") ])([ Pha_Elements.div([ Pha.class_("sansmot-menu") ])([ Pha_Elements.div([ Pha.class_("sansmot-pagelink"), Pha_Events.onclick(new Game_Sansmot_Model.SetPage(Game_Sansmot_Model.PythaPage.value)) ])([ Pha.text("1") ]), Pha_Elements.div([ Pha.class_("sansmot-pagelink"), Pha_Events.onclick(new Game_Sansmot_Model.SetPage(Game_Sansmot_Model.CarollPage.value)) ])([ Pha.text("2") ]) ]), main(state.page) ]);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Sansmot"] = $PS["Game.Sansmot"] || {};
  var exports = $PS["Game.Sansmot"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Sansmot_View = $PS["Game.Sansmot.View"];                
  var game = {
      init: Data_Maybe.Nothing.value,
      view: Game_Sansmot_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Solitaire.Model"] = $PS["Game.Solitaire.Model"] || {};
  var exports = $PS["Game.Solitaire.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var MyPrelude = $PS["MyPrelude"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];                
  var FrenchBoard = (function () {
      function FrenchBoard() {

      };
      FrenchBoard.value = new FrenchBoard();
      return FrenchBoard;
  })();
  var EnglishBoard = (function () {
      function EnglishBoard() {

      };
      EnglishBoard.value = new EnglishBoard();
      return EnglishBoard;
  })();
  var CircleBoard = (function () {
      function CircleBoard() {

      };
      CircleBoard.value = new CircleBoard();
      return CircleBoard;
  })();
  var Grid3Board = (function () {
      function Grid3Board() {

      };
      Grid3Board.value = new Grid3Board();
      return Grid3Board;
  })();
  var RandomBoard = (function () {
      function RandomBoard() {

      };
      RandomBoard.value = new RandomBoard();
      return RandomBoard;
  })();
  var Ext = function (x) {
      return x;
  };
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var DnD = (function () {
      function DnD(value0) {
          this.value0 = value0;
      };
      DnD.create = function (value0) {
          return new DnD(value0);
      };
      return DnD;
  })();
  var SetBoard = (function () {
      function SetBoard(value0) {
          this.value0 = value0;
      };
      SetBoard.create = function (value0) {
          return new SetBoard(value0);
      };
      return SetBoard;
  })();
  var withdnd = new Game_Core.MsgWithDnd(DnD.create);
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var showMode = new Data_Show.Show(function (v) {
      if (v instanceof FrenchBoard) {
          return "french";
      };
      if (v instanceof EnglishBoard) {
          return "english";
      };
      if (v instanceof CircleBoard) {
          return "circle";
      };
      if (v instanceof Grid3Board) {
          return "grid3";
      };
      if (v instanceof RandomBoard) {
          return "random";
      };
      throw new Error("Failed pattern match at Game.Solitaire.Model (line 19, column 1 - line 24, column 32): " + [ v.constructor.name ]);
  });
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 5,
          nbColumns: 1,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      board: CircleBoard.value,
      holes: [  ],
      dragged: Data_Maybe.Nothing.value,
      help: 0
  });
  var generateBoard = function (rows) {
      return function (columns) {
          return function (startingHole) {
              return function (holeFilter) {
                  var holes = Lib_Util.repeat2(rows)(columns)(holeFilter);
                  var position = Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(startingHole)(Data_Lens_Internal_Wander.wanderFunction))(false)(holes));
                  return {
                      holes: holes,
                      position: position,
                      customSize: false
                  };
              };
          };
      };
  };
  var boardMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof FrenchBoard && y instanceof FrenchBoard) {
              return true;
          };
          if (x instanceof EnglishBoard && y instanceof EnglishBoard) {
              return true;
          };
          if (x instanceof CircleBoard && y instanceof CircleBoard) {
              return true;
          };
          if (x instanceof Grid3Board && y instanceof Grid3Board) {
              return true;
          };
          if (x instanceof RandomBoard && y instanceof RandomBoard) {
              return true;
          };
          return false;
      };
  });
  var betweenMove = function (state) {
      return function (v) {
          var v1 = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v.from)(v.to);
          var $44 = ((v1.row * v1.row | 0) + (v1.col * v1.col | 0) | 0) === 4;
          if ($44) {
              return Data_Maybe.Just.create(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v.from + v.to | 0)(2));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var betweenInCircle = function (from) {
      return function (to) {
          return function (size) {
              var $49 = (from - to | 0) === 2 || (to - from | 0) === 2;
              if ($49) {
                  return Data_Maybe.Just.create(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(from + to | 0)(2));
              };
              var $50 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(to - from | 0)(size) === 2;
              if ($50) {
                  return Data_Maybe.Just.create(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(from + 1 | 0)(size));
              };
              var $51 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(from - to | 0)(size) === 2;
              if ($51) {
                  return Data_Maybe.Just.create(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(to + 1 | 0)(size));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var _ext$prime = function (dictStrong) {
      var $76 = Game_Core["_ext"](dictStrong);
      var $77 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($78) {
          return $76($77($78));
      };
  };
  var _help = function (dictStrong) {
      var $79 = _ext$prime(dictStrong);
      var $80 = Data_Lens_Lens.lens(function (v) {
          return v.help;
      })(function (v) {
          return function (v1) {
              return {
                  help: v1,
                  board: v.board,
                  dragged: v.dragged,
                  holes: v.holes
              };
          };
      })(dictStrong);
      return function ($81) {
          return $79($80($81));
      };
  };
  var _holes = function (dictStrong) {
      var $82 = _ext$prime(dictStrong);
      var $83 = Data_Lens_Lens.lens(function (v) {
          return v.holes;
      })(function (v) {
          return function (v1) {
              return {
                  holes: v1,
                  board: v.board,
                  dragged: v.dragged,
                  help: v.help
              };
          };
      })(dictStrong);
      return function ($84) {
          return $82($83($84));
      };
  };
  var _dragged = function (dictStrong) {
      var $85 = _ext$prime(dictStrong);
      var $86 = Data_Lens_Lens.lens(function (v) {
          return v.dragged;
      })(function (v) {
          return function (v1) {
              return {
                  dragged: v1,
                  board: v.board,
                  help: v.help,
                  holes: v.holes
              };
          };
      })(dictStrong);
      return function ($87) {
          return $85($86($87));
      };
  };
  var _board = function (dictStrong) {
      var $88 = _ext$prime(dictStrong);
      var $89 = Data_Lens_Lens.lens(function (v) {
          return v.board;
      })(function (v) {
          return function (v1) {
              return {
                  board: v1,
                  dragged: v.dragged,
                  help: v.help,
                  holes: v.holes
              };
          };
      })(dictStrong);
      return function ($90) {
          return $88($89($90));
      };
  };
  var betweenMove2 = function (state) {
      return function (v) {
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var $55 = Data_Eq.eq(boardMode)(Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget)))(CircleBoard.value);
          if ($55) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(betweenInCircle(v.from)(v.to)(rows))(function (x) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((function () {
                      var $56 = rows === 4 && Data_Maybe.maybe(false)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(x));
                      if ($56) {
                          return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(x + 2 | 0)(4);
                      };
                      return x;
                  })());
              });
          };
          return betweenMove(state)(v);
      };
  };
  var scoregame = new Game_Core.ScoreGame(function () {
      return solitaireGame;
  }, function (state) {
      return Data_Eq.eq(boardMode)(Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget)))(RandomBoard.value);
  }, function (v) {
      return Game_Core.Minimize.value;
  }, (function () {
      var $91 = Data_Array.filter(Control_Category.identity(Control_Category.categoryFn));
      var $92 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($93) {
          return Data_Array.length($91($92($93)));
      };
  })(), function (state) {
      return Data_String_Common.joinWith("-")([ Data_Show.show(showMode)(Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget))), Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))), Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget))) ]);
  });
  var solitaireGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, (function () {
      var $94 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
      var $95 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($96) {
          return $94($95($96));
      };
  })(), function (state) {
      return Data_FoldableWithIndex.allWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (i) {
          return function (val) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (d) {
                  return Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Game_Core.canPlay(solitaireGame))(state)({
                      from: i,
                      to: i + d | 0
                  });
              })([ 2, -2 | 0, 2 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0, (-2 | 0) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0, Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) - 2 | 0 ]);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var v = (function () {
          var v1 = Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget));
          if (v1 instanceof EnglishBoard) {
              return generateBoard(7)(7)(24)(function (row) {
                  return function (col) {
                      return Data_Ord.min(Data_Ord.ordInt)(row)(6 - row | 0) >= 2 || Data_Ord.min(Data_Ord.ordInt)(col)(6 - col | 0) >= 2;
                  };
              });
          };
          if (v1 instanceof FrenchBoard) {
              return generateBoard(7)(7)(24)(function (row) {
                  return function (col) {
                      return (Data_Ord.min(Data_Ord.ordInt)(row)(6 - row | 0) + Data_Ord.min(Data_Ord.ordInt)(col)(6 - col | 0) | 0) >= 2;
                  };
              });
          };
          if (v1 instanceof CircleBoard) {
              return {
                  holes: Data_Array.replicate(rows)(true),
                  position: Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(Pha_Random["int'"](rows))(function (x) {
                      return Lib_Util.repeat(rows)(function (v2) {
                          return v2 !== x;
                      });
                  }),
                  customSize: true
              };
          };
          if (v1 instanceof Grid3Board) {
              return {
                  holes: Data_Array.replicate(3 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(true),
                  position: Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Lib_Util.repeat(3 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(function (v2) {
                      return v2 < (2 * columns | 0);
                  })),
                  customSize: true
              };
          };
          if (v1 instanceof RandomBoard) {
              return {
                  holes: Data_Array.replicate(3 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(true),
                  position: Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(MyPrelude.replicateA(Control_Monad_Free.freeApplicative)(columns)(Pha_Random.bool))(function (bools) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(bools)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(columns)(true))(Data_Functor.mapFlipped(Data_Functor.functorArray)(bools)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))));
                  }),
                  customSize: true
              };
          };
          throw new Error("Failed pattern match at Game.Solitaire.Model (line 110, column 13 - line 128, column 22): " + [ v1.constructor.name ]);
      })();
      return Data_Functor.mapFlipped(Control_Monad_Free.freeFunctor)(v.position)(function (p) {
          return Data_Lens_Setter.set(Game_Core["_customSize"](Data_Profunctor_Strong.strongFn))(v.customSize)(Data_Lens_Setter.set(Game_Core["_position"](Data_Profunctor_Strong.strongFn))(p)(Data_Lens_Setter.set(_holes(Data_Profunctor_Strong.strongFn))(v.holes)(state)));
      });
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          return Control_Bind.bind(Data_Maybe.bindMaybe)(betweenMove2(state)(v))(function (between) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v.from))(function (pfrom) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(between))(function (pbetween) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v.to))(function (pto) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(Data_Lens_Getter.viewOn(state)(_holes(Data_Lens_Internal_Forget.strongForget)))(v.to))(function (hto) {
                              var $66 = pfrom && (pbetween && (hto && !pto));
                              if ($66) {
                                  return Data_Maybe.Just.create(Data_Array.updateAtIndices(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(v.from, false), new Data_Tuple.Tuple(between, false), new Data_Tuple.Tuple(v.to, true) ])(position));
                              };
                              return Data_Maybe.Nothing.value;
                          });
                      });
                  });
              });
          });
      };
  }, function (state) {
      var v = Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof CircleBoard) {
          return new Game_Core.SizeLimit(3, 1, 12, 1);
      };
      if (v instanceof Grid3Board) {
          return new Game_Core.SizeLimit(3, 1, 3, 9);
      };
      if (v instanceof RandomBoard) {
          return new Game_Core.SizeLimit(3, 1, 3, 9);
      };
      return new Game_Core.SizeLimit(7, 7, 7, 7);
  }, Game_Core["updateScore'"](scoregame)(Game_Core.AlwaysShowWin.value));
  var update = function (v) {
      if (v instanceof Core && v.value0 instanceof Game_Core.ToggleHelp) {
          return Pha_Update.purely(Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))(function (x) {
              return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(x + 1 | 0)(3);
          }));
      };
      if (v instanceof Core) {
          return Game_Core.coreUpdate(solitaireGame)(v.value0);
      };
      if (v instanceof DnD) {
          return Game_Core.dndUpdate(Data_Eq.eqInt)(solitaireGame)(function (dictStrong) {
              return _dragged(dictStrong);
          })(v.value0);
      };
      if (v instanceof SetBoard) {
          return Game_Core.newGame(solitaireGame)(function (state) {
              var st2 = Data_Lens_Setter.set(_board(Data_Profunctor_Strong.strongFn))(v.value0)(state);
              if (v.value0 instanceof CircleBoard) {
                  return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(1)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(6)(st2));
              };
              if (v.value0 instanceof Grid3Board) {
                  return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(5)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(3)(st2));
              };
              if (v.value0 instanceof RandomBoard) {
                  return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(5)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(3)(st2));
              };
              return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(7)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(7)(st2));
          });
      };
      throw new Error("Failed pattern match at Game.Solitaire.Model (line 150, column 1 - line 150, column 33): " + [ v.constructor.name ]);
  };
  exports["FrenchBoard"] = FrenchBoard;
  exports["EnglishBoard"] = EnglishBoard;
  exports["CircleBoard"] = CircleBoard;
  exports["Grid3Board"] = Grid3Board;
  exports["RandomBoard"] = RandomBoard;
  exports["istate"] = istate;
  exports["_board"] = _board;
  exports["_holes"] = _holes;
  exports["_dragged"] = _dragged;
  exports["_help"] = _help;
  exports["SetBoard"] = SetBoard;
  exports["update"] = update;
  exports["boardMode"] = boardMode;
  exports["solitaireGame"] = solitaireGame;
  exports["scoregame"] = scoregame;
  exports["withcore"] = withcore;
  exports["withdnd"] = withdnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Solitaire.View"] = $PS["Game.Solitaire.View"] || {};
  var exports = $PS["Game.Solitaire.View"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Solitaire_Model = $PS["Game.Solitaire.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var tricolor = function (i) {
      return function (columns) {
          return function (help) {
              var v = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(columns) + (help * Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(columns) | 0) | 0)(3);
              if (v === 0) {
                  return "red";
              };
              if (v === 1) {
                  return "blue";
              };
              return "green";
          };
      };
  };
  var cursor = function (pp) {
      return function (v) {
          return Pha_Svg.circle(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.r("20"), Pha.class_("solitaire-cursor") ])(UI_Template.svgCursorStyle(pp)));
      };
  };
  var view = function (state) {
      var rules = [ Pha.text("Jeu du solitaire"), Pha_Elements.br, Pha.text("blah blah") ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var nbPegs = Game_Core.scoreFn(Game_Solitaire_Model.scoregame)(state);
      var s = (function () {
          var $18 = nbPegs > 1;
          if ($18) {
              return "s";
          };
          return "";
      })();
      var winTitle = Data_Show.show(Data_Show.showInt)(nbPegs) + (" jeton" + (s + (" restant" + s)));
      var isCircleBoard = Data_Eq.eq(Game_Solitaire_Model.boardMode)(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_board"](Data_Lens_Internal_Forget.strongForget)))(Game_Solitaire_Model.CircleBoard.value);
      var config = (function () {
          var boards = [ Game_Solitaire_Model.CircleBoard.value, Game_Solitaire_Model.Grid3Board.value, Game_Solitaire_Model.RandomBoard.value, Game_Solitaire_Model.EnglishBoard.value, Game_Solitaire_Model.FrenchBoard.value ];
          return UI_Template.card("Jeu du solitaire")([ UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Solitaire_Model.boardMode)(state)("Plateau")(boards)(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_board"](Data_Lens_Internal_Forget.strongForget)))(Game_Solitaire_Model.SetBoard.create)(function (i) {
              return function (opt) {
                  if (i instanceof Game_Solitaire_Model.CircleBoard) {
                      return {
                          icon: new UI_Icon.IconSymbol("#circle"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Cercle"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (i instanceof Game_Solitaire_Model.Grid3Board) {
                      return {
                          icon: new UI_Icon.IconText("3xN"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("3xN"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (i instanceof Game_Solitaire_Model.RandomBoard) {
                      return {
                          icon: new UI_Icon.IconSymbol("#shuffle"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Al\xe9atoire"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (i instanceof Game_Solitaire_Model.EnglishBoard) {
                      return {
                          icon: new UI_Icon.IconSymbol("#tea"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Anglais"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (i instanceof Game_Solitaire_Model.FrenchBoard) {
                      return {
                          icon: new UI_Icon.IconSymbol("#bread"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Fran\xe7ais"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  throw new Error("Failed pattern match at Game.Solitaire.View (line 45, column 86 - line 50, column 90): " + [ i.constructor.name ]);
              };
          }), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp(Game_Solitaire_Model.withcore), UI_Icons.iundo(Game_Solitaire_Model.withcore), UI_Icons.iredo(Game_Solitaire_Model.withcore), UI_Icons.ireset(Game_Solitaire_Model.withcore), UI_Icons.irules(Game_Solitaire_Model.withcore) ])(function (x) {
              return x(state);
          })), UI_Icons.iconBestScore(Game_Solitaire_Model.withcore)(Game_Solitaire_Model.scoregame)(state) ]);
      })();
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var itemStyle = function (i) {
          var v = Lib_Util.coords(columns)(i);
          if (isCircleBoard) {
              return Pha_Util.translate(Pha_Util.px(125.0 + $$Math.sin((2.0 * $$Math.pi * Data_Int.toNumber(i)) / Data_Int.toNumber(rows)) * 90.0))(Pha_Util.px(125.0 + $$Math.cos((2.0 * $$Math.pi * Data_Int.toNumber(i)) / Data_Int.toNumber(rows)) * 90.0));
          };
          return Pha_Util.translate(Pha_Util.px(50.0 * Data_Int.toNumber(v.col) + 25.0))(Pha_Util.px(50.0 * Data_Int.toNumber(v.row) + 25.0));
      };
      var drawHole = function (i) {
          return [ Pha.when(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_help"](Data_Lens_Internal_Forget.strongForget)) > 0 && !isCircleBoard)(function (v) {
              return Pha_Svg.rect([ Pha_Svg.x_("-25"), Pha_Svg.y_("-25"), Pha_Svg.width("50"), Pha_Svg.height("50"), Pha.key("rect" + Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.fill(tricolor(i)(columns)(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_help"](Data_Lens_Internal_Forget.strongForget)))), Pha.style("transform")(itemStyle(i)) ]);
          }), Pha_Svg.circle(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.key("h" + Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.r("17"), Pha.class_("solitaire-hole"), Pha.style("transform")(itemStyle(i)) ])(UI_Template.dndItemProps(Data_Eq.eqInt)(Game_Solitaire_Model.withdnd)(Game_Solitaire_Model.solitaireGame)(state)({
              currentDragged: Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)),
              draggable: false,
              droppable: true,
              id: i
          }))) ];
      };
      var drawPeg = function (i) {
          return Pha_Svg.circle(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.r("20"), Pha.key("p" + Data_Show.show(Data_Show.showInt)(i)), Pha.class_("solitaire-peg"), Pha.style("transform")(itemStyle(i)) ])(UI_Template.dndItemProps(Data_Eq.eqInt)(Game_Solitaire_Model.withdnd)(Game_Solitaire_Model.solitaireGame)(state)({
              draggable: true,
              droppable: false,
              currentDragged: Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)),
              id: i
          })));
      };
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-board") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.dndBoardProps(Game_Solitaire_Model.withcore)(Game_Solitaire_Model.withdnd))((function () {
          if (isCircleBoard) {
              return [ Pha.style("width")("100%"), Pha.style("height")("100%") ];
          };
          return UI_Template.gridStyle(rows)(columns)(5);
      })())))([ Pha_Svg.svg([ (function () {
          if (isCircleBoard) {
              return Pha_Svg.viewBox(0)(0)(250)(250);
          };
          return Pha_Svg.viewBox(0)(0)(50 * columns | 0)(50 * rows | 0);
      })() ])(Data_Array.concat([ [ Pha.when(isCircleBoard)(function (v) {
          return Pha_Svg.circle([ Pha_Svg.cx("125"), Pha_Svg.cy("125"), Pha_Svg.r("90"), Pha.class_("solitaire-circle") ]);
      }) ], Data_Array.concat(Data_Array.mapWithIndex(function (i) {
          return function (hasHole) {
              if (hasHole) {
                  return drawHole(i);
              };
              return [  ];
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_holes"](Data_Lens_Internal_Forget.strongForget)))), Data_Array.mapWithIndex(function (i) {
          return function (hasPeg) {
              return Pha.when(hasPeg)(function (v) {
                  return drawPeg(i);
              });
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))), [ Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)))) ] ])) ]);
      var scoreDialog = function (v) {
          return UI_Template.bestScoreDialog(Game_Solitaire_Model.withcore)(Game_Solitaire_Model.scoregame)(state)(function (position) {
              return [ Pha_Elements.div([ Pha.class_("ui-flex-center solitaire-scoredialog") ])([ Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-board") ])((function () {
                  if (isCircleBoard) {
                      return [ Pha.style("width")("100%"), Pha.style("height")("100%") ];
                  };
                  return UI_Template.gridStyle(rows)(columns)(5);
              })()))([ Pha_Svg.svg([ (function () {
                  if (isCircleBoard) {
                      return Pha_Svg.viewBox(0)(0)(250)(250);
                  };
                  return Pha_Svg.viewBox(0)(0)(50 * columns | 0)(50 * rows | 0);
              })() ])(Data_Array.concat([ [ Pha.when(isCircleBoard)(function (v1) {
                  return Pha_Svg.circle([ Pha_Svg.cx("125"), Pha_Svg.cy("125"), Pha_Svg.r("90"), Pha.class_("solitaire-circle") ]);
              }) ], Data_Array.mapWithIndex(function (i) {
                  return function (v1) {
                      return Pha.when(v1)(function (v2) {
                          return Pha_Svg.circle([ Pha.key("h" + Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.r("17"), Pha.class_("solitaire-hole"), Pha.style("transform")(itemStyle(i)) ]);
                      });
                  };
              })(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_holes"](Data_Lens_Internal_Forget.strongForget))), Data_Array.mapWithIndex(function (i) {
                  return function (v1) {
                      return Pha.when(v1)(function (v2) {
                          return Pha_Svg.circle([ Pha.key("p" + Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.r("20"), Pha.class_("solitaire-peg"), Pha.style("transform")(itemStyle(i)) ]);
                      });
                  };
              })(position) ])) ]) ]) ];
          });
      };
      var board = UI_Template.incDecGrid(Game_Solitaire_Model.withcore)(Game_Solitaire_Model.solitaireGame)(state)([ grid ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Solitaire_Model.withcore)(Game_Solitaire_Model.solitaireGame)({
          config: config,
          board: board,
          rules: rules,
          winTitle: winTitle,
          scoreDialog: scoreDialog
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Solitaire"] = $PS["Game.Solitaire"] || {};
  var exports = $PS["Game.Solitaire"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Solitaire_Model = $PS["Game.Solitaire.Model"];
  var Game_Solitaire_View = $PS["Game.Solitaire.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Solitaire_Model.withcore)(Game_Core.Init.value)),
      view: Game_Solitaire_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Tiling.Model"] = $PS["Game.Tiling.Model"] || {};
  var exports = $PS["Game.Tiling.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Common = $PS["Game.Common"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Update = $PS["Pha.Update"];                
  var Type1 = (function () {
      function Type1() {

      };
      Type1.value = new Type1();
      return Type1;
  })();
  var Type2 = (function () {
      function Type2() {

      };
      Type2.value = new Type2();
      return Type2;
  })();
  var Type3 = (function () {
      function Type3() {

      };
      Type3.value = new Type3();
      return Type3;
  })();
  var CustomTile = (function () {
      function CustomTile() {

      };
      CustomTile.value = new CustomTile();
      return CustomTile;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var PutSink = (function () {
      function PutSink(value0) {
          this.value0 = value0;
      };
      PutSink.create = function (value0) {
          return new PutSink(value0);
      };
      return PutSink;
  })();
  var SetNbSinks = (function () {
      function SetNbSinks(value0) {
          this.value0 = value0;
      };
      SetNbSinks.create = function (value0) {
          return new SetNbSinks(value0);
      };
      return SetNbSinks;
  })();
  var SetTile = (function () {
      function SetTile(value0) {
          this.value0 = value0;
      };
      SetTile.create = function (value0) {
          return new SetTile(value0);
      };
      return SetTile;
  })();
  var Rotate = (function () {
      function Rotate() {

      };
      Rotate.value = new Rotate();
      return Rotate;
  })();
  var SetHoverSquare = (function () {
      function SetHoverSquare(value0) {
          this.value0 = value0;
      };
      SetHoverSquare.create = function (value0) {
          return new SetHoverSquare(value0);
      };
      return SetHoverSquare;
  })();
  var FlipTile = (function () {
      function FlipTile(value0) {
          this.value0 = value0;
      };
      FlipTile.create = function (value0) {
          return new FlipTile(value0);
      };
      return FlipTile;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var translate = function (v) {
      return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return {
              row: v1.row + v.row | 0,
              col: v1.col + v.col | 0
          };
      });
  };
  var sinks = function (state) {
      return Data_Array.catMaybes(Data_Array.mapWithIndex(function (i) {
          return function (v) {
              var $45 = v === (-1 | 0);
              if ($45) {
                  return new Data_Maybe.Just(i);
              };
              return Data_Maybe.Nothing.value;
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  };
  var showTileType = new Data_Show.Show(function (v) {
      if (v instanceof Type1) {
          return "beast1";
      };
      if (v instanceof Type2) {
          return "beast2";
      };
      if (v instanceof Type3) {
          return "beast3";
      };
      if (v instanceof CustomTile) {
          return "customize";
      };
      throw new Error("Failed pattern match at Game.Tiling.Model (line 17, column 1 - line 21, column 34): " + [ v.constructor.name ]);
  });
  var rotate90 = Data_Functor.map(Data_Functor.functorArray)(function (v) {
      return {
          row: v.col,
          col: -v.row | 0
      };
  });
  var rotate = function ($copy_v) {
      return function ($copy_t) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, t) {
              if (v === 0) {
                  $tco_done = true;
                  return t;
              };
              $tco_var_v = v - 1 | 0;
              $copy_t = rotate90(t);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_t);
          };
          return $tco_result;
      };
  };
  var onKeyDown = function (v) {
      if (v === " ") {
          return new Data_Maybe.Just(Rotate.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 5,
          nbColumns: 5,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      rotation: 0,
      tileType: Type1.value,
      tile: [  ],
      nbSinks: 0,
      hoverSquare: Data_Maybe.Nothing.value
  });
  var eqTileType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Type1 && y instanceof Type1) {
              return true;
          };
          if (x instanceof Type2 && y instanceof Type2) {
              return true;
          };
          if (x instanceof Type3 && y instanceof Type3) {
              return true;
          };
          if (x instanceof CustomTile && y instanceof CustomTile) {
              return true;
          };
          return false;
      };
  });
  var canPutTile = function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (index) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(index))(new Data_Maybe.Just(0));
      });
  };
  var _ext$prime = function (dictStrong) {
      var $75 = Game_Core["_ext"](dictStrong);
      var $76 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($77) {
          return $75($76($77));
      };
  };
  var _hoverSquare = function (dictStrong) {
      var $78 = _ext$prime(dictStrong);
      var $79 = Data_Lens_Lens.lens(function (v) {
          return v.hoverSquare;
      })(function (v) {
          return function (v1) {
              return {
                  hoverSquare: v1,
                  nbSinks: v.nbSinks,
                  rotation: v.rotation,
                  tile: v.tile,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($80) {
          return $78($79($80));
      };
  };
  var _nbSinks = function (dictStrong) {
      var $81 = _ext$prime(dictStrong);
      var $82 = Data_Lens_Lens.lens(function (v) {
          return v.nbSinks;
      })(function (v) {
          return function (v1) {
              return {
                  nbSinks: v1,
                  hoverSquare: v.hoverSquare,
                  rotation: v.rotation,
                  tile: v.tile,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($83) {
          return $81($82($83));
      };
  };
  var needSinks = function (state) {
      return Data_Array.length(sinks(state)) < Data_Lens_Getter.viewOn(state)(_nbSinks(Data_Lens_Internal_Forget.strongForget));
  };
  var _rotation = function (dictStrong) {
      var $84 = _ext$prime(dictStrong);
      var $85 = Data_Lens_Lens.lens(function (v) {
          return v.rotation;
      })(function (v) {
          return function (v1) {
              return {
                  rotation: v1,
                  hoverSquare: v.hoverSquare,
                  nbSinks: v.nbSinks,
                  tile: v.tile,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($86) {
          return $84($85($86));
      };
  };
  var _tile = function (dictStrong) {
      var $87 = _ext$prime(dictStrong);
      var $88 = Data_Lens_Lens.lens(function (v) {
          return v.tile;
      })(function (v) {
          return function (v1) {
              return {
                  tile: v1,
                  hoverSquare: v.hoverSquare,
                  nbSinks: v.nbSinks,
                  rotation: v.rotation,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($89) {
          return $87($88($89));
      };
  };
  var tilePositions = function (state) {
      return function (index) {
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(translate(Lib_Util.coords(columns)(index))(rotate(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_Lens_Getter.viewOn(state)(_rotation(Data_Lens_Internal_Forget.strongForget)))(4))(Data_Lens_Getter.viewOn(state)(_tile(Data_Lens_Internal_Forget.strongForget)))))(function (v) {
              var $57 = 0 <= v.col && v.col < columns;
              if ($57) {
                  return (v.row * columns | 0) + v.col | 0;
              };
              return -1 | 0;
          });
      };
  };
  var _tileType = function (dictStrong) {
      var $90 = _ext$prime(dictStrong);
      var $91 = Data_Lens_Lens.lens(function (v) {
          return v.tileType;
      })(function (v) {
          return function (v1) {
              return {
                  tileType: v1,
                  hoverSquare: v.hoverSquare,
                  nbSinks: v.nbSinks,
                  rotation: v.rotation,
                  tile: v.tile
              };
          };
      })(dictStrong);
      return function ($92) {
          return $90($91($92));
      };
  };
  var getTile = function (state) {
      var v = Data_Lens_Getter.viewOn(state)(_tileType(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof Type1) {
          return [ {
              row: 0,
              col: 0
          }, {
              row: 0,
              col: 1
          } ];
      };
      if (v instanceof Type2) {
          return [ {
              row: 0,
              col: 0
          }, {
              row: 0,
              col: 1
          }, {
              row: 0,
              col: -1 | 0
          } ];
      };
      if (v instanceof Type3) {
          return [ {
              row: 0,
              col: 0
          }, {
              row: 0,
              col: 1
          }, {
              row: 1,
              col: 0
          } ];
      };
      if (v instanceof CustomTile) {
          return Data_Lens_Getter.viewOn(state)(_tile(Data_Lens_Internal_Forget.strongForget));
      };
      throw new Error("Failed pattern match at Game.Tiling.Model (line 79, column 17 - line 83, column 30): " + [ v.constructor.name ]);
  };
  var tilingGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(0));
  }, (function () {
      var $93 = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return v !== 0;
      });
      var $94 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($95) {
          return $93($94($95));
      };
  })(), function (state) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Lens_Setter.set(_rotation(Data_Profunctor_Strong.strongFn))(0)(Data_Lens_Setter.set(_tile(Data_Profunctor_Strong.strongFn))(getTile(state))(state)));
  }, Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (index) {
          var tilePos = tilePositions(state)(index);
          var pos = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var $61 = canPutTile(state)(tilePos);
          if ($61) {
              var m = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Ord.max(Data_Ord.ordInt))(0)(pos) + 1 | 0;
              return Data_Maybe.Just.create(Data_Array.updateAtIndices(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(tilePos)(function (v) {
                  return new Data_Tuple.Tuple(v, m);
              }))(pos));
          };
          var $62 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Ord.ordInt))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(index))(new Data_Maybe.Just(0));
          if ($62) {
              return Data_Maybe.Just.create(Data_Functor.mapFlipped(Data_Functor.functorArray)(pos)(function (x) {
                  var $63 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(x))(Data_Array.index(pos)(index));
                  if ($63) {
                      return 0;
                  };
                  return x;
              }));
          };
          return Data_Maybe.Nothing.value;
      };
  }, Data_Function["const"](new Game_Core.SizeLimit(3, 3, 10, 10)), function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var inConflict = function (state) {
      var v = Data_Lens_Getter.viewOn(state)(_hoverSquare(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof Data_Maybe.Nothing) {
          return false;
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v.value0))(new Data_Maybe.Just(0)) || !Game_Core.canPlay(tilingGame)(state)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Tiling.Model (line 104, column 20 - line 106, column 76): " + [ v.constructor.name ]);
  };
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(tilingGame)(v.value0);
      };
      if (v instanceof Play) {
          return Game_Core.playA(tilingGame)(v.value0);
      };
      if (v instanceof PutSink) {
          return Pha_Update.purely(Data_Lens_Setter.set((function () {
              var $96 = Game_Core["_position"](Data_Profunctor_Strong.strongFn);
              var $97 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($98) {
                  return $96($97($98));
              };
          })())(-1 | 0));
      };
      if (v instanceof SetNbSinks) {
          return Game_Core.newGame(tilingGame)(Data_Lens_Setter.set(_nbSinks(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetTile) {
          return Game_Core.newGame(tilingGame)((function () {
              var $99 = (function () {
                  var $71 = Data_Eq.eq(eqTileType)(v.value0)(CustomTile.value);
                  if ($71) {
                      return Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.CustomDialog.value);
                  };
                  return Control_Category.identity(Control_Category.categoryFn);
              })();
              var $100 = Data_Lens_Setter.set(_tileType(Data_Profunctor_Strong.strongFn))(v.value0);
              return function ($101) {
                  return $99($100($101));
              };
          })());
      };
      if (v instanceof Rotate) {
          return Pha_Update.purely(Data_Lens_Setter.over(_rotation(Data_Profunctor_Strong.strongFn))(function (v1) {
              return v1 + 1 | 0;
          }));
      };
      if (v instanceof SetHoverSquare) {
          return Pha_Update.purely(Data_Lens_Setter.set(_hoverSquare(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof FlipTile) {
          return Game_Core.newGame(tilingGame)(Data_Lens_Setter.over((function () {
              var $102 = _tile(Data_Profunctor_Strong.strongFn);
              var $103 = Game_Common["_isoCustom"](Data_Profunctor.profunctorFn);
              var $104 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($105) {
                  return $102($103($104($105)));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      throw new Error("Failed pattern match at Game.Tiling.Model (line 143, column 1 - line 143, column 33): " + [ v.constructor.name ]);
  };
  exports["Type1"] = Type1;
  exports["Type2"] = Type2;
  exports["Type3"] = Type3;
  exports["CustomTile"] = CustomTile;
  exports["istate"] = istate;
  exports["_rotation"] = _rotation;
  exports["_tile"] = _tile;
  exports["_tileType"] = _tileType;
  exports["_nbSinks"] = _nbSinks;
  exports["sinks"] = sinks;
  exports["inConflict"] = inConflict;
  exports["needSinks"] = needSinks;
  exports["Play"] = Play;
  exports["PutSink"] = PutSink;
  exports["SetNbSinks"] = SetNbSinks;
  exports["SetTile"] = SetTile;
  exports["Rotate"] = Rotate;
  exports["SetHoverSquare"] = SetHoverSquare;
  exports["FlipTile"] = FlipTile;
  exports["update"] = update;
  exports["onKeyDown"] = onKeyDown;
  exports["eqTileType"] = eqTileType;
  exports["showTileType"] = showTileType;
  exports["tilingGame"] = tilingGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Tiling.View"] = $PS["Game.Tiling.View"] || {};
  var exports = $PS["Game.Tiling.View"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Common = $PS["Game.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Tiling_Model = $PS["Game.Tiling.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var square = function (v) {
      return function (props) {
          return Pha_Svg.g(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha["class'"]("tiling-darken")(v.isDark), Pha_Svg.transform(Pha_Util.translate(Data_Show.show(Data_Show.showInt)(50 * v.col | 0))(Data_Show.show(Data_Show.showInt)(50 * v.row | 0))) ])(props))([ Pha_Svg.rect([ Pha_Svg.width("50"), Pha_Svg.height("50"), Pha.key("conc"), Pha_Svg.fill("url(#concrete)") ]), Pha.when(v.hasBlock)(function (v1) {
              return Pha_Svg.use("#tile2")([ Pha_Svg.width("50"), Pha_Svg.height("50"), Pha.key("tile") ]);
          }), Pha.when(v.hasSink)(function (v1) {
              return Pha_Svg.use("#sink")([ Pha_Svg.width("50"), Pha_Svg.height("50"), Pha.key("sink") ]);
          }) ]);
      };
  };
  var view = function (state) {
      var tileCursor = function (pp) {
          return Pha_Svg.g(UI_Template.svgCursorStyle(pp))([ Pha_Svg.g([ Pha.class_("tiling-cursor"), Pha.style("transform")("rotate(" + (Data_Show.show(Data_Show.showInt)(90 * Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_rotation"](Data_Lens_Internal_Forget.strongForget)) | 0) + "deg)")) ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_tile"](Data_Lens_Internal_Forget.strongForget)))(function (v) {
              return Pha_Svg.use("#tile2")([ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(v.col) - 25.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(v.row) - 25.0)), Pha_Svg.width("50"), Pha_Svg.height("50"), Pha.attr("pointer-events")("none"), Pha.attr("opacity")((function () {
                  var $21 = Game_Tiling_Model.inConflict(state);
                  if ($21) {
                      return "0.3";
                  };
                  return "0.8";
              })()) ]);
          })) ]);
      };
      var sinkCursor = function (pp) {
          return Pha_Svg.use("#sink")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.x_("-25"), Pha_Svg.y_("-25"), Pha_Svg.width("50"), Pha_Svg.height("50"), Pha.attr("pointer-events")("none") ])(UI_Template.svgCursorStyle(pp)));
      };
      var rules = [ Pha.text("Est-il possible de faire le carrelage de toute votre cuisine, sachant qu'elle peut avoir un ou plusieurs \xe9viers ?"), Pha_Elements.br, Pha.text("Tu peux tester avec diff\xe9rentes formes de tuile et diff\xe9rents emplacements d'\xe9viers."), Pha_Elements.br, Pha.text("Deux questions sont particuli\xe8rement int\xe9ressantes:"), Pha_Elements.br, Pha.text("- Pour quelles dimensions de la grille et pour quels positions d'\xe9viers peut-on paver une grille avec le premier type de tuiles?"), Pha_Elements.br, Pha.text("- Peut-on toujours carreler une grille 8x8 avec les tuiles de type 3 et en posant un \xe9vier, et ceci, quelque soit la position de l'\xe9vier?") ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var customDialog = function (v) {
          return UI_Template.dialog(Game_Tiling_Model.withcore)("Personnalise ta tuile")([ Pha_Elements.div([ Pha.class_("tiling-customtile-grid-container") ])([ Pha_Elements.div([ Pha.class_("tiling-grid") ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(250)(250) ])(Data_Array.mapWithIndex(function (index) {
              return function (hasBlock) {
                  var v1 = Lib_Util.coords(5)(index);
                  return square({
                      hasBlock: hasBlock,
                      row: v1.row,
                      col: v1.col,
                      hasSink: false,
                      isDark: false
                  })([ Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha_Events.onclick(new Game_Tiling_Model.FlipTile(index)) ]);
              };
          })(Data_Lens_Getter.viewOn(state)((function () {
              var $35 = Game_Tiling_Model["_tile"](Data_Lens_Internal_Forget.strongForget);
              var $36 = Game_Common["_isoCustom"](Data_Lens_Internal_Forget.profunctorForget);
              return function ($37) {
                  return $35($36($37));
              };
          })()))) ]) ]) ]);
      };
      var config = UI_Template.card("Carrelage")([ UI_Icons.iconSizesGroup(Game_Tiling_Model.withcore)(state)([ new Data_Tuple.Tuple(4, 5), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(5, 6), new Data_Tuple.Tuple(8, 8) ])(true), UI_Icons.iconSelectGroup(UI_Icons.defa)(Game_Tiling_Model.eqTileType)(state)("Motif de la tuile")([ Game_Tiling_Model.Type1.value, Game_Tiling_Model.Type2.value, Game_Tiling_Model.Type3.value, Game_Tiling_Model.CustomTile.value ])(Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_tileType"](Data_Lens_Internal_Forget.strongForget)))(Game_Tiling_Model.SetTile.create)(function (t) {
          return function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#" + Data_Show.show(Game_Tiling_Model.showTileType)(t)),
                  selected: v.selected,
                  tooltip: v.tooltip,
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          };
      }), UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Nombre d'\xe9viers")([ 0, 1, 2 ])(Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_nbSinks"](Data_Lens_Internal_Forget.strongForget)))(Game_Tiling_Model.SetNbSinks.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")([ UI_Icons.ihelp(Game_Tiling_Model.withcore)(state), UI_Icons.ireset(Game_Tiling_Model.withcore)(state), UI_Icons.irules(Game_Tiling_Model.withcore)(state) ]) ]);
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var border = function (i) {
          return function (di) {
              return Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Array.index(position)(i))(Data_Array.index(position)(i + di | 0));
          };
      };
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.trackPointer(Game_Tiling_Model.withcore))([ Pha.class_("ui-board"), Pha_Events.oncontextmenu(Game_Tiling_Model.Rotate.value) ])))([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(50 * columns | 0)(50 * rows | 0) ])(Data_Array.concat([ Data_Array.mapWithIndex(function (index) {
          return function (pos) {
              var v = Lib_Util.coords(columns)(index);
              return square({
                  isDark: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && Data_Int.even(v.row + v.col | 0),
                  hasBlock: pos > 0,
                  hasSink: pos === (-1 | 0),
                  row: v.row,
                  col: v.col
              })([ Pha_Events.onclick((function () {
                  var $28 = Game_Tiling_Model.needSinks(state);
                  if ($28) {
                      return new Game_Tiling_Model.PutSink(index);
                  };
                  return new Game_Tiling_Model.Play(index);
              })()), Pha_Events.onpointerenter(new Game_Tiling_Model.SetHoverSquare(new Data_Maybe.Just(index))), Pha_Events.onpointerleave(new Game_Tiling_Model.SetHoverSquare(Data_Maybe.Nothing.value)) ]);
          };
      })(position), Data_Array.mapWithIndex(function (index) {
          return function (pos) {
              var v = Lib_Util.coords(columns)(index);
              return Pha_Svg.g([ Pha_Svg.transform(Pha_Util.translate(Data_Show.show(Data_Show.showInt)(50 * v.col | 0))(Data_Show.show(Data_Show.showInt)(50 * v.row | 0))) ])([ Pha.when(pos > 0 && border(index)(-1 | 0))(function (v1) {
                  return Pha_Svg.line([ Pha_Svg.x1("0"), Pha_Svg.y1("0"), Pha_Svg.x2("0"), Pha_Svg.y2("50"), Pha_Svg.stroke("#000"), Pha_Svg.strokeWidth("2") ]);
              }), Pha.when(pos > 0 && border(index)(1))(function (v1) {
                  return Pha_Svg.line([ Pha_Svg.x1("50"), Pha_Svg.y1("0"), Pha_Svg.x2("50"), Pha_Svg.y2("50"), Pha_Svg.stroke("#000"), Pha_Svg.strokeWidth("2") ]);
              }), Pha.when(pos > 0 && border(index)(-columns | 0))(function (v1) {
                  return Pha_Svg.line([ Pha_Svg.x1("0"), Pha_Svg.y1("0"), Pha_Svg.x2("50"), Pha_Svg.y2("0"), Pha_Svg.stroke("#000"), Pha_Svg.strokeWidth("2") ]);
              }), Pha.when(pos > 0 && border(index)(columns))(function (v1) {
                  return Pha_Svg.line([ Pha_Svg.x1("0"), Pha_Svg.y1("50"), Pha_Svg.x2("50"), Pha_Svg.y2("50"), Pha_Svg.stroke("#000"), Pha_Svg.strokeWidth("2") ]);
              }) ]);
          };
      })(position), [ Pha.maybe(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)))((function () {
          var $34 = Data_Array.length(Game_Tiling_Model.sinks(state)) < Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_nbSinks"](Data_Lens_Internal_Forget.strongForget));
          if ($34) {
              return sinkCursor;
          };
          return tileCursor;
      })()) ] ])) ]);
      var board = UI_Template.incDecGrid(Game_Tiling_Model.withcore)(Game_Tiling_Model.tilingGame)(state)([ grid ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Tiling_Model.withcore)(Game_Tiling_Model.tilingGame)({
          config: config,
          board: board,
          rules: rules,
          winTitle: "GAGN\xc9",
          customDialog: customDialog
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Tiling"] = $PS["Game.Tiling"] || {};
  var exports = $PS["Game.Tiling"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Tiling_Model = $PS["Game.Tiling.Model"];
  var Game_Tiling_View = $PS["Game.Tiling.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Tiling_Model.withcore)(Game_Core.Init.value)),
      view: Game_Tiling_View.view,
      onKeydown: Game_Tiling_Model.onKeyDown
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Tricolor.Model"] = $PS["Game.Tricolor.Model"] || {};
  var exports = $PS["Game.Tricolor.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var MyPrelude = $PS["MyPrelude"];
  var Pha_Random = $PS["Pha.Random"];
  var Pha_Update = $PS["Pha.Update"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var SetSize = (function () {
      function SetSize(value0) {
          this.value0 = value0;
      };
      SetSize.create = function (value0) {
          return new SetSize(value0);
      };
      return SetSize;
  })();
  var SetNbColors = (function () {
      function SetNbColors(value0) {
          this.value0 = value0;
      };
      SetNbColors.create = function (value0) {
          return new SetNbColors(value0);
      };
      return SetNbColors;
  })();
  var SetRange = (function () {
      function SetRange(value0) {
          this.value0 = value0;
      };
      SetRange.create = function (value0) {
          return new SetRange(value0);
      };
      return SetRange;
  })();
  var SetHoverCell = (function () {
      function SetHoverCell(value0) {
          this.value0 = value0;
      };
      SetHoverCell.create = function (value0) {
          return new SetHoverCell(value0);
      };
      return SetHoverCell;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      size: 5,
      nbColors: 2,
      range: 1,
      hoverCell: Data_Maybe.Nothing.value
  });
  var _ext$prime = function (dictStrong) {
      var $30 = Game_Core["_ext"](dictStrong);
      var $31 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($32) {
          return $30($31($32));
      };
  };
  var _hoverCell = function (dictStrong) {
      var $33 = _ext$prime(dictStrong);
      var $34 = Data_Lens_Lens.lens(function (v) {
          return v.hoverCell;
      })(function (v) {
          return function (v1) {
              return {
                  hoverCell: v1,
                  nbColors: v.nbColors,
                  range: v.range,
                  size: v.size
              };
          };
      })(dictStrong);
      return function ($35) {
          return $33($34($35));
      };
  };
  var _nbColors = function (dictStrong) {
      var $36 = _ext$prime(dictStrong);
      var $37 = Data_Lens_Lens.lens(function (v) {
          return v.nbColors;
      })(function (v) {
          return function (v1) {
              return {
                  nbColors: v1,
                  hoverCell: v.hoverCell,
                  range: v.range,
                  size: v.size
              };
          };
      })(dictStrong);
      return function ($38) {
          return $36($37($38));
      };
  };
  var _range = function (dictStrong) {
      var $39 = _ext$prime(dictStrong);
      var $40 = Data_Lens_Lens.lens(function (v) {
          return v.range;
      })(function (v) {
          return function (v1) {
              return {
                  range: v1,
                  hoverCell: v.hoverCell,
                  nbColors: v.nbColors,
                  size: v.size
              };
          };
      })(dictStrong);
      return function ($41) {
          return $39($40($41));
      };
  };
  var _size = function (dictStrong) {
      var $42 = _ext$prime(dictStrong);
      var $43 = Data_Lens_Lens.lens(function (v) {
          return v.size;
      })(function (v) {
          return function (v1) {
              return {
                  size: v1,
                  hoverCell: v.hoverCell,
                  nbColors: v.nbColors,
                  range: v.range
              };
          };
      })(dictStrong);
      return function ($44) {
          return $42($43($44));
      };
  };
  var inRange = function (state) {
      return function (i) {
          return function (i$prime) {
              var diff = Lib_Util.abs(i - i$prime | 0);
              return Data_Ord.min(Data_Ord.ordInt)(diff)(Data_Lens_Getter.viewOn(state)(_size(Data_Lens_Internal_Forget.strongForget)) - diff | 0) <= Data_Lens_Getter.viewOn(state)(_range(Data_Lens_Internal_Forget.strongForget));
          };
      };
  };
  var tricolorGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(Data_Maybe.Nothing.value);
  }, function (state) {
      return MyPrelude.replicateA(Control_Monad_Free.freeApplicative)(Data_Lens_Getter.viewOn(state)(_size(Data_Lens_Internal_Forget.strongForget)))(Pha_Random["int'"](Data_Lens_Getter.viewOn(state)(_nbColors(Data_Lens_Internal_Forget.strongForget))));
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return v === 0;
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, Control_Applicative.pure(Control_Monad_Free.freeApplicative), Control_Category.identity(Control_Category.categoryFn), function (state) {
      return function (i) {
          return Data_Maybe.Just.create(Data_Array.mapWithIndex(function (i$prime) {
              return function (color) {
                  var $22 = inRange(state)(i)(i$prime);
                  if ($22) {
                      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(color + 1 | 0)(Data_Lens_Getter.viewOn(state)(_nbColors(Data_Lens_Internal_Forget.strongForget)));
                  };
                  return color;
              };
          })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(tricolorGame)(v.value0);
      };
      if (v instanceof Play) {
          return Game_Core.playA(tricolorGame)(v.value0);
      };
      if (v instanceof SetSize) {
          return Game_Core.newGame(tricolorGame)(Data_Lens_Setter.set(_size(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetNbColors) {
          return Game_Core.newGame(tricolorGame)(Data_Lens_Setter.set(_nbColors(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetRange) {
          return Game_Core.newGame(tricolorGame)(Data_Lens_Setter.set(_range(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetHoverCell) {
          return Pha_Update.purely(Data_Lens_Setter.set(_hoverCell(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      throw new Error("Failed pattern match at Game.Tricolor.Model (line 65, column 1 - line 65, column 33): " + [ v.constructor.name ]);
  };
  exports["_size"] = _size;
  exports["_nbColors"] = _nbColors;
  exports["_range"] = _range;
  exports["_hoverCell"] = _hoverCell;
  exports["istate"] = istate;
  exports["inRange"] = inRange;
  exports["Play"] = Play;
  exports["SetSize"] = SetSize;
  exports["SetNbColors"] = SetNbColors;
  exports["SetRange"] = SetRange;
  exports["SetHoverCell"] = SetHoverCell;
  exports["update"] = update;
  exports["tricolorGame"] = tricolorGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Tricolor.View"] = $PS["Game.Tricolor.View"] || {};
  var exports = $PS["Game.Tricolor.View"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Tricolor_Model = $PS["Game.Tricolor.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var translateCell = function (i) {
      return function (size) {
          var y = 0.45 + 0.35 * $$Math.sin((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(size));
          var x = 0.5 + 0.35 * $$Math.cos((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(size));
          return Pha_Util.translate(Pha_Util.pc(x))(Pha_Util.pc(y));
      };
  };
  var colors = [ "green", "yellow", "red", "magenta", "blue" ];
  var view = function (state) {
      var size = Data_Lens_Getter.viewOn(state)(Game_Tricolor_Model["_size"](Data_Lens_Internal_Forget.strongForget));
      var rules = [ Pha.text("Ce jeu est une variante de \"Tout noir ou tout blanc\" mais avec plusieurs couleurs."), Pha_Elements.br, Pha.text("Lorsque tu cliques un jeton, celui-ci change de couleurs ainsi que tous les jetons proches jusqu'\xe0 la distance choisie dans \"Port\xe9e\"."), Pha_Elements.br, Pha.text("Le but est que tous les jetons soient de couleur verte.") ];
      var nbColors = Data_Lens_Getter.viewOn(state)(Game_Tricolor_Model["_nbColors"](Data_Lens_Internal_Forget.strongForget));
      var levelFinished = Game_Core.isLevelFinished(Game_Tricolor_Model.tricolorGame)(state);
      var drawColorCycle = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_Monoid.monoidArray)(function (i) {
          return function (color) {
              return [ Pha_Svg.circle([ Pha_Svg.cx(Data_Show.show(Data_Show.showInt)(95 + (15 * (i - nbColors | 0) | 0) | 0)), Pha_Svg.cy("95"), Pha_Svg.r("3"), Pha.key("c" + Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.fill(color) ]), Pha_Svg["text'"]("\u2b95")([ Pha_Svg.x_(Data_Show.show(Data_Show.showInt)(99 + (15 * (i - nbColors | 0) | 0) | 0)), Pha_Svg.y_("97"), Pha.key("t" + Data_Show.show(Data_Show.showInt)(i)), Pha.attr("font-size")("7") ]) ];
          };
      })(Data_Array.take(nbColors)(colors)))([ Pha_Svg.circle([ Pha_Svg.cx("95"), Pha_Svg.cy("95"), Pha_Svg.r("3"), Pha.key("fc"), Pha_Svg.fill("green") ]) ]);
      var drawCell = function (i) {
          return function (color) {
              return Pha_Svg.circle([ Pha_Svg.r("7.5"), Pha.class_("tricolor-cell"), Pha["class'"]("finished")(levelFinished), Pha_Svg.stroke((function () {
                  var $0 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Functor.map(Data_Maybe.functorMaybe)(Game_Tricolor_Model.inRange(state)(i))(Data_Lens_Getter.viewOn(state)(Game_Tricolor_Model["_hoverCell"](Data_Lens_Internal_Forget.strongForget))))(new Data_Maybe.Just(true));
                  if ($0) {
                      return "lightgreen";
                  };
                  return "black";
              })()), Pha.key("b" + Data_Show.show(Data_Show.showInt)(i)), Pha.style("fill")((function () {
                  if (levelFinished) {
                      return "";
                  };
                  return Data_Maybe.fromMaybe("")(Data_Array.index(colors)(color));
              })()), Pha.style("transform")(translateCell(i)(size)), Pha_Events.onclick(new Game_Tricolor_Model.Play(i)), Pha_Events.onpointerenter(new Game_Tricolor_Model.SetHoverCell(new Data_Maybe.Just(i))), Pha_Events.onpointerleave(new Game_Tricolor_Model.SetHoverCell(Data_Maybe.Nothing.value)) ]);
          };
      };
      var config = UI_Template.card("Feux tricolores")([ UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Nombre de lumi\xe8res")([ 4, 5, 6, 7, 8 ])(size)(Game_Tricolor_Model.SetSize.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Nombre de couleurs")([ 2, 3, 4, 5 ])(nbColors)(Game_Tricolor_Model.SetNbColors.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.iconSelectGroup(UI_Icons.defint)(Data_Eq.eqInt)(state)("Port\xe9e")([ 1, 2, 3 ])(Data_Lens_Getter.viewOn(state)(Game_Tricolor_Model["_range"](Data_Lens_Internal_Forget.strongForget)))(Game_Tricolor_Model.SetRange.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Tricolor_Model.withcore), UI_Icons.iredo(Game_Tricolor_Model.withcore), UI_Icons.ireset(Game_Tricolor_Model.withcore), UI_Icons.irules(Game_Tricolor_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = Pha_Elements.div([ Pha.class_("ui-board tricolor-board") ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_Array.concat([ Data_Array.mapWithIndex(drawCell)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))), drawColorCycle ])) ]);
      return UI_Template.template(Lib_Util.precord()())(Game_Tricolor_Model.withcore)(Game_Tricolor_Model.tricolorGame)({
          config: config,
          board: board,
          rules: rules
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Tricolor"] = $PS["Game.Tricolor"] || {};
  var exports = $PS["Game.Tricolor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Core = $PS["Game.Core"];
  var Game_Tricolor_Model = $PS["Game.Tricolor.Model"];
  var Game_Tricolor_View = $PS["Game.Tricolor.View"];                
  var game = {
      init: new Data_Maybe.Just(Game_Core.core(Game_Tricolor_Model.withcore)(Game_Core.Init.value)),
      view: Game_Tricolor_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Valise.Model"] = $PS["Game.Valise.Model"] || {};
  var exports = $PS["Game.Valise.Model"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];                
  var ShowHelp = (function () {
      function ShowHelp(value0) {
          this.value0 = value0;
      };
      ShowHelp.create = function (value0) {
          return new ShowHelp(value0);
      };
      return ShowHelp;
  })();
  var ToggleSwitch = (function () {
      function ToggleSwitch() {

      };
      ToggleSwitch.value = new ToggleSwitch();
      return ToggleSwitch;
  })();
  var SetDrag = (function () {
      function SetDrag(value0) {
          this.value0 = value0;
      };
      SetDrag.create = function (value0) {
          return new SetDrag(value0);
      };
      return SetDrag;
  })();
  var MoveObject = (function () {
      function MoveObject(value0) {
          this.value0 = value0;
      };
      MoveObject.create = function (value0) {
          return new MoveObject(value0);
      };
      return MoveObject;
  })();
  var istate = {
      isOpen: false,
      help: "",
      helpVisible: false,
      drag: Data_Maybe.Nothing.value,
      positions: Data_Map_Internal.empty,
      isSwitchOn: false
  };
  var enterA = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(function (v) {
      return istate;
  }))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(1500))(function () {
          return Pha_Update.setState(function (v) {
              return {
                  isOpen: true,
                  drag: v.drag,
                  help: v.help,
                  helpVisible: v.helpVisible,
                  isSwitchOn: v.isSwitchOn,
                  positions: v.positions
              };
          });
      });
  });
  var _positions = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.positions;
      })(function (v) {
          return function (v1) {
              return {
                  positions: v1,
                  drag: v.drag,
                  help: v.help,
                  helpVisible: v.helpVisible,
                  isOpen: v.isOpen,
                  isSwitchOn: v.isSwitchOn
              };
          };
      })(dictStrong);
  };
  var _isSwitchOn = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.isSwitchOn;
      })(function (v) {
          return function (v1) {
              return {
                  isSwitchOn: v1,
                  drag: v.drag,
                  help: v.help,
                  helpVisible: v.helpVisible,
                  isOpen: v.isOpen,
                  positions: v.positions
              };
          };
      })(dictStrong);
  };
  var _helpVisible = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.helpVisible;
      })(function (v) {
          return function (v1) {
              return {
                  helpVisible: v1,
                  drag: v.drag,
                  help: v.help,
                  isOpen: v.isOpen,
                  isSwitchOn: v.isSwitchOn,
                  positions: v.positions
              };
          };
      })(dictStrong);
  };
  var _help = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.help;
      })(function (v) {
          return function (v1) {
              return {
                  help: v1,
                  drag: v.drag,
                  helpVisible: v.helpVisible,
                  isOpen: v.isOpen,
                  isSwitchOn: v.isSwitchOn,
                  positions: v.positions
              };
          };
      })(dictStrong);
  };
  var update = function (v) {
      if (v instanceof ShowHelp) {
          return Pha_Update.purely((function () {
              var $36 = Data_Lens_Setter.set(_helpVisible(Data_Profunctor_Strong.strongFn))(v.value0 !== "");
              var $37 = Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))((function () {
                  var $25 = v.value0 === "";
                  if ($25) {
                      return Control_Category.identity(Control_Category.categoryFn);
                  };
                  return Data_Function["const"](v.value0);
              })());
              return function ($38) {
                  return $36($37($38));
              };
          })());
      };
      if (v instanceof ToggleSwitch) {
          return Pha_Update.purely(Data_Lens_Setter.over(_isSwitchOn(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      if (v instanceof SetDrag) {
          return Pha_Update.purely(function (v1) {
              return {
                  drag: v.value0,
                  help: v1.help,
                  helpVisible: v1.helpVisible,
                  isOpen: v1.isOpen,
                  isSwitchOn: v1.isSwitchOn,
                  positions: v1.positions
              };
          });
      };
      if (v instanceof MoveObject) {
          return Pha_Update.purely(function (state) {
              if (state.drag instanceof Data_Maybe.Just) {
                  return Data_Lens_Setter.set((function () {
                      var $39 = _positions(Data_Profunctor_Strong.strongFn);
                      var $40 = Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(state.drag.value0.name)(Data_Profunctor_Strong.strongFn);
                      return function ($41) {
                          return $39($40($41));
                      };
                  })())(new Data_Maybe.Just({
                      x: v.value0.x - state.drag.value0.x,
                      y: v.value0.y - state.drag.value0.y
                  }))(state);
              };
              return state;
          });
      };
      throw new Error("Failed pattern match at Game.Valise.Model (line 52, column 1 - line 52, column 33): " + [ v.constructor.name ]);
  };
  exports["istate"] = istate;
  exports["_positions"] = _positions;
  exports["enterA"] = enterA;
  exports["ShowHelp"] = ShowHelp;
  exports["ToggleSwitch"] = ToggleSwitch;
  exports["SetDrag"] = SetDrag;
  exports["MoveObject"] = MoveObject;
  exports["update"] = update;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Valise.View"] = $PS["Game.Valise.View"] || {};
  var exports = $PS["Game.Valise.View"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Common = $PS["Game.Common"];
  var Game_Valise_Model = $PS["Game.Valise.Model"];
  var Pha = $PS["Pha"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];                
  var valise = function (state) {
      var object = function (v) {
          return function (x$prime) {
              return function (y$prime) {
                  return function (w$prime) {
                      return function (h$prime) {
                          return function (props) {
                              return function (children) {
                                  var defaultTranslate = Pha_Util.translate(Pha_Util.pc(Data_Int.toNumber(x$prime) / 850.0))(Pha_Util.pc(Data_Int.toNumber(y$prime) / 690.0));
                                  return Pha_Svg.g([ Pha.style("transform")((function () {
                                      var v1 = new Data_Tuple.Tuple(v.drag, Data_Lens_Getter.viewOn(Data_Lens_Getter.viewOn(state)(Game_Valise_Model["_positions"](Data_Lens_Internal_Forget.strongForget)))(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(v.symbol)(Data_Lens_Internal_Forget.strongForget)));
                                      if (v1.value0 && v1.value1 instanceof Data_Maybe.Just) {
                                          return Pha_Util.translate(Pha_Util.pc(v1.value1.value0.x))(Pha_Util.pc(v1.value1.value0.y));
                                      };
                                      return defaultTranslate;
                                  })()) ])([ Pha_Svg.g(props)([ Pha_Svg.svg(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("valise-object"), Pha["class'"]("draggable")(v.drag), Pha_Svg.width(Data_Show.show(Data_Show.showInt)(w$prime)), Pha_Svg.height(Data_Show.show(Data_Show.showInt)(h$prime)), Pha_Events["onpointerdown'"]((function () {
                                      if (v.drag) {
                                          return Data_Maybe.Just.create(new Game_Valise_Model.SetDrag(new Data_Maybe.Just({
                                              name: v.symbol,
                                              x: Data_Int.toNumber(w$prime) / 1650.0,
                                              y: Data_Int.toNumber(h$prime) / 1380.0
                                          })));
                                      };
                                      return Data_Maybe.Nothing.value;
                                  })()) ])((function () {
                                      var $16 = Data_Maybe.isJust(v.link);
                                      if ($16) {
                                          return [  ];
                                      };
                                      return [ Pha_Events.onpointerenter(new Game_Valise_Model.ShowHelp(v.help)), Pha_Events.onpointerleave(new Game_Valise_Model.ShowHelp("")) ];
                                  })()))([ Pha.h("use")([ Pha_Attributes.href("#" + v.symbol), Pha.class_("valise-symbol") ])([  ]), Pha.maybe(v.link)(function (l) {
                                      return Pha_Elements.a([ Pha_Attributes.href("#" + l) ])([ Pha_Svg.rect(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Svg.width("100%"), Pha_Svg.height("100%"), Pha.class_("valise-object-link"), Pha_Events.onpointerenter(new Game_Valise_Model.ShowHelp(v.help)), Pha_Events.onpointerleave(new Game_Valise_Model.ShowHelp("")) ])(children)) ]);
                                  }) ]) ]) ]);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(825)(690), Pha_Events.on("pointermove")((function () {
          var $24 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Game_Valise_Model.MoveObject.create);
          return function ($25) {
              return $24(Game_Common.pointerDecoder($25));
          };
      })()), Pha_Events.onpointerup(new Game_Valise_Model.SetDrag(Data_Maybe.Nothing.value)) ])([ Pha.h("use")([ Pha_Attributes.href("#valise"), Pha.class_("valise-close"), Pha_Svg.width("100%"), Pha_Svg.height("100%") ])([  ]), Pha_Svg.g([ Pha.class_("valise-open") ])([ Pha.h("use")([ Pha_Attributes.href("#openvalise") ])([  ]), object({
          symbol: "switch",
          link: Data_Maybe.Nothing.value,
          help: "",
          drag: false
      })(300)(460)(42)(60)([ Pha_Events.onclick(Game_Valise_Model.ToggleSwitch.value), Pha.style("transform")((function () {
          if (state.isSwitchOn) {
              return "scale(1,-1) translateY(-8%)";
          };
          return "scale(1,1)";
      })()) ])([  ]), object({
          symbol: "bulboff",
          link: Data_Maybe.Nothing.value,
          help: "Trouve un moyen d'allumer l'ampoule",
          drag: false
      })(477)(280)(48)(48)([  ])([ Pha.style("pointer-events")("all") ]), object({
          symbol: "bulbon",
          link: new Data_Maybe.Just("noirblanc"),
          help: "Jeu: tour noir, tout blanc",
          drag: false
      })(477)(280)(48)(48)([ Pha.attr("transition")("opacity 0.5s"), Pha.attr("opacity")((function () {
          if (state.isSwitchOn) {
              return "1";
          };
          return "0";
      })()), Pha.style("pointer-events")((function () {
          if (state.isSwitchOn) {
              return "all";
          };
          return "none";
      })()) ])([  ]), object({
          symbol: "frog2",
          link: new Data_Maybe.Just("frog"),
          help: "Jeu: la grenouille",
          drag: false
      })(549)(320)(40)(40)([ Pha_Svg.fill("#bcd35f") ])([ Pha_Svg.x_("10%"), Pha_Svg.y_("20%"), Pha_Svg.width("80%"), Pha_Svg.height("80%") ]), object({
          symbol: "flowerpot",
          link: Data_Maybe.Nothing.value,
          help: "Quelque chose se cache derri\xe8re ce pot",
          drag: true
      })(533)(300)(64)(64)([  ])([  ]), object({
          symbol: "hanoibot",
          link: new Data_Maybe.Just("solitaire"),
          help: "Jeu: solitaire",
          drag: false
      })(500)(430)(75)(51)([  ])([ Pha_Svg.x_("30%"), Pha_Svg.y_("20%"), Pha_Svg.width("40%"), Pha_Svg.height("40%") ]), object({
          symbol: "hanoitop",
          link: Data_Maybe.Nothing.value,
          help: "Quelque chose se cache sous cette tour",
          drag: true
      })(507)(409)(60)(57)([  ])([  ]), object({
          symbol: "knight",
          link: new Data_Maybe.Just("queens"),
          help: "Jeu: les 8 reines",
          drag: false
      })(461)(380)(24)(48)([ Pha_Svg.transform("rotate(40)") ])([  ]), object({
          symbol: "pen",
          link: new Data_Maybe.Just("dessin"),
          help: "Jeu: dessin",
          drag: false
      })(610)(400)(60)(60)([  ])([  ]), object({
          symbol: "stack",
          link: new Data_Maybe.Just("jetons"),
          help: "Jeu: jetons",
          drag: false
      })(350)(500)(50)(50)([  ])([  ]), object({
          symbol: "wheel",
          link: new Data_Maybe.Just("roue"),
          help: "Jeu: roue des couleurs",
          drag: false
      })(400)(205)(50)(50)([ Pha_Svg.transform("scale(1,0.8)") ])([  ]), object({
          symbol: "card",
          link: new Data_Maybe.Just("nim"),
          help: "Jeu: Poker Nim",
          drag: false
      })(450)(130)(40)(50)([ Pha_Svg.transform("rotate(30)") ])([  ]), object({
          symbol: "tile",
          link: new Data_Maybe.Just("tiling"),
          help: "Jeu: carrelage",
          drag: false
      })(280)(400)(120)(60)([  ])([  ]), object({
          symbol: "tricolor2",
          link: new Data_Maybe.Just("baseball"),
          help: "Jeu: baseball multicolore",
          drag: false
      })(350)(330)(90)(60)([  ])([  ]), object({
          symbol: "traffic",
          link: new Data_Maybe.Just("tricolor"),
          help: "Jeu: feu tricolore",
          drag: false
      })(250)(280)(64)(64)([  ])([  ]), object({
          symbol: "race",
          link: new Data_Maybe.Just("paths"),
          help: "Jeu: chemins",
          drag: false
      })(450)(445)(64)(64)([ Pha_Svg.transform("rotate(40)") ])([  ]), object({
          symbol: "paw",
          link: new Data_Maybe.Just("labete"),
          help: "Jeu: la b\xeate",
          drag: false
      })(300)(180)(40)(40)([ Pha_Svg.transform("rotate(30)"), Pha.attr("opacity")("0.5") ])([  ]), object({
          symbol: "quiet",
          link: new Data_Maybe.Just("sansmot"),
          help: "Jeu: preuve sans mot",
          drag: false
      })(180)(130)(50)(50)([  ])([  ]), object({
          symbol: "eternal-attack",
          link: new Data_Maybe.Just("eternal"),
          help: "Jeu: domination \xe9ternelle",
          drag: false
      })(260)(125)(40)(40)([  ])([  ]), object({
          symbol: "chocolate",
          link: new Data_Maybe.Just("chocolat"),
          help: "Jeu: chocolat",
          drag: false
      })(200)(200)(60)(60)([ Pha_Svg.transform("rotate(40)") ])([  ]) ]) ]);
  };
  var view = function (state) {
      return Pha_Elements.div([ Pha.class_("ui-flex-center valise-main-container"), Pha["class'"]("open")(state.isOpen) ])([ Pha_Elements.div([  ])([ Pha_Elements.div([ Pha.class_("valise-logo") ])([ Pha_Svg.svg([ Pha_Svg.width("100%"), Pha_Svg.height("100%") ])([ Pha_Svg.use("#logo")([  ]) ]) ]), Pha_Elements.div([ Pha.class_("valise-container") ])([ valise(state), Pha_Elements.div([ Pha.class_("valise-help"), Pha["class'"]("visible")(state.helpVisible && state.help !== "") ])([ Pha.text(state.help) ]) ]) ]) ]);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Game.Valise"] = $PS["Game.Valise"] || {};
  var exports = $PS["Game.Valise"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Game_Valise_View = $PS["Game.Valise.View"];                
  var game = {
      init: Data_Maybe.Nothing.value,
      view: Game_Valise_View.view,
      onKeydown: Data_Function["const"](Data_Maybe.Nothing.value)
  };
  exports["game"] = game;
})(PS);
(function(exports) {
  // code comes from hyperapp by Jorge Bucaran
  // https://github.com/jorgebucaran/hyperapp
  // modified by Guillaume Bagan

  const RECYCLED_NODE = 1
  const LAZY_NODE = 2
  const TEXT_NODE = 3
  const EMPTY_OBJ = {}
  const EMPTY_ARR = []
  const map = EMPTY_ARR.map
  const defer = requestAnimationFrame || setTimeout

  const merge = (a, b) => Object.assign({}, a, b);

  const compose = (f, g) => f && g ? x => f(g(x)) : f || g; 

  const patchProperty = function(node, key, oldValue, newValue, listener, isSvg, mapf) {
    if (key === "key") {
    } else if (key === "style") {
      for (var k in merge(oldValue, newValue)) {
        oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
        if (k[0] === "-") {
          node[key].setProperty(k, oldValue)
        } else {
          node[key][k] = oldValue
        }
      }
    } else if (typeof newValue === "function") {
      if (
        !((node.actions || (node.actions = {}))[key] = mapf ? mapf(newValue) : newValue)
      ) {
        node.removeEventListener(key, listener)
      } else if (!oldValue) {
        node.addEventListener(key, listener)
      }
    } else if (!isSvg && key !== "list" && key in node) {
      node[key] = newValue
    } else if (
      newValue == null ||
      newValue === false ||
      (key === "class" && !newValue)
    ) {
      node.removeAttribute(key)
    } else {
      node.setAttribute(key, newValue)
    }
  }

  const createNode = function(vnode, listener, isSvg, mapf) {
    var node =
      vnode.type === TEXT_NODE
        ? document.createTextNode(vnode.name)
        : (isSvg = isSvg || vnode.name === "svg")
        ? document.createElementNS("http://www.w3.org/2000/svg", vnode.name)
        : document.createElement(vnode.name)
    var props = vnode.props

    mapf = compose(mapf, vnode.mapf); 

    for (let k in props) {
      patchProperty(node, k, null, props[k], listener, isSvg, mapf)
    }

    for (let i = 0, len = vnode.children.length; i < len; i++) {
      node.appendChild(
        createNode(
          (vnode.children[i] = getVNode(vnode.children[i])),
          listener,
          isSvg,
          mapf
        )
      )
    }

    return (vnode.node = node)
  }

  const getKey = vnode => vnode == null ? null : vnode.key;

  const patch = function(parent, node, oldVNode, newVNode, listener, isSvg, mapf) {
    if (oldVNode === newVNode) {
    } else if (
      oldVNode != null &&
      oldVNode.type === TEXT_NODE &&
      newVNode.type === TEXT_NODE
    ) {
      if (oldVNode.name !== newVNode.name) node.nodeValue = newVNode.name
    } else if (oldVNode == null || oldVNode.name !== newVNode.name) {
      node = parent.insertBefore(
        createNode((newVNode = getVNode(newVNode)), listener, isSvg, mapf),
        node
      )
      if (oldVNode != null) {
        parent.removeChild(oldVNode.node)
      }
    } else {
      var tmpVKid
      var oldVKid

      var oldKey
      var newKey

      var oldVProps = oldVNode.props
      var newVProps = newVNode.props

      var oldVKids = oldVNode.children
      var newVKids = newVNode.children

      let oldHead = 0
      let newHead = 0
      let oldTail = oldVKids.length - 1
      let newTail = newVKids.length - 1

      mapf = compose(mapf, newVNode.mapf);
      isSvg = isSvg || newVNode.name === "svg"

      for (var i in merge(oldVProps, newVProps)) {
        if (
          (i === "value" || i === "selected" || i === "checked"
            ? node[i]
            : oldVProps[i]) !== newVProps[i]
        ) {
          patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg, mapf)
        }
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldHead])) == null ||
          oldKey !== getKey(newVKids[newHead])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldHead].node,
          oldVKids[oldHead],
          (newVKids[newHead] = getVNode(
            newVKids[newHead++],
            oldVKids[oldHead++]
          )),
          listener,
          isSvg,
          mapf
        )
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldTail])) == null ||
          oldKey !== getKey(newVKids[newTail])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldTail].node,
          oldVKids[oldTail],
          (newVKids[newTail] = getVNode(
            newVKids[newTail--],
            oldVKids[oldTail--]
          )),
          listener,
          isSvg,
          mapf
        )
      }

      if (oldHead > oldTail) {
        while (newHead <= newTail) {
          node.insertBefore(
            createNode(
              (newVKids[newHead] = getVNode(newVKids[newHead++])),
              listener,
              isSvg,
              mapf
            ),
            (oldVKid = oldVKids[oldHead]) && oldVKid.node
          )
        }
      } else if (newHead > newTail) {
        while (oldHead <= oldTail) {
          node.removeChild(oldVKids[oldHead++].node)
        }
      } else {
        for (var i = oldHead, keyed = {}, newKeyed = {}; i <= oldTail; i++) {
          if ((oldKey = oldVKids[i].key) != null) {
            keyed[oldKey] = oldVKids[i]
          }
        }

        while (newHead <= newTail) {
          oldKey = getKey((oldVKid = oldVKids[oldHead]))
          newKey = getKey(
            (newVKids[newHead] = getVNode(newVKids[newHead], oldVKid))
          )

          if (
            newKeyed[oldKey] ||
            (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))
          ) {
            if (oldKey == null) {
              node.removeChild(oldVKid.node)
            }
            oldHead++
            continue
          }

          if (newKey == null || oldVNode.type === RECYCLED_NODE) {
            if (oldKey == null) {
              patch(
                node,
                oldVKid && oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg,
                mapf
              )
              newHead++
            }
            oldHead++
          } else {
            if (oldKey === newKey) {
              patch(
                node,
                oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg,
                mapf
              )
              newKeyed[newKey] = true
              oldHead++
            } else {
              if ((tmpVKid = keyed[newKey]) != null) {
                patch(
                  node,
                  node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),
                  tmpVKid,
                  newVKids[newHead],
                  listener,
                  isSvg,
                  mapf
                )
                newKeyed[newKey] = true
              } else {
                patch(
                  node,
                  oldVKid && oldVKid.node,
                  null,
                  newVKids[newHead],
                  listener,
                  isSvg,
                  mapf
                )
              }
            }
            newHead++
          }
        }

        while (oldHead <= oldTail) {
          if (getKey((oldVKid = oldVKids[oldHead++])) == null) {
            node.removeChild(oldVKid.node)
          }
        }

        for (var i in keyed) {
          if (newKeyed[i] == null) {
            node.removeChild(keyed[i].node)
          }
        }
      }
    }

    return (newVNode.node = node)
  }

  const propsChanged = function(a, b) {
    for (var k in a) if (a[k] !== b[k]) return true
    for (var k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = (newVNode, oldVNode) =>
    newVNode.type === LAZY_NODE
      ? ((!oldVNode || propsChanged(oldVNode.lazy, newVNode.lazy)) &&
          ((oldVNode = newVNode.lazy.view(newVNode.lazy)).lazy = newVNode.lazy),
        oldVNode)
      : newVNode

  const createVNode = (name, props, children, node, key, type) =>
    ({name, props, children, node, type, key})

  const recycleNode = node =>
    node.nodeType === TEXT_NODE
      ? createTextVNode(node.nodeValue, node)
      : createVNode(
          node.nodeName.toLowerCase(),
          EMPTY_OBJ,
          map.call(node.childNodes, recycleNode),
          node,
          null,
          RECYCLED_NODE
        )

  const shouldRestart = (a, b) => {
          if (a !== b) {
            for (var k in merge(a, b)) {
              if (a[k] !== b[k] && !isSameAction(a[k], b[k])) return true
              b[k] = a[k]
            }
          }
        }
      
      const patchSubs = (oldSubs, newSubs, dispatch) => {
          for (var
                i = 0, oldSub, newSub, subs = [];
            i < oldSubs.length || i < newSubs.length;
            i++
          ) {
            oldSub = oldSubs[i]
            newSub = newSubs[i]
            subs.push(
              newSub
                ? !oldSub ||
                  newSub.fn !== oldSub.fn ||
                  shouldRestart(newSub[0], oldSub[1])
                  ? [
                      newSub[0],
                      newSub[1],
                      newSub[0](dispatch)(newSub[1])(),
                      oldSub && oldSub[2]()
                    ]
                  : oldSub
                : oldSub && oldSub[2]()
            )
          }
          return subs
        }


  const app = props => () => {
      let state = {};
      let lock = false
      let subs = [];

      const listener = function(event) {
          dispatchEvent(event)(this.actions[event.type])();
      }
 
      const getState = () => state;

      const setState = newState => () => {
          if (state !== newState) {
              state = newState
              subs = patchSubs(subs, subscriptions(state), dispatch)
              if (view && !lock) defer(render, (lock = true))
          }
          return state
      }

      const {state: istate, view, subscriptions, dispatch, dispatchEvent, init, node: rootnode} = props(getState)(setState);

      let node = document.getElementById(rootnode);
      if (!node)
          return;
      let vdom = node && recycleNode(node);

      const render = () => {
          const {title, body} = view(state); 
          document.title = title;
          lock = false
          node = patch(
              node.parentNode,
              node,
              vdom,
              vdom = body,
              listener
          )
      }
      setState(istate)();
      init();
  }

  exports.app = app;
})(PS["Pha.Internal"] = PS["Pha.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Internal"] = $PS["Pha.Internal"] || {};
  var exports = $PS["Pha.Internal"];
  var $foreign = $PS["Pha.Internal"];
  exports["app"] = $foreign.app;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.App"] = $PS["Pha.App"] || {};
  var exports = $PS["Pha.App"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Pha_Internal = $PS["Pha.Internal"];
  var Run = $PS["Run"];                
  var App = function (x) {
      return x;
  };
  var attachTo = function (node) {
      return function (v) {
          var fn = function (getS) {
              return function (setS) {
                  var runAction = (function () {
                      var handleState = Data_Functor_Variant.onMatch()()()({
                          getState: function (v1) {
                              return function __do() {
                                  var a = getS();
                                  return v1.value0(a)();
                              };
                          },
                          setState: function (v1) {
                              return function __do() {
                                  var a = getS();
                                  setS(v1.value0(a))();
                                  return v1.value1();
                              };
                          }
                      })(v.interpreter);
                      return Run.runCont(handleState)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)));
                  })();
                  var init2 = runAction(v.init.value1);
                  var dispatch = function ($28) {
                      return runAction(v.update($28));
                  };
                  var dispatchEvent = function (ev) {
                      return function (handler) {
                          var v1 = handler(ev);
                          return function __do() {
                              v1.effect();
                              if (v1.msg instanceof Data_Maybe.Nothing) {
                                  return Data_Unit.unit;
                              };
                              if (v1.msg instanceof Data_Maybe.Just) {
                                  return dispatch(v1.msg.value0)();
                              };
                              throw new Error("Failed pattern match at Pha.App (line 73, column 13 - line 75, column 36): " + [ v1.msg.constructor.name ]);
                          };
                      };
                  };
                  return {
                      state: v.init.value0,
                      view: v.view,
                      node: node,
                      init: init2,
                      subscriptions: v.subscriptions,
                      dispatch: dispatch,
                      dispatchEvent: dispatchEvent
                  };
              };
          };
          return Pha_Internal.app(fn);
      };
  };
  var app = App;
  exports["app"] = app;
  exports["attachTo"] = attachTo;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Lens"] = $PS["Pha.Lens"] || {};
  var exports = $PS["Pha.Lens"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var lensVariant = function (lens) {
      return Data_Functor_Variant.onMatch()()()({
          getState: function (v) {
              return Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                  return "getState";
              }))(Pha_Update.functorGetState)(Data_Symbol.SProxy.value)(new Pha_Update.GetState((function () {
                  var $11 = Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget));
                  return function ($12) {
                      return v.value0($11($12));
                  };
              })()));
          },
          setState: function (v) {
              return Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                  return "setState";
              }))(Pha_Update.functorSetState)(Data_Symbol.SProxy.value)(new Pha_Update.SetState(Data_Lens_Setter.over(lens(Data_Profunctor_Strong.strongFn))(v.value0), v.value1));
          }
      })(Unsafe_Coerce.unsafeCoerce);
  };
  var updateOver = function (lens) {
      return function (v) {
          return Run.Run(Control_Monad_Free.hoistFree(lensVariant(function (dictStrong) {
              return lens(dictStrong);
          }))(v));
      };
  };
  exports["updateOver"] = updateOver;
})(PS);
(function(exports) {
  exports.makeSub = fn => d => [fn, d]

  exports.addEventListener = name => fn => () => {
      if (window && window.addEventListener) {
          listener = window.addEventListener(name, ev => fn(ev)());
          return () => target.removeEventListener(listener);
      } else {
          return () => null;
      }
  }
})(PS["Pha.Subs"] = PS["Pha.Subs"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Pha.Subs"] = $PS["Pha.Subs"] || {};
  var exports = $PS["Pha.Subs"];
  var $foreign = $PS["Pha.Subs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Foreign = $PS["Foreign"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var handleEvent = function (dispatch) {
      return function (decoder) {
          return function (ev) {
              var v = Control_Monad_Except.runExcept(decoder(Foreign.unsafeToForeign(ev)));
              if (v instanceof Data_Either.Right && v.value0 instanceof Data_Maybe.Just) {
                  return dispatch(v.value0.value0);
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var on$prime = function (name) {
      var fn = function (dispatch) {
          return function (decoder) {
              return $foreign.addEventListener(name)(handleEvent(dispatch)(decoder));
          };
      };
      return $foreign.makeSub(fn);
  };
  var on = function (name) {
      return function (decoder) {
          return on$prime(name)((function () {
              var $5 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create);
              return function ($6) {
                  return $5(decoder($6));
              };
          })());
      };
  };
  var onKeyDown = function (f) {
      return on$prime("keydown")((function () {
          var $7 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(f);
          return function ($8) {
              return $7(Pha_Events_Decoder.key($8));
          };
      })());
  };
  exports["on"] = on;
  exports["onKeyDown"] = onKeyDown;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Game_Baseball = $PS["Game.Baseball"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Chocolat = $PS["Game.Chocolat"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Dessin = $PS["Game.Dessin"];
  var Game_Dessin_Model = $PS["Game.Dessin.Model"];
  var Game_Effs = $PS["Game.Effs"];
  var Game_Eternal = $PS["Game.Eternal"];
  var Game_Eternal_Model = $PS["Game.Eternal.Model"];
  var Game_Frog = $PS["Game.Frog"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Game_Jetons = $PS["Game.Jetons"];
  var Game_Jetons_Model = $PS["Game.Jetons.Model"];
  var Game_Labete = $PS["Game.Labete"];
  var Game_Labete_Model = $PS["Game.Labete.Model"];
  var Game_Nim = $PS["Game.Nim"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Game_Noirblanc = $PS["Game.Noirblanc"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];
  var Game_Paths = $PS["Game.Paths"];
  var Game_Paths_Model = $PS["Game.Paths.Model"];
  var Game_Queens = $PS["Game.Queens"];
  var Game_Queens_Model = $PS["Game.Queens.Model"];
  var Game_Roue = $PS["Game.Roue"];
  var Game_Roue_Model = $PS["Game.Roue.Model"];
  var Game_Sansmot = $PS["Game.Sansmot"];
  var Game_Sansmot_Model = $PS["Game.Sansmot.Model"];
  var Game_Solitaire = $PS["Game.Solitaire"];
  var Game_Solitaire_Model = $PS["Game.Solitaire.Model"];
  var Game_Tiling = $PS["Game.Tiling"];
  var Game_Tiling_Model = $PS["Game.Tiling.Model"];
  var Game_Tricolor = $PS["Game.Tricolor"];
  var Game_Tricolor_Model = $PS["Game.Tricolor.Model"];
  var Game_Valise = $PS["Game.Valise"];
  var Game_Valise_Model = $PS["Game.Valise.Model"];
  var Pha = $PS["Pha"];
  var Pha_App = $PS["Pha.App"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var Pha_Lens = $PS["Pha.Lens"];
  var Pha_Subs = $PS["Pha.Subs"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Update = $PS["Pha.Update"];
  var Run = $PS["Run"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var BaseballMsg = (function () {
      function BaseballMsg(value0) {
          this.value0 = value0;
      };
      BaseballMsg.create = function (value0) {
          return new BaseballMsg(value0);
      };
      return BaseballMsg;
  })();
  var ChocolatMsg = (function () {
      function ChocolatMsg(value0) {
          this.value0 = value0;
      };
      ChocolatMsg.create = function (value0) {
          return new ChocolatMsg(value0);
      };
      return ChocolatMsg;
  })();
  var DessinMsg = (function () {
      function DessinMsg(value0) {
          this.value0 = value0;
      };
      DessinMsg.create = function (value0) {
          return new DessinMsg(value0);
      };
      return DessinMsg;
  })();
  var EternalMsg = (function () {
      function EternalMsg(value0) {
          this.value0 = value0;
      };
      EternalMsg.create = function (value0) {
          return new EternalMsg(value0);
      };
      return EternalMsg;
  })();
  var FrogMsg = (function () {
      function FrogMsg(value0) {
          this.value0 = value0;
      };
      FrogMsg.create = function (value0) {
          return new FrogMsg(value0);
      };
      return FrogMsg;
  })();
  var JetonsMsg = (function () {
      function JetonsMsg(value0) {
          this.value0 = value0;
      };
      JetonsMsg.create = function (value0) {
          return new JetonsMsg(value0);
      };
      return JetonsMsg;
  })();
  var LabeteMsg = (function () {
      function LabeteMsg(value0) {
          this.value0 = value0;
      };
      LabeteMsg.create = function (value0) {
          return new LabeteMsg(value0);
      };
      return LabeteMsg;
  })();
  var NimMsg = (function () {
      function NimMsg(value0) {
          this.value0 = value0;
      };
      NimMsg.create = function (value0) {
          return new NimMsg(value0);
      };
      return NimMsg;
  })();
  var NoirblancMsg = (function () {
      function NoirblancMsg(value0) {
          this.value0 = value0;
      };
      NoirblancMsg.create = function (value0) {
          return new NoirblancMsg(value0);
      };
      return NoirblancMsg;
  })();
  var PathsMsg = (function () {
      function PathsMsg(value0) {
          this.value0 = value0;
      };
      PathsMsg.create = function (value0) {
          return new PathsMsg(value0);
      };
      return PathsMsg;
  })();
  var QueensMsg = (function () {
      function QueensMsg(value0) {
          this.value0 = value0;
      };
      QueensMsg.create = function (value0) {
          return new QueensMsg(value0);
      };
      return QueensMsg;
  })();
  var RoueMsg = (function () {
      function RoueMsg(value0) {
          this.value0 = value0;
      };
      RoueMsg.create = function (value0) {
          return new RoueMsg(value0);
      };
      return RoueMsg;
  })();
  var SansmotMsg = (function () {
      function SansmotMsg(value0) {
          this.value0 = value0;
      };
      SansmotMsg.create = function (value0) {
          return new SansmotMsg(value0);
      };
      return SansmotMsg;
  })();
  var SolitaireMsg = (function () {
      function SolitaireMsg(value0) {
          this.value0 = value0;
      };
      SolitaireMsg.create = function (value0) {
          return new SolitaireMsg(value0);
      };
      return SolitaireMsg;
  })();
  var ValiseMsg = (function () {
      function ValiseMsg(value0) {
          this.value0 = value0;
      };
      ValiseMsg.create = function (value0) {
          return new ValiseMsg(value0);
      };
      return ValiseMsg;
  })();
  var TilingMsg = (function () {
      function TilingMsg(value0) {
          this.value0 = value0;
      };
      TilingMsg.create = function (value0) {
          return new TilingMsg(value0);
      };
      return TilingMsg;
  })();
  var TricolorMsg = (function () {
      function TricolorMsg(value0) {
          this.value0 = value0;
      };
      TricolorMsg.create = function (value0) {
          return new TricolorMsg(value0);
      };
      return TricolorMsg;
  })();
  var OnKeyDown = (function () {
      function OnKeyDown(value0) {
          this.value0 = value0;
      };
      OnKeyDown.create = function (value0) {
          return new OnKeyDown(value0);
      };
      return OnKeyDown;
  })();
  var OnHashChange = (function () {
      function OnHashChange() {

      };
      OnHashChange.value = new OnHashChange();
      return OnHashChange;
  })();
  var state = {
      baseball: Game_Baseball_Model.istate,
      chocolat: Game_Chocolat_Model.istate,
      dessin: Game_Dessin_Model.istate,
      eternal: Game_Eternal_Model.istate,
      frog: Game_Frog_Model.istate,
      jetons: Game_Jetons_Model.istate,
      labete: Game_Labete_Model.istate,
      nim: Game_Nim_Model.istate,
      noirblanc: Game_Noirblanc_Model.istate,
      paths: Game_Paths_Model.istate,
      queens: Game_Queens_Model.istate,
      roue: Game_Roue_Model.istate,
      sansmot: Game_Sansmot_Model.istate,
      solitaire: Game_Solitaire_Model.istate,
      tiling: Game_Tiling_Model.istate,
      tricolor: Game_Tricolor_Model.istate,
      valise: Game_Valise_Model.istate,
      location: ""
  };
  var gameWrap = function (core) {
      return function (map) {
          return function (msgmap) {
              return {
                  core: core,
                  map: map,
                  msgmap: msgmap
              };
          };
      };
  };
  var games = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("baseball", gameWrap(Game_Baseball.game)(function (v) {
      return v.baseball;
  })(BaseballMsg.create)), new Data_Tuple.Tuple("chocolat", gameWrap(Game_Chocolat.game)(function (v) {
      return v.chocolat;
  })(ChocolatMsg.create)), new Data_Tuple.Tuple("dessin", gameWrap(Game_Dessin.game)(function (v) {
      return v.dessin;
  })(DessinMsg.create)), new Data_Tuple.Tuple("eternal", gameWrap(Game_Eternal.game)(function (v) {
      return v.eternal;
  })(EternalMsg.create)), new Data_Tuple.Tuple("frog", gameWrap(Game_Frog.game)(function (v) {
      return v.frog;
  })(FrogMsg.create)), new Data_Tuple.Tuple("jetons", gameWrap(Game_Jetons.game)(function (v) {
      return v.jetons;
  })(JetonsMsg.create)), new Data_Tuple.Tuple("labete", gameWrap(Game_Labete.game)(function (v) {
      return v.labete;
  })(LabeteMsg.create)), new Data_Tuple.Tuple("nim", gameWrap(Game_Nim.game)(function (v) {
      return v.nim;
  })(NimMsg.create)), new Data_Tuple.Tuple("noirblanc", gameWrap(Game_Noirblanc.game)(function (v) {
      return v.noirblanc;
  })(NoirblancMsg.create)), new Data_Tuple.Tuple("paths", gameWrap(Game_Paths.game)(function (v) {
      return v.paths;
  })(PathsMsg.create)), new Data_Tuple.Tuple("queens", gameWrap(Game_Queens.game)(function (v) {
      return v.queens;
  })(QueensMsg.create)), new Data_Tuple.Tuple("roue", gameWrap(Game_Roue.game)(function (v) {
      return v.roue;
  })(RoueMsg.create)), new Data_Tuple.Tuple("sansmot", gameWrap(Game_Sansmot.game)(function (v) {
      return v.sansmot;
  })(SansmotMsg.create)), new Data_Tuple.Tuple("solitaire", gameWrap(Game_Solitaire.game)(function (v) {
      return v.solitaire;
  })(SolitaireMsg.create)), new Data_Tuple.Tuple("tiling", gameWrap(Game_Tiling.game)(function (v) {
      return v.tiling;
  })(TilingMsg.create)), new Data_Tuple.Tuple("tricolor", gameWrap(Game_Tricolor.game)(function (v) {
      return v.tricolor;
  })(TricolorMsg.create)), new Data_Tuple.Tuple("valise", gameWrap(Game_Valise.game)(function (v) {
      return v.valise;
  })(ValiseMsg.create)) ]);
  var gameRun = Unsafe_Coerce.unsafeCoerce;
  var extractLocation = function (url) {
      return function (defaultValue) {
          return Data_Maybe.maybe(defaultValue)(function (i) {
              return Data_String_CodePoints.drop(i + 1 | 0)(url);
          })(Data_String_CodePoints.indexOf("#")(url));
      };
  };
  var hashChange = Control_Bind.bind(Run.bindRun)(Game_Effs.getLocation)(function (loc) {
      var location = extractLocation(loc.hash)("valise");
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Update.setState(function (v) {
          return {
              location: location,
              valise: v.valise,
              baseball: v.baseball,
              chocolat: v.chocolat,
              dessin: v.dessin,
              eternal: v.eternal,
              frog: v.frog,
              jetons: v.jetons,
              labete: v.labete,
              nim: v.nim,
              noirblanc: v.noirblanc,
              paths: v.paths,
              queens: v.queens,
              roue: v.roue,
              sansmot: v.sansmot,
              solitaire: v.solitaire,
              tiling: v.tiling,
              tricolor: v.tricolor
          };
      }))(function () {
          var $94 = location === "valise";
          if ($94) {
              return Pha_Lens.updateOver(function (dictStrong) {
                  return Data_Lens_Lens.lens(function (v) {
                      return v.valise;
                  })(function (v) {
                      return function (v1) {
                          return {
                              valise: v1,
                              location: v.location,
                              baseball: v.baseball,
                              chocolat: v.chocolat,
                              dessin: v.dessin,
                              eternal: v.eternal,
                              frog: v.frog,
                              jetons: v.jetons,
                              labete: v.labete,
                              nim: v.nim,
                              noirblanc: v.noirblanc,
                              paths: v.paths,
                              queens: v.queens,
                              roue: v.roue,
                              sansmot: v.sansmot,
                              solitaire: v.solitaire,
                              tiling: v.tiling,
                              tricolor: v.tricolor
                          };
                      };
                  })(dictStrong);
              })(Game_Valise_Model.enterA);
          };
          return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
      });
  });
  var callByName = function (name) {
      return function ($$default) {
          return function (f) {
              var v = Data_Map_Internal.lookup(Data_Ord.ordString)(name)(games);
              if (v instanceof Data_Maybe.Nothing) {
                  return $$default;
              };
              if (v instanceof Data_Maybe.Just) {
                  return gameRun(f)(v.value0);
              };
              throw new Error("Failed pattern match at Main (line 144, column 29 - line 146, column 61): " + [ v.constructor.name ]);
          };
      };
  };
  var update = function (v) {
      if (v instanceof BaseballMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.baseball;
              })(function (v1) {
                  return function (v2) {
                      return {
                          baseball: v2,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Baseball_Model.update(v.value0));
      };
      if (v instanceof ChocolatMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.chocolat;
              })(function (v1) {
                  return function (v2) {
                      return {
                          chocolat: v2,
                          baseball: v1.baseball,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Chocolat_Model.update(v.value0));
      };
      if (v instanceof DessinMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.dessin;
              })(function (v1) {
                  return function (v2) {
                      return {
                          dessin: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Dessin_Model.update(v.value0));
      };
      if (v instanceof EternalMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.eternal;
              })(function (v1) {
                  return function (v2) {
                      return {
                          eternal: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Eternal_Model.update(v.value0));
      };
      if (v instanceof FrogMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.frog;
              })(function (v1) {
                  return function (v2) {
                      return {
                          frog: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Frog_Model.update(v.value0));
      };
      if (v instanceof JetonsMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.jetons;
              })(function (v1) {
                  return function (v2) {
                      return {
                          jetons: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Jetons_Model.update(v.value0));
      };
      if (v instanceof LabeteMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.labete;
              })(function (v1) {
                  return function (v2) {
                      return {
                          labete: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Labete_Model.update(v.value0));
      };
      if (v instanceof NimMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.nim;
              })(function (v1) {
                  return function (v2) {
                      return {
                          nim: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Nim_Model.update(v.value0));
      };
      if (v instanceof NoirblancMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.noirblanc;
              })(function (v1) {
                  return function (v2) {
                      return {
                          noirblanc: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Noirblanc_Model.update(v.value0));
      };
      if (v instanceof PathsMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.paths;
              })(function (v1) {
                  return function (v2) {
                      return {
                          paths: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Paths_Model.update(v.value0));
      };
      if (v instanceof QueensMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.queens;
              })(function (v1) {
                  return function (v2) {
                      return {
                          queens: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Queens_Model.update(v.value0));
      };
      if (v instanceof RoueMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.roue;
              })(function (v1) {
                  return function (v2) {
                      return {
                          roue: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Roue_Model.update(v.value0));
      };
      if (v instanceof SansmotMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.sansmot;
              })(function (v1) {
                  return function (v2) {
                      return {
                          sansmot: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Sansmot_Model.update(v.value0));
      };
      if (v instanceof SolitaireMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.solitaire;
              })(function (v1) {
                  return function (v2) {
                      return {
                          solitaire: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Solitaire_Model.update(v.value0));
      };
      if (v instanceof TilingMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.tiling;
              })(function (v1) {
                  return function (v2) {
                      return {
                          tiling: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tricolor: v1.tricolor,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Tiling_Model.update(v.value0));
      };
      if (v instanceof TricolorMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.tricolor;
              })(function (v1) {
                  return function (v2) {
                      return {
                          tricolor: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          valise: v1.valise
                      };
                  };
              })(dictStrong);
          })(Game_Tricolor_Model.update(v.value0));
      };
      if (v instanceof ValiseMsg) {
          return Pha_Lens.updateOver(function (dictStrong) {
              return Data_Lens_Lens.lens(function (v1) {
                  return v1.valise;
              })(function (v1) {
                  return function (v2) {
                      return {
                          valise: v2,
                          baseball: v1.baseball,
                          chocolat: v1.chocolat,
                          dessin: v1.dessin,
                          eternal: v1.eternal,
                          frog: v1.frog,
                          jetons: v1.jetons,
                          labete: v1.labete,
                          location: v1.location,
                          nim: v1.nim,
                          noirblanc: v1.noirblanc,
                          paths: v1.paths,
                          queens: v1.queens,
                          roue: v1.roue,
                          sansmot: v1.sansmot,
                          solitaire: v1.solitaire,
                          tiling: v1.tiling,
                          tricolor: v1.tricolor
                      };
                  };
              })(dictStrong);
          })(Game_Valise_Model.update(v.value0));
      };
      if (v instanceof OnKeyDown) {
          return Control_Bind.bind(Run.bindRun)(Pha_Update.getState)(function (st) {
              return callByName(st.location)(Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit))(function (game) {
                  var v1 = game.core.onKeydown(v.value0);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return update(game.msgmap(v1.value0));
                  };
                  throw new Error("Failed pattern match at Main (line 180, column 13 - line 182, column 52): " + [ v1.constructor.name ]);
              });
          });
      };
      if (v instanceof OnHashChange) {
          return hashChange;
      };
      throw new Error("Failed pattern match at Main (line 159, column 1 - line 159, column 37): " + [ v.constructor.name ]);
  };
  var init = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Data_Foldable.for_(Run.applicativeRun)(Data_List_Types.foldableList)(Data_Map_Internal.values(games))(gameRun(function (game) {
      if (game.core.init instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
      };
      if (game.core.init instanceof Data_Maybe.Just) {
          return update(game.msgmap(game.core.init.value0));
      };
      throw new Error("Failed pattern match at Main (line 188, column 25 - line 190, column 60): " + [ game.core.init.constructor.name ]);
  })))(function () {
      return hashChange;
  });
  var viewGame = function (st) {
      return callByName(st.location)(Pha.emptyNode)(function (game) {
          return Data_Functor.mapFlipped(Pha.functorVDom)(game.core.view(game.map(st)))(game.msgmap);
      });
  };
  var view = function (st) {
      return {
          title: "Valise MaM",
          body: Pha_Elements.div([ Pha.key(st.location), Pha.class_("main-main-container"), Pha.class_((function () {
              var $120 = st.location === "valise";
              if ($120) {
                  return "valise";
              };
              return "game";
          })()) ])([ Pha.when(st.location !== "valise")(function (v) {
              return Pha_Elements.a([ Pha.class_("main-minivalise-link"), Pha_Attributes.href("#valise") ])([ Pha_Svg.svg([ Pha_Svg.width("100%"), Pha_Svg.height("100%") ])([ Pha_Svg.use("#valise")([  ]) ]) ]);
          }), viewGame(st) ])
      };
  };
  var main = Pha_App.attachTo("root")(Pha_App.app({
      init: new Data_Tuple.Tuple(state, init),
      view: view,
      update: update,
      subscriptions: Data_Function["const"]([ Pha_Subs.onKeyDown(function ($121) {
          return Data_Maybe.Just.create(OnKeyDown.create($121));
      }), Pha_Subs.on("hashchange")(Pha_Events_Decoder.always(OnHashChange.value)) ]),
      interpreter: Data_Functor_Variant.match()()()({
          delay: Pha_Effects_Delay.interpretDelay,
          rng: Pha_Effects_Random.interpretRng,
          location: Game_Effs.interpretLocation
      })
  }));
  exports["extractLocation"] = extractLocation;
  exports["state"] = state;
  exports["BaseballMsg"] = BaseballMsg;
  exports["ChocolatMsg"] = ChocolatMsg;
  exports["DessinMsg"] = DessinMsg;
  exports["EternalMsg"] = EternalMsg;
  exports["FrogMsg"] = FrogMsg;
  exports["JetonsMsg"] = JetonsMsg;
  exports["LabeteMsg"] = LabeteMsg;
  exports["NimMsg"] = NimMsg;
  exports["NoirblancMsg"] = NoirblancMsg;
  exports["PathsMsg"] = PathsMsg;
  exports["QueensMsg"] = QueensMsg;
  exports["RoueMsg"] = RoueMsg;
  exports["SansmotMsg"] = SansmotMsg;
  exports["SolitaireMsg"] = SolitaireMsg;
  exports["ValiseMsg"] = ValiseMsg;
  exports["TilingMsg"] = TilingMsg;
  exports["TricolorMsg"] = TricolorMsg;
  exports["OnKeyDown"] = OnKeyDown;
  exports["OnHashChange"] = OnHashChange;
  exports["gameWrap"] = gameWrap;
  exports["gameRun"] = gameRun;
  exports["games"] = games;
  exports["callByName"] = callByName;
  exports["hashChange"] = hashChange;
  exports["update"] = update;
  exports["init"] = init;
  exports["view"] = view;
  exports["viewGame"] = viewGame;
  exports["main"] = main;
})(PS);
PS["Main"].main();