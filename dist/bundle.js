// Generated by purs bundle 0.13.5
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  exports["Alt"] = Alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["unlessM"] = unlessM;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $98 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($99) {
                      return $98(Data_Either.Left.create($99));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $100 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($101) {
              return ExceptT($100(Data_Either.Right.create($101)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $110 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($111) {
              return ExceptT($110(Data_Either.Left.create($111)));
          };
      })());
  };
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
  exports["all"] = all;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["plusList"] = plusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };    
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  exports["null"] = $$null;
  exports["last"] = last;
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Functor = $PS["Data.Functor"];                  
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  var substFree = function (k) {
      var go = function (f) {
          var v = toView(f);
          if (v instanceof Return) {
              return Control_Applicative.pure(freeApplicative)(v.value0);
          };
          if (v instanceof Bind) {
              return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [ v.constructor.name ]);
      };
      return go;
  };
  var hoistFree = function (k) {
      return substFree(function ($125) {
          return liftF(k($125));
      });
  };
  exports["liftF"] = liftF;
  exports["hoistFree"] = hoistFree;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["applicativeST"] = applicativeST;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.poke = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var v = $foreign.thaw(xs)();
              var v1 = f(v)();
              return $foreign.unsafeFreeze(v)();
          };
      };
  };
  exports["withArray"] = withArray;
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAtIndices = function (dictFoldable) {
      return function (us) {
          return function (xs) {
              return Data_Array_ST.withArray(function (res) {
                  return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                      return Data_Array_ST.poke(v.value0)(v.value1)(res);
                  })(us);
              })(xs)();
          };
      };
  };
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $123 = Data_Maybe.maybe([  ])(singleton);
          return function ($124) {
              return $123(f($124));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["singleton"] = singleton;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["index"] = index;
  exports["insertAt"] = insertAt;
  exports["updateAt"] = updateAt;
  exports["updateAtIndices"] = updateAtIndices;
  exports["modifyAt"] = modifyAt;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sortWith"] = sortWith;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var singleton = function ($49) {
      return unsafeFromArray(Data_Array.singleton($49));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
  };                                         
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $68 = adaptAny(f);
      return function ($69) {
          return unsafeFromArray($68($69));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  exports["fromArray"] = fromArray;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];                                          
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (f) {
      return function (z) {
          var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($54) {
              return $52($53($54));
          };
      };
  });
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  var allWithIndex = function (dictFoldableWithIndex) {
      return function (dictHeytingAlgebra) {
          return function (t) {
              var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
              var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                  var $67 = t(i);
                  return function ($68) {
                      return Data_Monoid_Conj.Conj($67($68));
                  };
              });
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  exports["allWithIndex"] = allWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Functor.Variant"] = $PS["Data.Functor.Variant"] || {};
  var exports = $PS["Data.Functor.Variant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var onMatch = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  return function (value) {
                      return {
                          type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                          value: value,
                          map: Data_Functor.map(dictFunctor)
                      };
                  };
              };
          };
      };
  };
  var functorVariantF = new Data_Functor.Functor(function (f) {
      return function (a) {
          return {
              type: a.type,
              value: a.map(f)(a.value),
              map: a.map
          };
      };
  });
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
  }; 
  var match = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["onMatch"] = onMatch;
  exports["match"] = match;
  exports["functorVariantF"] = functorVariantF;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";            

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Int.Bits"] = $PS["Data.Int.Bits"] || {};
  var exports = $PS["Data.Int.Bits"];
  var $foreign = $PS["Data.Int.Bits"];
  exports["xor"] = $foreign.xor;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["Strong"] = Strong;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.Internal.Wander"] = $PS["Data.Lens.Internal.Wander"] || {};
  var exports = $PS["Data.Lens.Internal.Wander"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  };
  var wanderFunction = new Wander(function () {
      return Data_Profunctor_Choice.choiceFn;
  }, function () {
      return Data_Profunctor_Strong.strongFn;
  }, function (t) {
      return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
  });
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["wanderFunction"] = wanderFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];                          
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["delete"] = $$delete;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var Index = function (ix) {
      this.ix = ix;
  };
  var ix = function (dict) {
      return dict.ix;
  }; 
  var indexMap = function (dictOrd) {
      return new Index(function (k) {
          return function (dictWander) {
              return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                  return function (coalg) {
                      return function (m) {
                          return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(m))((function () {
                              var $27 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                                  return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                              });
                              return function ($28) {
                                  return $27(coalg($28));
                              };
                          })())(Data_Map_Internal.lookup(dictOrd)(k)(m));
                      };
                  };
              });
          };
      });
  }; 
  var indexArray = new Index(function (n) {
      return function (dictWander) {
          return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return function (coalg) {
                  return function (xs) {
                      return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(xs))((function () {
                          var $31 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (x) {
                              return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(n)(x)(xs));
                          });
                          return function ($32) {
                              return $31(coalg($32));
                          };
                      })())(Data_Array.index(xs)(n));
                  };
              };
          });
      };
  });
  exports["ix"] = ix;
  exports["indexArray"] = indexArray;
  exports["indexMap"] = indexMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.At"] = $PS["Data.Lens.At"] || {};
  var exports = $PS["Data.Lens.At"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var At = function (Index0, at) {
      this.Index0 = Index0;
      this.at = at;
  }; 
  var atMap = function (dictOrd) {
      return new At(function () {
          return Data_Lens_Index.indexMap(dictOrd);
      }, function (k) {
          return function (dictStrong) {
              return Data_Lens_Lens.lens(Data_Map_Internal.lookup(dictOrd)(k))(function (m) {
                  return Data_Maybe.maybe(Data_Map_Internal["delete"](dictOrd)(k)(m))(function (v) {
                      return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                  });
              })(dictStrong);
          };
      });
  }; 
  var at = function (dict) {
      return dict.at;
  };
  exports["at"] = at;
  exports["atMap"] = atMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  exports["newtypeForget"] = newtypeForget;
  exports["strongForget"] = strongForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Data_Function = $PS["Data.Function"];          
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                         
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
})(PS);
(function(exports) {
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var fail = (function () {
      var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($108) {
          return $107(Data_List_NonEmpty.singleton($108));
      };
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  exports["TypeMismatch"] = TypeMismatch;
  exports["readBoolean"] = readBoolean;
  exports["readNumber"] = readNumber;
  exports["fail"] = fail;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  exports["readProp"] = readProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Run"] = $PS["Run"] || {};
  var exports = $PS["Run"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Newtype = $PS["Data.Newtype"];                  
  var Run = function (x) {
      return x;
  };
  var newtypeRun = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Run);
  var resume = function (k1) {
      return function (k2) {
          var $45 = Control_Monad_Free["resume'"](function (x) {
              return function (f) {
                  return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(function ($48) {
                      return Run(f($48));
                  })(x));
              };
          })(k2);
          var $46 = Data_Newtype.unwrap(newtypeRun);
          return function ($47) {
              return $45($46($47));
          };
      };
  };
  var runCont = function (k1) {
      return function (k2) {
          var loop = resume(function (b) {
              return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(loop)(b));
          })(k2);
          return loop;
      };
  };  
  var monadRun = Control_Monad_Free.freeMonad;
  var lift = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  var $54 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(p);
                  return function ($55) {
                      return Run(Control_Monad_Free.liftF($54($55)));
                  };
              };
          };
      };
  };
  var functorRun = Control_Monad_Free.freeFunctor;
  var bindRun = Control_Monad_Free.freeBind;
  var applyRun = Control_Monad_Free.freeApply;
  var applicativeRun = Control_Monad_Free.freeApplicative;
  exports["Run"] = Run;
  exports["lift"] = lift;
  exports["runCont"] = runCont;
  exports["functorRun"] = functorRun;
  exports["applyRun"] = applyRun;
  exports["applicativeRun"] = applicativeRun;
  exports["bindRun"] = bindRun;
  exports["monadRun"] = monadRun;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Action"] = $PS["Pha.Action"] || {};
  var exports = $PS["Pha.Action"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Run = $PS["Run"];                
  var SetState = (function () {
      function SetState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetState.create = function (value0) {
          return function (value1) {
              return new SetState(value0, value1);
          };
      };
      return SetState;
  })();
  var GetState = (function () {
      function GetState(value0) {
          this.value0 = value0;
      };
      GetState.create = function (value0) {
          return new GetState(value0);
      };
      return GetState;
  })();
  var functorSetState = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new SetState(m.value0, f(m.value1));
      };
  });
  var setState = function (fn) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "setState";
      }))(functorSetState)(Data_Symbol.SProxy.value)(new SetState(fn, Data_Unit.unit));
  };
  var functorGetState = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new GetState(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
      };
  });
  var getState = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "getState";
  }))(functorGetState)(Data_Symbol.SProxy.value)(new GetState(Control_Category.identity(Control_Category.categoryFn)));
  exports["getState"] = getState;
  exports["setState"] = setState;
  exports["GetState"] = GetState;
  exports["SetState"] = SetState;
  exports["functorGetState"] = functorGetState;
  exports["functorSetState"] = functorSetState;
})(PS);
(function(exports) {
  exports.setTimeout = ms => fn => () => setTimeout (fn, ms);
})(PS["Pha.Effects.Delay"] = PS["Pha.Effects.Delay"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Effects.Delay"] = $PS["Pha.Effects.Delay"] || {};
  var exports = $PS["Pha.Effects.Delay"];
  var $foreign = $PS["Pha.Effects.Delay"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Run = $PS["Run"];                
  var Delay = (function () {
      function Delay(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Delay.create = function (value0) {
          return function (value1) {
              return new Delay(value0, value1);
          };
      };
      return Delay;
  })();
  var interpretDelay = function (v) {
      return $foreign.setTimeout(v.value0)(v.value1);
  };
  var functorDelay = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Delay(m.value0, f(m.value1));
      };
  });
  var delay = function (ms) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "delay";
      }))(functorDelay)(Data_Symbol.SProxy.value)(new Delay(ms, Data_Unit.unit));
  };
  exports["delay"] = delay;
  exports["interpretDelay"] = interpretDelay;
})(PS);
(function(exports) {
  exports.mathRandom = Math.random;
})(PS["Pha.Effects.Random"] = PS["Pha.Effects.Random"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Effects.Random"] = $PS["Pha.Effects.Random"] || {};
  var exports = $PS["Pha.Effects.Random"];
  var $foreign = $PS["Pha.Effects.Random"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Run = $PS["Run"];                
  var RngInt = (function () {
      function RngInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RngInt.create = function (value0) {
          return function (value1) {
              return new RngInt(value0, value1);
          };
      };
      return RngInt;
  })();
  var RngNumber = (function () {
      function RngNumber(value0) {
          this.value0 = value0;
      };
      RngNumber.create = function (value0) {
          return new RngNumber(value0);
      };
      return RngNumber;
  })();
  var interpretRng = function (v) {
      if (v instanceof RngInt) {
          return function __do() {
              var r = $foreign.mathRandom();
              return v.value1(Data_Int.floor(r * Data_Int.toNumber(v.value0)))();
          };
      };
      if (v instanceof RngNumber) {
          return Control_Bind.bind(Effect.bindEffect)($foreign.mathRandom)(v.value0);
      };
      throw new Error("Failed pattern match at Pha.Effects.Random (line 39, column 1 - line 39, column 49): " + [ v.constructor.name ]);
  };
  var functorRng = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof RngInt) {
              return new RngInt(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
          };
          if (m instanceof RngNumber) {
              return new RngNumber(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
          };
          throw new Error("Failed pattern match at Pha.Effects.Random (line 12, column 1 - line 12, column 42): " + [ m.constructor.name ]);
      };
  });
  var randomInt = function (n) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "rng";
      }))(functorRng)(Data_Symbol.SProxy.value)(new RngInt(n, Control_Category.identity(Control_Category.categoryFn)));
  };                                                                                                   
  var randomPick = function (t) {
      return Data_Functor.map(Run.functorRun)(Data_Array.index(t))(randomInt(Data_Array.length(t)));
  };
  var shuffle = function (array) {
      return Control_Bind.bind(Run.bindRun)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Run.applicativeRun)(Data_Array.mapWithIndex(function (i) {
          return function (x) {
              return Data_Functor.map(Run.functorRun)(Data_Tuple.Tuple.create(x))(randomInt(i + 1 | 0));
          };
      })(array)))(function (v) {
          return Control_Applicative.pure(Run.applicativeRun)(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (t) {
              return function (v1) {
                  return Data_Maybe.fromMaybe([  ])(Data_Array.insertAt(v1.value1)(v1.value0)(t));
              };
          })([  ])(v));
      });
  };
  exports["randomInt"] = randomInt;
  exports["shuffle"] = shuffle;
  exports["randomPick"] = randomPick;
  exports["interpretRng"] = interpretRng;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Core"] = $PS["Game.Core"] || {};
  var exports = $PS["Game.Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Unit = $PS["Data.Unit"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Run = $PS["Run"];                
  var Turn1 = (function () {
      function Turn1() {

      };
      Turn1.value = new Turn1();
      return Turn1;
  })();
  var Turn2 = (function () {
      function Turn2() {

      };
      Turn2.value = new Turn2();
      return Turn2;
  })();
  var SizeLimit = (function () {
      function SizeLimit(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      SizeLimit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new SizeLimit(value0, value1, value2, value3);
                  };
              };
          };
      };
      return SizeLimit;
  })();
  var SoloMode = (function () {
      function SoloMode() {

      };
      SoloMode.value = new SoloMode();
      return SoloMode;
  })();
  var RandomMode = (function () {
      function RandomMode() {

      };
      RandomMode.value = new RandomMode();
      return RandomMode;
  })();
  var ExpertMode = (function () {
      function ExpertMode() {

      };
      ExpertMode.value = new ExpertMode();
      return ExpertMode;
  })();
  var DuelMode = (function () {
      function DuelMode() {

      };
      DuelMode.value = new DuelMode();
      return DuelMode;
  })();
  var Rules = (function () {
      function Rules() {

      };
      Rules.value = new Rules();
      return Rules;
  })();
  var NoDialog = (function () {
      function NoDialog() {

      };
      NoDialog.value = new NoDialog();
      return NoDialog;
  })();
  var ConfirmNewGameDialog = (function () {
      function ConfirmNewGameDialog(value0) {
          this.value0 = value0;
      };
      ConfirmNewGameDialog.create = function (value0) {
          return new ConfirmNewGameDialog(value0);
      };
      return ConfirmNewGameDialog;
  })();
  var ScoreDialog = (function () {
      function ScoreDialog() {

      };
      ScoreDialog.value = new ScoreDialog();
      return ScoreDialog;
  })();
  var CustomDialog = (function () {
      function CustomDialog() {

      };
      CustomDialog.value = new CustomDialog();
      return CustomDialog;
  })();
  var State = (function () {
      function State(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      State.create = function (value0) {
          return function (value1) {
              return new State(value0, value1);
          };
      };
      return State;
  })();
  var Undo = (function () {
      function Undo() {

      };
      Undo.value = new Undo();
      return Undo;
  })();
  var Redo = (function () {
      function Redo() {

      };
      Redo.value = new Redo();
      return Redo;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var ToggleHelp = (function () {
      function ToggleHelp() {

      };
      ToggleHelp.value = new ToggleHelp();
      return ToggleHelp;
  })();
  var SetMode = (function () {
      function SetMode(value0) {
          this.value0 = value0;
      };
      SetMode.create = function (value0) {
          return new SetMode(value0);
      };
      return SetMode;
  })();
  var SetGridSize = (function () {
      function SetGridSize(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SetGridSize.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SetGridSize(value0, value1, value2);
              };
          };
      };
      return SetGridSize;
  })();
  var SetCustomSize = (function () {
      function SetCustomSize(value0) {
          this.value0 = value0;
      };
      SetCustomSize.create = function (value0) {
          return new SetCustomSize(value0);
      };
      return SetCustomSize;
  })();
  var SetNoDialog = (function () {
      function SetNoDialog() {

      };
      SetNoDialog.value = new SetNoDialog();
      return SetNoDialog;
  })();
  var SetRulesDialog = (function () {
      function SetRulesDialog() {

      };
      SetRulesDialog.value = new SetRulesDialog();
      return SetRulesDialog;
  })();
  var ConfirmNewGame = (function () {
      function ConfirmNewGame() {

      };
      ConfirmNewGame.value = new ConfirmNewGame();
      return ConfirmNewGame;
  })();
  var SetPointer = (function () {
      function SetPointer(value0) {
          this.value0 = value0;
      };
      SetPointer.create = function (value0) {
          return new SetPointer(value0);
      };
      return SetPointer;
  })();
  var ComputerStarts = (function () {
      function ComputerStarts() {

      };
      ComputerStarts.value = new ComputerStarts();
      return ComputerStarts;
  })();
  var MsgWithCore = function (core) {
      this.core = core;
  };
  var Game = function (computerMove, initialPosition, isLevelFinished, onNewGame, play, sizeLimit, updateScore) {
      this.computerMove = computerMove;
      this.initialPosition = initialPosition;
      this.isLevelFinished = isLevelFinished;
      this.onNewGame = onNewGame;
      this.play = play;
      this.sizeLimit = sizeLimit;
      this.updateScore = updateScore;
  };
  var TwoPlayersGame = function (Game0, isLosingPosition, possibleMoves) {
      this.Game0 = Game0;
      this.isLosingPosition = isLosingPosition;
      this.possibleMoves = possibleMoves;
  };
  var updateScore = function (dict) {
      return dict.updateScore;
  };
  var sizeLimit = function (dict) {
      return dict.sizeLimit;
  };
  var possibleMoves = function (dict) {
      return dict.possibleMoves;
  };
  var play = function (dict) {
      return dict.play;
  };
  var oppositeTurn = function (v) {
      if (v instanceof Turn1) {
          return Turn2.value;
      };
      return Turn1.value;
  };
  var onNewGame = function (dict) {
      return dict.onNewGame;
  };
  var isLosingPosition = function (dict) {
      return dict.isLosingPosition;
  };
  var isLevelFinished = function (dict) {
      return dict.isLevelFinished;
  };
  var initialPosition = function (dict) {
      return dict.initialPosition;
  };
  var eqTurn = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Turn1 && y instanceof Turn1) {
              return true;
          };
          if (x instanceof Turn2 && y instanceof Turn2) {
              return true;
          };
          return false;
      };
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SoloMode && y instanceof SoloMode) {
              return true;
          };
          if (x instanceof RandomMode && y instanceof RandomMode) {
              return true;
          };
          if (x instanceof ExpertMode && y instanceof ExpertMode) {
              return true;
          };
          if (x instanceof DuelMode && y instanceof DuelMode) {
              return true;
          };
          return false;
      };
  });
  var defaultSizeLimit = function (v) {
      return new SizeLimit(0, 0, 0, 0);
  };
  var defaultOnNewGame = Control_Applicative.pure(Run.applicativeRun);
  var defaultCoreState = function (p) {
      return {
          position: p,
          history: Data_List_Types.Nil.value,
          redoHistory: Data_List_Types.Nil.value,
          dialog: Rules.value,
          turn: Turn1.value,
          nbRows: 0,
          nbColumns: 0,
          customSize: false,
          help: false,
          mode: SoloMode.value,
          locked: false,
          showWin: false,
          scores: Data_Map_Internal.empty,
          pointer: Data_Maybe.Nothing.value
      };
  };
  var genState = function (p) {
      return function (f) {
          return function (ext) {
              return new State(f(defaultCoreState(p)), ext);
          };
      };
  };
  var core = function (dict) {
      return dict.core;
  };
  var computerMove = function (dict) {
      return dict.computerMove;
  };
  var canPlay = function (dictGame) {
      return function (st) {
          return function (mov) {
              return Data_Maybe.isJust(play(dictGame)(st)(mov));
          };
      };
  };
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (e) {
              return new State(v.value0, e);
          };
      })(dictStrong);
  };
  var _core = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value0;
      })(function (v) {
          return function (c) {
              return new State(c, v.value1);
          };
      })(dictStrong);
  };
  var _customSize = function (dictStrong) {
      var $188 = _core(dictStrong);
      var $189 = Data_Lens_Lens.lens(function (v) {
          return v.customSize;
      })(function (v) {
          return function (v1) {
              return {
                  customSize: v1,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($190) {
          return $188($189($190));
      };
  };
  var _dialog = function (dictStrong) {
      var $191 = _core(dictStrong);
      var $192 = Data_Lens_Lens.lens(function (v) {
          return v.dialog;
      })(function (v) {
          return function (v1) {
              return {
                  dialog: v1,
                  customSize: v.customSize,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($193) {
          return $191($192($193));
      };
  };
  var _help = function (dictStrong) {
      var $194 = _core(dictStrong);
      var $195 = Data_Lens_Lens.lens(function (v) {
          return v.help;
      })(function (v) {
          return function (v1) {
              return {
                  help: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($196) {
          return $194($195($196));
      };
  };
  var _history = function (dictStrong) {
      var $197 = _core(dictStrong);
      var $198 = Data_Lens_Lens.lens(function (v) {
          return v.history;
      })(function (v) {
          return function (v1) {
              return {
                  history: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($199) {
          return $197($198($199));
      };
  };
  var _locked = function (dictStrong) {
      var $200 = _core(dictStrong);
      var $201 = Data_Lens_Lens.lens(function (v) {
          return v.locked;
      })(function (v) {
          return function (v1) {
              return {
                  locked: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($202) {
          return $200($201($202));
      };
  };
  var lockAction = function (act) {
      return Control_Monad.unlessM(Run.monadRun)(Data_Functor.map(Run.functorRun)(Data_Lens_Getter.view(_locked(Data_Lens_Internal_Forget.strongForget)))(Pha_Action.getState))(Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(true)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(act)(function () {
              return Pha_Action.setState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(false));
          });
      }));
  };
  var _mode = function (dictStrong) {
      var $203 = _core(dictStrong);
      var $204 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($205) {
          return $203($204($205));
      };
  };
  var _nbColumns = function (dictStrong) {
      var $206 = _core(dictStrong);
      var $207 = Data_Lens_Lens.lens(function (v) {
          return v.nbColumns;
      })(function (v) {
          return function (v1) {
              return {
                  nbColumns: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($208) {
          return $206($207($208));
      };
  };
  var _nbRows = function (dictStrong) {
      var $209 = _core(dictStrong);
      var $210 = Data_Lens_Lens.lens(function (v) {
          return v.nbRows;
      })(function (v) {
          return function (v1) {
              return {
                  nbRows: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($211) {
          return $209($210($211));
      };
  };
  var _pointer = function (dictStrong) {
      var $212 = _core(dictStrong);
      var $213 = Data_Lens_Lens.lens(function (v) {
          return v.pointer;
      })(function (v) {
          return function (v1) {
              return {
                  pointer: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($214) {
          return $212($213($214));
      };
  };
  var _position = function (dictStrong) {
      var $215 = _core(dictStrong);
      var $216 = Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (v1) {
              return {
                  position: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($217) {
          return $215($216($217));
      };
  };
  var _redoHistory = function (dictStrong) {
      var $218 = _core(dictStrong);
      var $219 = Data_Lens_Lens.lens(function (v) {
          return v.redoHistory;
      })(function (v) {
          return function (v1) {
              return {
                  redoHistory: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  scores: v.scores,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($220) {
          return $218($219($220));
      };
  };
  var pushToHistory = function (state) {
      return Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Cons.create(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state));
  };
  var _scores = function (dictStrong) {
      var $221 = _core(dictStrong);
      var $222 = Data_Lens_Lens.lens(function (v) {
          return v.scores;
      })(function (v) {
          return function (v1) {
              return {
                  scores: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($223) {
          return $221($222($223));
      };
  };
  var newGame = function (dictGame) {
      return function (f) {
          return Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
              var state2 = f(v);
              return Control_Bind.bind(Run.bindRun)(onNewGame(dictGame)(state2))(function (v1) {
                  return Control_Bind.bind(Run.bindRun)(initialPosition(dictGame)(v1))(function (v2) {
                      var state4 = Data_Lens_Setter.set((function () {
                          var $227 = _scores(Data_Profunctor_Strong.strongFn);
                          var $228 = Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))("custom")(Data_Profunctor_Strong.strongFn);
                          return function ($229) {
                              return $227($228($229));
                          };
                      })())(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(_help(Data_Profunctor_Strong.strongFn))(false)(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v2)(v1)))));
                      return Pha_Action.setState((function () {
                          var $135 = Data_List["null"](Data_Lens_Getter.viewOn(state2)(_history(Data_Lens_Internal_Forget.strongForget))) || isLevelFinished(dictGame)(v);
                          if ($135) {
                              return Data_Function["const"](state4);
                          };
                          return Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(new ConfirmNewGameDialog(state4));
                      })());
                  });
              });
          });
      };
  };
  var init = function (dictGame) {
      return newGame(dictGame)(Control_Category.identity(Control_Category.categoryFn));
  };
  var _showWin = function (dictStrong) {
      var $237 = _core(dictStrong);
      var $238 = Data_Lens_Lens.lens(function (v) {
          return v.showWin;
      })(function (v) {
          return function (v1) {
              return {
                  showWin: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($239) {
          return $237($238($239));
      };
  };
  var showVictory = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(true)))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(1000))(function () {
          return Pha_Action.setState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(false));
      });
  });
  var _turn = function (dictStrong) {
      var $240 = _core(dictStrong);
      var $241 = Data_Lens_Lens.lens(function (v) {
          return v.turn;
      })(function (v) {
          return function (v1) {
              return {
                  turn: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  scores: v.scores,
                  showWin: v.showWin
              };
          };
      })(dictStrong);
      return function ($242) {
          return $240($241($242));
      };
  };
  var changeTurn = function (state) {
      return Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(function (x) {
          var $144 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(DuelMode.value);
          if ($144) {
              return oppositeTurn(x);
          };
          return Turn1.value;
      })(state);
  };
  var playAux = function (dictGame) {
      return function (move) {
          return function (state) {
              return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(play(dictGame)(state)(move))(function (pos) {
                  return Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(oppositeTurn)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(pos)(state));
              });
          };
      };
  };
  var computerMove$prime = function (dictTwoPlayersGame) {
      return function (state) {
          var $145 = isLevelFinished(dictTwoPlayersGame.Game0())(state);
          if ($145) {
              return Control_Applicative.pure(Run.applicativeRun)(Data_Maybe.Nothing.value);
          };
          var moves = possibleMoves(dictTwoPlayersGame)(state);
          var bestMove = (function () {
              var $146 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
              if ($146) {
                  return Data_Maybe.Nothing.value;
              };
              return Data_Foldable.find(Data_Foldable.foldableArray)((function () {
                  var $243 = Data_Maybe.maybe(false)(isLosingPosition(dictTwoPlayersGame));
                  var $244 = Data_Function.flip(playAux(dictTwoPlayersGame.Game0()))(state);
                  return function ($245) {
                      return $243($244($245));
                  };
              })())(moves);
          })();
          if (bestMove instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Run.applicativeRun)(bestMove);
          };
          if (bestMove instanceof Data_Maybe.Nothing) {
              return Pha_Effects_Random.randomPick(moves);
          };
          throw new Error("Failed pattern match at Game.Core (line 311, column 13 - line 313, column 44): " + [ bestMove.constructor.name ]);
      };
  };
  var computerPlay = function (dictGame) {
      return Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
          return Control_Bind.bind(Run.bindRun)(computerMove(dictGame)(v))(function (v1) {
              var v2 = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Function.flip(playAux(dictGame))(v))(v1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(Data_Function["const"](v2.value0)))(function () {
                      return Control_Applicative.when(Run.applicativeRun)(isLevelFinished(dictGame)(v2.value0))(showVictory);
                  });
              };
              throw new Error("Failed pattern match at Game.Core (line 223, column 5 - line 227, column 51): " + [ v2.constructor.name ]);
          });
      });
  };
  var coreUpdate = function (dictGame) {
      return function (v) {
          if (v instanceof Undo) {
              return Pha_Action.setState(function (state) {
                  var v1 = Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget));
                  if (v1 instanceof Data_List_Types.Nil) {
                      return state;
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return Data_Lens_Setter.over(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Cons.create(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(v1.value1)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1.value0)(changeTurn(state))));
                  };
                  throw new Error("Failed pattern match at Game.Core (line 157, column 38 - line 163, column 56): " + [ v1.constructor.name ]);
              });
          };
          if (v instanceof Redo) {
              return Pha_Action.setState(function (state) {
                  var v1 = Data_Lens_Getter.viewOn(state)(_redoHistory(Data_Lens_Internal_Forget.strongForget));
                  if (v1 instanceof Data_List_Types.Nil) {
                      return state;
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Cons.create(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(v1.value1)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1.value0)(changeTurn(state))));
                  };
                  throw new Error("Failed pattern match at Game.Core (line 165, column 38 - line 171, column 52): " + [ v1.constructor.name ]);
              });
          };
          if (v instanceof Reset) {
              return Pha_Action.setState(function (state) {
                  var v1 = Data_List.last(Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget)));
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return state;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return Data_Lens_Setter.set(_turn(Data_Profunctor_Strong.strongFn))(Turn1.value)(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(Data_List_Types.Nil.value)(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1.value0)(state))));
                  };
                  throw new Error("Failed pattern match at Game.Core (line 173, column 39 - line 178, column 37): " + [ v1.constructor.name ]);
              });
          };
          if (v instanceof ToggleHelp) {
              return Pha_Action.setState(Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
          };
          if (v instanceof SetMode) {
              return newGame(dictGame)(Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn))(v.value0));
          };
          if (v instanceof SetGridSize) {
              var setSize$prime = function (state) {
                  var v1 = sizeLimit(dictGame)(state);
                  var $164 = v.value0 >= v1.value0 && (v.value0 <= v1.value2 && (v.value1 >= v1.value1 && v.value1 <= v1.value3));
                  if ($164) {
                      return Data_Lens_Setter.set(_nbColumns(Data_Profunctor_Strong.strongFn))(v.value1)(Data_Lens_Setter.set(_nbRows(Data_Profunctor_Strong.strongFn))(v.value0)(state));
                  };
                  return state;
              };
              return newGame(dictGame)((function () {
                  var $246 = Data_Lens_Setter.set(_customSize(Data_Profunctor_Strong.strongFn))(v.value2);
                  return function ($247) {
                      return setSize$prime($246($247));
                  };
              })());
          };
          if (v instanceof SetCustomSize) {
              return Pha_Action.setState(Data_Lens_Setter.set(_customSize(Data_Profunctor_Strong.strongFn))(true));
          };
          if (v instanceof SetNoDialog) {
              return Pha_Action.setState(Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(NoDialog.value));
          };
          if (v instanceof SetRulesDialog) {
              return Pha_Action.setState(Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(Rules.value));
          };
          if (v instanceof ConfirmNewGame) {
              return Pha_Action.setState(function (state) {
                  var v1 = Data_Lens_Getter.viewOn(state)(_dialog(Data_Lens_Internal_Forget.strongForget));
                  if (v1 instanceof ConfirmNewGameDialog) {
                      return v1.value0;
                  };
                  return state;
              });
          };
          if (v instanceof SetPointer) {
              return Pha_Action.setState(Data_Lens_Setter.set(_pointer(Data_Profunctor_Strong.strongFn))(v.value0));
          };
          if (v instanceof ComputerStarts) {
              return Control_Apply.applySecond(Run.applyRun)(Pha_Action.setState((function () {
                  var $248 = Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(oppositeTurn);
                  return function ($249) {
                      return pushToHistory($248($249));
                  };
              })()))(computerPlay(dictGame));
          };
          throw new Error("Failed pattern match at Game.Core (line 156, column 1 - line 156, column 94): " + [ v.constructor.name ]);
      };
  };
  var playA = function (dictGame) {
      return function (move) {
          return lockAction(Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
              var v1 = playAux(dictGame)(move)(pushToHistory(v));
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(function (v2) {
                      return v1.value0;
                  }))(function () {
                      var $178 = isLevelFinished(dictGame)(v1.value0);
                      if ($178) {
                          var v2 = updateScore(dictGame)(v1.value0);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(function (v3) {
                              return v2.value0;
                          }))(function () {
                              return Control_Applicative.when(Run.applicativeRun)(v2.value1)(showVictory);
                          });
                      };
                      var $182 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(v1.value0)(_mode(Data_Lens_Internal_Forget.strongForget)))(ExpertMode.value) || Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(v1.value0)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
                      if ($182) {
                          return Control_Apply.applySecond(Run.applyRun)(Pha_Effects_Delay.delay(1000))(computerPlay(dictGame));
                      };
                      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                  });
              };
              throw new Error("Failed pattern match at Game.Core (line 232, column 5 - line 243, column 26): " + [ v1.constructor.name ]);
          }));
      };
  };
  exports["core"] = core;
  exports["isLevelFinished"] = isLevelFinished;
  exports["possibleMoves"] = possibleMoves;
  exports["sizeLimit"] = sizeLimit;
  exports["Rules"] = Rules;
  exports["ConfirmNewGameDialog"] = ConfirmNewGameDialog;
  exports["ScoreDialog"] = ScoreDialog;
  exports["CustomDialog"] = CustomDialog;
  exports["RandomMode"] = RandomMode;
  exports["ExpertMode"] = ExpertMode;
  exports["DuelMode"] = DuelMode;
  exports["Turn1"] = Turn1;
  exports["Turn2"] = Turn2;
  exports["genState"] = genState;
  exports["_ext"] = _ext;
  exports["_position"] = _position;
  exports["_history"] = _history;
  exports["_redoHistory"] = _redoHistory;
  exports["_mode"] = _mode;
  exports["_help"] = _help;
  exports["_turn"] = _turn;
  exports["_dialog"] = _dialog;
  exports["_nbRows"] = _nbRows;
  exports["_nbColumns"] = _nbColumns;
  exports["_customSize"] = _customSize;
  exports["_locked"] = _locked;
  exports["_showWin"] = _showWin;
  exports["_pointer"] = _pointer;
  exports["SizeLimit"] = SizeLimit;
  exports["Game"] = Game;
  exports["canPlay"] = canPlay;
  exports["defaultSizeLimit"] = defaultSizeLimit;
  exports["defaultOnNewGame"] = defaultOnNewGame;
  exports["Undo"] = Undo;
  exports["Redo"] = Redo;
  exports["Reset"] = Reset;
  exports["ToggleHelp"] = ToggleHelp;
  exports["SetMode"] = SetMode;
  exports["SetGridSize"] = SetGridSize;
  exports["SetCustomSize"] = SetCustomSize;
  exports["SetNoDialog"] = SetNoDialog;
  exports["SetRulesDialog"] = SetRulesDialog;
  exports["ConfirmNewGame"] = ConfirmNewGame;
  exports["SetPointer"] = SetPointer;
  exports["ComputerStarts"] = ComputerStarts;
  exports["MsgWithCore"] = MsgWithCore;
  exports["coreUpdate"] = coreUpdate;
  exports["playA"] = playA;
  exports["newGame"] = newGame;
  exports["init"] = init;
  exports["TwoPlayersGame"] = TwoPlayersGame;
  exports["computerMove'"] = computerMove$prime;
  exports["eqMode"] = eqMode;
  exports["eqTurn"] = eqTurn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Lib.Util"] = $PS["Lib.Util"] || {};
  var exports = $PS["Lib.Util"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var range$prime = function (n) {
      return function (m) {
          var $4 = n > m;
          if ($4) {
              return [  ];
          };
          return Data_Array.range(n)(m);
      };
  };
  var tabulate = function (n) {
      return function (f) {
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(range$prime(0)(n - 1 | 0))(f);
      };
  };
  var tabulate2 = function (n) {
      return function (m) {
          return function (f) {
              return tabulate(n * m | 0)(function (i) {
                  return f(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(m))(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(m));
              });
          };
      };
  };
  var pairwise = function (list) {
      return Data_Maybe.maybe([  ])(Data_Array.zip(list))(Data_Array.tail(list));
  };
  var map2 = function (t1) {
      return function (t2) {
          return function (fn) {
              return Data_Array.zipWith(Data_Function.apply)(Data_Array.mapWithIndex(fn)(t1))(t2);
          };
      };
  };
  var floatRange = function (begin) {
      return function (end) {
          return function (step) {
              return tabulate(Data_Ord.max(Data_Ord.ordInt)(0)(Data_Int.floor(1.0 + (end - begin) / step)))(function (i) {
                  return begin + Data_Int.toNumber(i) * step;
              });
          };
      };
  };
  var coords = function (cols) {
      return function (i) {
          return {
              row: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(cols),
              col: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(cols)
          };
      };
  };
  var dCoords = function (cols) {
      return function (x) {
          return function (y) {
              var q = coords(cols)(y);
              var p = coords(cols)(x);
              return {
                  row: p.row - q.row | 0,
                  col: p.col - q.col | 0
              };
          };
      };
  };
  exports["range'"] = range$prime;
  exports["tabulate"] = tabulate;
  exports["tabulate2"] = tabulate2;
  exports["map2"] = map2;
  exports["floatRange"] = floatRange;
  exports["pairwise"] = pairwise;
  exports["coords"] = coords;
  exports["dCoords"] = dCoords;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Baseball.Model"] = $PS["Game.Baseball.Model"] || {};
  var exports = $PS["Game.Baseball.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Run = $PS["Run"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetNbBases = (function () {
      function SetNbBases(value0) {
          this.value0 = value0;
      };
      SetNbBases.create = function (value0) {
          return new SetNbBases(value0);
      };
      return SetNbBases;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      nbBases: 5,
      missingPeg: 0
  });
  var _ext$prime = function (dictStrong) {
      var $22 = Game_Core["_ext"](dictStrong);
      var $23 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($24) {
          return $22($23($24));
      };
  };
  var _missingPeg = function (dictStrong) {
      var $25 = _ext$prime(dictStrong);
      var $26 = Data_Lens_Lens.lens(function (v) {
          return v.missingPeg;
      })(function (v) {
          return function (v1) {
              return {
                  missingPeg: v1,
                  nbBases: v.nbBases
              };
          };
      })(dictStrong);
      return function ($27) {
          return $25($26($27));
      };
  };
  var _nbBases = function (dictStrong) {
      var $28 = _ext$prime(dictStrong);
      var $29 = Data_Lens_Lens.lens(function (v) {
          return v.nbBases;
      })(function (v) {
          return function (v1) {
              return {
                  nbBases: v1,
                  missingPeg: v.missingPeg
              };
          };
      })(dictStrong);
      return function ($30) {
          return $28($29($30));
      };
  };
  var baseballGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Maybe.Nothing.value);
  }, function (state) {
      return Pha_Effects_Random.shuffle(Lib_Util["range'"](0)((2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0) - 1 | 0));
  }, function (state) {
      return Data_FoldableWithIndex.allWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (i) {
          return function (j) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(2) === Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(j)(2);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      return Data_Functor.mapFlipped(Run.functorRun)(Pha_Effects_Random.randomInt(2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0))(function (i) {
          return Data_Lens_Setter.set(_missingPeg(Data_Profunctor_Strong.strongFn))(i)(state);
      });
  }, function (state) {
      return function (i) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var nbBases = Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget));
          var j = Data_Lens_Getter.viewOn(state)(_missingPeg(Data_Lens_Internal_Forget.strongForget));
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(i))(function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(j))(function (v1) {
                  var $17 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2) - Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v1)(2) | 0)([ 1, nbBases - 1 | 0, -1 | 0, 1 - nbBases | 0 ]);
                  if ($17) {
                      return Data_Maybe.Just.create(Data_Array.updateAtIndices(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(i, v1), new Data_Tuple.Tuple(j, v) ])(position));
                  };
                  return Data_Maybe.Nothing.value;
              });
          });
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(baseballGame)(v.value0);
      };
      if (v instanceof SetNbBases) {
          return Game_Core.newGame(baseballGame)(Data_Lens_Setter.set(_nbBases(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Game_Core.playA(baseballGame)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Baseball.Model (line 51, column 1 - line 51, column 35): " + [ v.constructor.name ]);
  };
  exports["_nbBases"] = _nbBases;
  exports["_missingPeg"] = _missingPeg;
  exports["istate"] = istate;
  exports["SetNbBases"] = SetNbBases;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["baseballGame"] = baseballGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Baseball"] = $PS["Game.Baseball"] || {};
  var exports = $PS["Game.Baseball"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Core = $PS["Game.Core"];                
  var init = Game_Core.init(Game_Baseball_Model.baseballGame);
  exports["init"] = init;
})(PS);
(function(exports) {
  // code comes from hyperapp by Jorge Bucaran
  // https://github.com/jorgebucaran/hyperapp

  const RECYCLED_NODE = 1
  const LAZY_NODE = 2
  const TEXT_NODE = 3
  const EMPTY_OBJ = {}
  const EMPTY_ARR = []
  const map = EMPTY_ARR.map
  const defer = requestAnimationFrame || setTimeout

  const merge = function(a, b) {
    var out = {}

    for (var k in a) out[k] = a[k]
    for (var k in b) out[k] = b[k]

    return out
  }

  const patchProperty = function(node, key, oldValue, newValue, listener, isSvg, decorator) {
    if (key === "key") {
    } else if (key === "style") {
      for (var k in merge(oldValue, newValue)) {
        oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
        if (k[0] === "-") {
          node[key].setProperty(k, oldValue)
        } else {
          node[key][k] = oldValue
        }
      }
    } else if (key[0] === "o" && key[1] === "n") {
      if (
        !((node.actions || (node.actions = {}))[
          (key = key.slice(2).toLowerCase())
        ] = decorator ? decorator(newValue) : newValue)
      ) {
        node.removeEventListener(key, listener)
      } else if (!oldValue) {
        node.addEventListener(key, listener)
      }
    } else if (!isSvg && key !== "list" && key in node) {
      node[key] = newValue == null ? "" : newValue
    } else if (
      newValue == null ||
      newValue === false ||
      (key === "class" && !newValue)
    ) {
      node.removeAttribute(key)
    } else {
      node.setAttribute(key, newValue)
    }
  }

  const createNode = function(vnode, listener, isSvg, decorator) {
    var node =
      vnode.type === TEXT_NODE
        ? document.createTextNode(vnode.name)
        : (isSvg = isSvg || vnode.name === "svg")
        ? document.createElementNS("http://www.w3.org/2000/svg", vnode.name)
        : document.createElement(vnode.name)
    var props = vnode.props

    const dec2 = vnode.decorator;
    const decorator2 = !decorator ? dec2 : dec2 ? (x => ev => decorator(dec2(x(ev)))) : decorator; 

    for (var k in props) {
      patchProperty(node, k, null, props[k], listener, isSvg, decorator2)
    }

    for (var i = 0, len = vnode.children.length; i < len; i++) {
      node.appendChild(
        createNode(
          (vnode.children[i] = getVNode(vnode.children[i])),
          listener,
          isSvg,
          decorator2
        )
      )
    }

    return (vnode.node = node)
  }

  const getKey = vnode => vnode == null ? null : vnode.key;

  const patch = function(parent, node, oldVNode, newVNode, listener, isSvg, decorator) {
     //decorator = newVNode.decorator || decorator;

    if (oldVNode === newVNode) {
    } else if (
      oldVNode != null &&
      oldVNode.type === TEXT_NODE &&
      newVNode.type === TEXT_NODE
    ) {
      if (oldVNode.name !== newVNode.name) node.nodeValue = newVNode.name
    } else if (oldVNode == null || oldVNode.name !== newVNode.name) {
      node = parent.insertBefore(
        createNode((newVNode = getVNode(newVNode)), listener, isSvg, decorator),
        node
      )
      if (oldVNode != null) {
        parent.removeChild(oldVNode.node)
      }
    } else {
      var tmpVKid
      var oldVKid

      var oldKey
      var newKey

      var oldVProps = oldVNode.props
      var newVProps = newVNode.props

      var oldVKids = oldVNode.children
      var newVKids = newVNode.children

      var oldHead = 0
      var newHead = 0
      var oldTail = oldVKids.length - 1
      var newTail = newVKids.length - 1

      const dec2 = newVNode.decorator;
      const decorator2 = !decorator ?
                     dec2 
                  : dec2 ? 
                          (x => ev => decorator(dec(x(ev))))
                   : decorator;

      isSvg = isSvg || newVNode.name === "svg"

      for (var i in merge(oldVProps, newVProps)) {
        if (
          (i === "value" || i === "selected" || i === "checked"
            ? node[i]
            : oldVProps[i]) !== newVProps[i]
        ) {
          patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg, decorator2)
        }
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldHead])) == null ||
          oldKey !== getKey(newVKids[newHead])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldHead].node,
          oldVKids[oldHead],
          (newVKids[newHead] = getVNode(
            newVKids[newHead++],
            oldVKids[oldHead++]
          )),
          listener,
          isSvg,
          decorator2
        )
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldTail])) == null ||
          oldKey !== getKey(newVKids[newTail])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldTail].node,
          oldVKids[oldTail],
          (newVKids[newTail] = getVNode(
            newVKids[newTail--],
            oldVKids[oldTail--]
          )),
          listener,
          isSvg,
          decorator2
        )
      }

      if (oldHead > oldTail) {
        while (newHead <= newTail) {
          node.insertBefore(
            createNode(
              (newVKids[newHead] = getVNode(newVKids[newHead++])),
              listener,
              isSvg,
              decorator2
            ),
            (oldVKid = oldVKids[oldHead]) && oldVKid.node
          )
        }
      } else if (newHead > newTail) {
        while (oldHead <= oldTail) {
          node.removeChild(oldVKids[oldHead++].node)
        }
      } else {
        for (var i = oldHead, keyed = {}, newKeyed = {}; i <= oldTail; i++) {
          if ((oldKey = oldVKids[i].key) != null) {
            keyed[oldKey] = oldVKids[i]
          }
        }

        while (newHead <= newTail) {
          oldKey = getKey((oldVKid = oldVKids[oldHead]))
          newKey = getKey(
            (newVKids[newHead] = getVNode(newVKids[newHead], oldVKid))
          )

          if (
            newKeyed[oldKey] ||
            (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))
          ) {
            if (oldKey == null) {
              node.removeChild(oldVKid.node)
            }
            oldHead++
            continue
          }

          if (newKey == null || oldVNode.type === RECYCLED_NODE) {
            if (oldKey == null) {
              patch(
                node,
                oldVKid && oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg,
                decorator2
              )
              newHead++
            }
            oldHead++
          } else {
            if (oldKey === newKey) {
              patch(
                node,
                oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg,
                decorator2
              )
              newKeyed[newKey] = true
              oldHead++
            } else {
              if ((tmpVKid = keyed[newKey]) != null) {
                patch(
                  node,
                  node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),
                  tmpVKid,
                  newVKids[newHead],
                  listener,
                  isSvg,
                  decorator2
                )
                newKeyed[newKey] = true
              } else {
                patch(
                  node,
                  oldVKid && oldVKid.node,
                  null,
                  newVKids[newHead],
                  listener,
                  isSvg,
                  decorator2
                )
              }
            }
            newHead++
          }
        }

        while (oldHead <= oldTail) {
          if (getKey((oldVKid = oldVKids[oldHead++])) == null) {
            node.removeChild(oldVKid.node)
          }
        }

        for (var i in keyed) {
          if (newKeyed[i] == null) {
            node.removeChild(keyed[i].node)
          }
        }
      }
    }

    return (newVNode.node = node)
  }

  const propsChanged = function(a, b) {
    for (var k in a) if (a[k] !== b[k]) return true
    for (var k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = function(newVNode, oldVNode) {
    return newVNode.type === LAZY_NODE
      ? ((!oldVNode || propsChanged(oldVNode.lazy, newVNode.lazy)) &&
          ((oldVNode = newVNode.lazy.view(newVNode.lazy)).lazy = newVNode.lazy),
        oldVNode)
      : newVNode
  }

  const createVNode = function(name, props, children, node, key, type) {
    return {
      name: name,
      props: props,
      children: children,
      node: node,
      type: type,
      key: key
    }
  }

  const createTextVNode = (value, node) =>
      createVNode(value, EMPTY_OBJ, EMPTY_ARR, node, null, TEXT_NODE);

  const recycleNode = node =>
    node.nodeType === TEXT_NODE
      ? createTextVNode(node.nodeValue, node)
      : createVNode(
          node.nodeName.toLowerCase(),
          EMPTY_OBJ,
          map.call(node.childNodes, recycleNode),
          node,
          null,
          RECYCLED_NODE
        )

  const appAux = props => () => {
    let state = {};
    let lock = false

    const listener = function(event) {
      dispatch(event)(this.actions[event.type])();
    }
 
    const getState = () => state;

    const setState = newState => () => {
      if (state !== newState) {
        state = newState;
        if (!lock) defer(render, (lock = true))
      }

      return state
    }

    const {state: istate, view, events, dispatch, init, node: rootnode} = props(getState)(setState);

    let node = document.getElementById(rootnode);
    if (!node)
      return;
     let vdom = node && recycleNode(node);

    const render = () => {
      lock = false
      node = patch(
        node.parentNode,
        node,
        vdom,
        vdom = view(state),
        listener
      )
    }
    setState(istate)();
    for (let i = 0; i < events.length; i++) {
       addEventListener(events[i].value0, ev => events[i].value1(ev)());
    }
    init();
  }

  const h = isStyle => name => ps => children => {
      const style = {};
      const props = {style};
      const vdom = { name, children: children.filter(x => x), props, node: null };
      const n = ps.length;
      for (let i = 0; i < n; i++) {
          const obj = ps[i];
          const value0 = obj.value0;
          const value1 = obj.value1;
          if (value1 === undefined)
              vdom.key = value0;
          else if (typeof value1 === 'function')
              vdom.props["on"+value0] = value1;
          else if (typeof value1 === 'boolean') {
              if(!value1)
                  {}
              else if (props.class)  
                  props.class += ' ' + value0;
              else
                  props.class = value0;
          }
          else if (isStyle(obj))
              style[value0] = value1;
          else
              props[value0] = value1;
      }
      return vdom;
  }

  const lazy = st => view => ({
      type: LAZY_NODE,
      lazy: {
          view: (x => view(x.state)),
          state: st
      }
  });

  exports.mapView = decorator => vnode => Object.assign({}, vnode, {decorator});
  exports.emptyNode = null;
  exports.appAux = appAux;
  exports.hAux = h;
  exports.text = createTextVNode;
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Run = $PS["Run"];                
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Class = (function () {
      function Class(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Class.create = function (value0) {
          return function (value1) {
              return new Class(value0, value1);
          };
      };
      return Class;
  })();
  var Style = (function () {
      function Style(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Style.create = function (value0) {
          return function (value1) {
              return new Style(value0, value1);
          };
      };
      return Style;
  })();
  var On = (function () {
      function On(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      On.create = function (value0) {
          return function (value1) {
              return new On(value0, value1);
          };
      };
      return On;
  })();
  var unsafeOnWithEffect = On.create;
  var style = Style.create;
  var on_ = function (n) {
      return function (handler) {
          return new On(n, function (ev) {
              return {
                  effect: Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit),
                  msg: handler(ev)
              };
          });
      };
  };
  var maybeN = Data_Maybe.fromMaybe($foreign.emptyNode);
  var key = Key.create;
  var isStyle = function (v) {
      if (v instanceof Style) {
          return true;
      };
      return false;
  };
  var ifN = function (cond) {
      return function (vdom) {
          if (cond) {
              return vdom(Data_Unit.unit);
          };
          return $foreign.emptyNode;
      };
  };
  var h = $foreign.hAux(isStyle);
  var functorVDom = new Data_Functor.Functor(function (fn) {
      var mapH = function (handler) {
          return function (ev) {
              var v = handler(ev);
              return {
                  effect: v.effect,
                  msg: Data_Functor.map(Data_Maybe.functorMaybe)(fn)(v.msg)
              };
          };
      };
      return $foreign.mapView(mapH);
  });
  var class_ = function (name) {
      return new Class(name, true);
  };
  var class$prime = Class.create;
  var attr = Attr.create;
  var app = function (v) {
      var fn = function (getS) {
          return function (setS) {
              var go = Data_Functor_Variant.onMatch()()()({
                  getState: function (v1) {
                      return Control_Bind.bind(Effect.bindEffect)(getS)(v1.value0);
                  },
                  setState: function (v1) {
                      return Control_Apply.applySecond(Effect.applyEffect)(function __do() {
                          var $37 = getS();
                          return setS(v1.value0($37))();
                      })(v1.value1);
                  }
              })(v.interpret);
              var runAction = Run.runCont(go)(function (v1) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              });
              var init2 = runAction(v.init);
              var events2 = Data_Functor.mapFlipped(Data_Functor.functorArray)(v.events)(function (v1) {
                  return new Data_Tuple.Tuple(v1.value0, function (ev) {
                      return runAction(v1.value1(ev));
                  });
              });
              var dispatch = function (ev) {
                  return function (handler) {
                      var v1 = handler(ev);
                      return function __do() {
                          v1.effect();
                          if (v1.msg instanceof Data_Maybe.Nothing) {
                              return Data_Unit.unit;
                          };
                          if (v1.msg instanceof Data_Maybe.Just) {
                              return runAction(v.update(v1.msg.value0))();
                          };
                          throw new Error("Failed pattern match at Pha (line 126, column 13 - line 128, column 47): " + [ v1.msg.constructor.name ]);
                      };
                  };
              };
              return {
                  state: v.state,
                  view: v.view,
                  node: v.node,
                  init: init2,
                  events: events2,
                  dispatch: dispatch
              };
          };
      };
      return $foreign.appAux(fn);
  };
  exports["h"] = h;
  exports["key"] = key;
  exports["attr"] = attr;
  exports["style"] = style;
  exports["on_"] = on_;
  exports["class_"] = class_;
  exports["class'"] = class$prime;
  exports["ifN"] = ifN;
  exports["maybeN"] = maybeN;
  exports["app"] = app;
  exports["unsafeOnWithEffect"] = unsafeOnWithEffect;
  exports["functorVDom"] = functorVDom;
  exports["text"] = $foreign.text;
  exports["emptyNode"] = $foreign.emptyNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Elements"] = $PS["Pha.Elements"] || {};
  var exports = $PS["Pha.Elements"];
  var Pha = $PS["Pha"];
  var span = Pha.h("span");
  var h2 = Pha.h("h2");        
  var div = Pha.h("div");
  var button = Pha.h("button");
  var br = Pha.h("br")([  ])([  ]);
  var a = Pha.h("a");
  exports["a"] = a;
  exports["br"] = br;
  exports["button"] = button;
  exports["div"] = div;
  exports["h2"] = h2;
  exports["span"] = span;
})(PS);
(function(exports) {
  exports.preventDefaultE = e => () => e && e.preventDefault && e.preventDefault();
  exports.stopPropagationE = e => () => e && e.stopPropagation && e.stopPropagation();
})(PS["Pha.Events"] = PS["Pha.Events"] || {});
(function(exports) {
  exports.getBoundingClientRectAux = e => e && e.getBoundingClientRect && e.getBoundingClientRect();
})(PS["Pha.Events.Decoder"] = PS["Pha.Events.Decoder"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Events.Decoder"] = $PS["Pha.Events.Decoder"] || {};
  var exports = $PS["Pha.Events.Decoder"];
  var $foreign = $PS["Pha.Events.Decoder"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];                
  var shiftKey = Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("shiftKey"))(Foreign.readBoolean);
  var getBoundingClientRect = function (f) {
      var rect = $foreign.getBoundingClientRectAux(f);
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("left")(rect))(Foreign.readNumber))(function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("top")(rect))(Foreign.readNumber))(function (v1) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("width")(rect))(Foreign.readNumber))(function (v2) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("height")(rect))(Foreign.readNumber))(function (v3) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                          left: v,
                          top: v1,
                          width: v2,
                          height: v3
                      });
                  });
              });
          });
      });
  };
  var currentTarget = Foreign_Index.readProp("currentTarget");                                                                                                                                                                                                                                    
  var always = (function () {
      var $8 = Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity));
      return function ($9) {
          return Data_Function["const"]($8($9));
      };
  })();
  exports["always"] = always;
  exports["currentTarget"] = currentTarget;
  exports["shiftKey"] = shiftKey;
  exports["getBoundingClientRect"] = getBoundingClientRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Events"] = $PS["Pha.Events"] || {};
  var exports = $PS["Pha.Events"];
  var $foreign = $PS["Pha.Events"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Foreign = $PS["Foreign"];
  var Pha = $PS["Pha"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];                
  var on$prime = function (eventname) {
      return function (decoder) {
          var handler = function (ev) {
              var v = Control_Monad_Except.runExcept(decoder(Foreign.unsafeToForeign(ev)));
              if (v instanceof Data_Either.Right) {
                  return v.value0;
              };
              return Data_Maybe.Nothing.value;
          };
          return Pha.on_(eventname)(handler);
      };
  };
  var on = function (eventname) {
      return function (decoder) {
          return on$prime(eventname)((function () {
              var $17 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create);
              return function ($18) {
                  return $17(decoder($18));
              };
          })());
      };
  };
  var onclick = (function () {
      var $21 = on("click");
      return function ($22) {
          return $21(Pha_Events_Decoder.always($22));
      };
  })();
  var onpointerenter = (function () {
      var $33 = on("pointerenter");
      return function ($34) {
          return $33(Pha_Events_Decoder.always($34));
      };
  })();
  var onpointerleave = (function () {
      var $35 = on("pointerleave");
      return function ($36) {
          return $35(Pha_Events_Decoder.always($36));
      };
  })();
  var custom = function (eventname) {
      return function (decoder) {
          var handler = function (ev) {
              var v = Control_Monad_Except.runExcept(decoder(Foreign.unsafeToForeign(ev)));
              if (v instanceof Data_Either.Right) {
                  return {
                      effect: function __do() {
                          Control_Applicative.when(Effect.applicativeEffect)(v.value0.stopPropagation)($foreign.stopPropagationE(ev))();
                          return Control_Applicative.when(Effect.applicativeEffect)(v.value0.preventDefault)($foreign.preventDefaultE(ev))();
                      },
                      msg: v.value0.message
                  };
              };
              return {
                  effect: Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit),
                  msg: Data_Maybe.Nothing.value
              };
          };
          return Pha.unsafeOnWithEffect(eventname)(handler);
      };
  };
  exports["onclick"] = onclick;
  exports["onpointerenter"] = onpointerenter;
  exports["onpointerleave"] = onpointerleave;
  exports["on"] = on;
  exports["custom"] = custom;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Svg"] = $PS["Pha.Svg"] || {};
  var exports = $PS["Pha.Svg"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];                
  var y_ = Pha.attr("y");
  var y2 = Pha.attr("y2");
  var y1 = Pha.attr("y1");
  var x_ = Pha.attr("x");
  var x2 = Pha.attr("x2");
  var x1 = Pha.attr("x1");
  var width = Pha.attr("width");
  var viewBox = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return Pha.attr("viewBox")(Data_Show.show(Data_Show.showInt)(a) + (" " + (Data_Show.show(Data_Show.showInt)(b) + (" " + (Data_Show.show(Data_Show.showInt)(c) + (" " + Data_Show.show(Data_Show.showInt)(d)))))));
              };
          };
      };
  };
  var use = function (ref) {
      return function (props) {
          return Pha.h("use")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.attr("href")(ref) ])(props))([  ]);
      };
  };                                    
  var text$prime = function (t) {
      return function (props) {
          return Pha.h("text")(props)([ Pha.text(t) ]);
      };
  };
  var svg = Pha.h("svg");
  var strokeWidth = Pha.attr("stroke-width");
  var strokeDasharray = Pha.attr("stroke-dasharray");
  var stroke = Pha.attr("stroke");
  var rect = function (props) {
      return Pha.h("rect")(props)([  ]);
  };
  var r = Pha.attr("r");
  var path = function (d) {
      return function (props) {
          return Pha.h("path")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.attr("d")(d) ])(props))([  ]);
      };
  };                                
  var line = function (props) {
      return Pha.h("line")(props)([  ]);
  };
  var height = Pha.attr("height");
  var g = Pha.h("g");
  var fill = Pha.attr("fill");
  var cy = Pha.attr("cy");
  var cx = Pha.attr("cx");
  var circle = function (props) {
      return Pha.h("circle")(props)([  ]);
  };
  exports["g"] = g;
  exports["svg"] = svg;
  exports["rect"] = rect;
  exports["path"] = path;
  exports["line"] = line;
  exports["circle"] = circle;
  exports["use"] = use;
  exports["text'"] = text$prime;
  exports["x_"] = x_;
  exports["y_"] = y_;
  exports["x1"] = x1;
  exports["y1"] = y1;
  exports["x2"] = x2;
  exports["y2"] = y2;
  exports["cx"] = cx;
  exports["cy"] = cy;
  exports["r"] = r;
  exports["width"] = width;
  exports["height"] = height;
  exports["stroke"] = stroke;
  exports["fill"] = fill;
  exports["viewBox"] = viewBox;
  exports["strokeWidth"] = strokeWidth;
  exports["strokeDasharray"] = strokeDasharray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Util"] = $PS["Pha.Util"] || {};
  var exports = $PS["Pha.Util"];
  var Data_Show = $PS["Data.Show"];                
  var translate = function (x) {
      return function (y) {
          return "translate(" + (x + ("," + (y + ")")));
      };
  };
  var px = function (x) {
      return Data_Show.show(Data_Show.showNumber)(x) + "px";
  };
  var pc = function (x) {
      return Data_Show.show(Data_Show.showNumber)(x * 100.0) + "%";
  };
  exports["px"] = px;
  exports["pc"] = pc;
  exports["translate"] = translate;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Attributes"] = $PS["Pha.Attributes"] || {};
  var exports = $PS["Pha.Attributes"];
  var Pha = $PS["Pha"];     
  var href = Pha.attr("href");
  var disabled = function (b) {
      return Pha.attr("disabled")((function () {
          if (b) {
              return "true";
          };
          return "";
      })());
  };
  exports["disabled"] = disabled;
  exports["href"] = href;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["UI.Icon"] = $PS["UI.Icon"] || {};
  var exports = $PS["UI.Icon"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Pha = $PS["Pha"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Svg = $PS["Pha.Svg"];                
  var IconText = (function () {
      function IconText(value0) {
          this.value0 = value0;
      };
      IconText.create = function (value0) {
          return new IconText(value0);
      };
      return IconText;
  })();
  var IconSymbol = (function () {
      function IconSymbol(value0) {
          this.value0 = value0;
      };
      IconSymbol.create = function (value0) {
          return new IconSymbol(value0);
      };
      return IconSymbol;
  })();
  var IconNone = (function () {
      function IconNone() {

      };
      IconNone.value = new IconNone();
      return IconNone;
  })();
  var defaultOptions = {
      icon: IconNone.value,
      selected: false,
      tooltip: Data_Maybe.Nothing.value,
      round: false,
      large: false,
      hidden: false,
      disabled: false,
      style: [  ]
  };
  var iconbutton = function (optionFn) {
      return function (props) {
          var v = optionFn(defaultOptions);
          return Pha_Elements.button(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("ui-icon"), Pha["class'"]("selected")(v.selected), Pha["class'"]("round")(v.large), Pha["class'"]("hidden")(v.hidden), Pha_Attributes.disabled(v.disabled) ])(props))([ (function () {
              if (v.icon instanceof IconSymbol) {
                  return Pha_Svg.svg(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(Pha.style))(v.style))([ Pha_Svg.width("100%"), Pha_Svg.height("100%") ]))([ Pha_Svg.use(v.icon.value0)([ Pha.class_("ui-icon-symbol") ]) ]);
              };
              if (v.icon instanceof IconText) {
                  return Pha_Elements.span([ Pha.class_("ui-icon-text") ])([ Pha.text(v.icon.value0) ]);
              };
              if (v.icon instanceof IconNone) {
                  return Pha.emptyNode;
              };
              throw new Error("Failed pattern match at UI.Icon (line 45, column 9 - line 50, column 34): " + [ v.icon.constructor.name ]);
          })(), Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.tooltip)(function (t) {
              return Pha_Elements.span([ Pha.class_("ui-icon-tooltip") ])([ Pha.text(t) ]);
          })) ]);
      };
  };
  exports["IconText"] = IconText;
  exports["IconSymbol"] = IconSymbol;
  exports["iconbutton"] = iconbutton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["UI.Icons"] = $PS["UI.Icons"] || {};
  var exports = $PS["UI.Icons"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var UI_Icon = $PS["UI.Icon"];                
  var icongroup = function (title) {
      return function (children) {
          return Pha_Elements.div([  ])([ Pha_Elements.h2([  ])([ Pha.text(title) ]), Pha_Elements.div([ Pha.class_("ui-icon-grid") ])(children) ]);
      };
  };
  var iconbutton = function (state) {
      return function (optionFn) {
          return function (props) {
              return UI_Icon.iconbutton(function (opts) {
                  var opts2 = optionFn(opts);
                  return {
                      icon: opts2.icon,
                      selected: opts2.selected,
                      tooltip: opts2.tooltip,
                      round: opts2.round,
                      large: opts2.large,
                      hidden: opts2.hidden,
                      disabled: opts2.disabled || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget)),
                      style: opts2.style
                  };
              })(props);
          };
      };
  };
  var icons2Players = function (dictMsgWithCore) {
      return function (dictGame) {
          return function (state) {
              return icongroup("Mode de jeu")([ iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#school"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.RandomMode.value),
                      tooltip: new Data_Maybe.Just("IA mode facile"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetMode(Game_Core.RandomMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#enstein"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.ExpertMode.value),
                      tooltip: new Data_Maybe.Just("IA mode expert"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetMode(Game_Core.ExpertMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#duel"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                      tooltip: new Data_Maybe.Just("Affronte un autre joueur"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetMode(Game_Core.DuelMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconText("2P\u21e8"),
                      selected: v.selected,
                      tooltip: new Data_Maybe.Just("L'IA commence"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: !Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))) || Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                      style: v.style
                  };
              })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.ComputerStarts.value)) ]) ]);
          };
      };
  };
  var ihelp = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#help"),
                  selected: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)),
                  tooltip: new Data_Maybe.Just("Aide"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.ToggleHelp.value)) ]);
      };
  };
  var iredo = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#undo"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Rejoue le coup annul\xe9"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_redoHistory"](Data_Lens_Internal_Forget.strongForget))),
                  style: [ new Data_Tuple.Tuple("transform", "scaleX(-1)") ]
              };
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.Redo.value)) ]);
      };
  };
  var ireset = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#reset"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Recommence la partie"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))),
                  style: v.style
              };
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.Reset.value)) ]);
      };
  };
  var irules = function (dictMsgWithCore) {
      return function (state) {
          var selected = (function () {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget));
              if (v instanceof Game_Core.Rules) {
                  return true;
              };
              return false;
          })();
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#rules"),
                  selected: selected,
                  tooltip: new Data_Maybe.Just("R\xe8gles"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.SetRulesDialog.value)) ]);
      };
  };
  var iundo = function (dictMsgWithCore) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#undo"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Annule le dernier coup effectu\xe9"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_List["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))),
                  style: v.style
              };
          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(Game_Core.Undo.value)) ]);
      };
  };
  var iconSizesGroup = function (dictMsgWithCore) {
      return function (state) {
          return function (sizeList) {
              return function (customSize) {
                  var csize = Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget));
                  var crows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
                  var ccols = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
                  return icongroup("Dimensions de la grille")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(sizeList)(function (v) {
                      return iconbutton(state)(function (v1) {
                          return {
                              icon: UI_Icon.IconText.create(Data_Show.show(Data_Show.showInt)(v.value0) + ("x" + Data_Show.show(Data_Show.showInt)(v.value1))),
                              selected: v.value0 === crows && (v.value1 === ccols && !csize),
                              tooltip: v1.tooltip,
                              round: v1.round,
                              large: v1.large,
                              hidden: v1.hidden,
                              disabled: v1.disabled,
                              style: v1.style
                          };
                      })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetGridSize(v.value0, v.value1, false))) ]);
                  }))((function () {
                      if (customSize) {
                          return [ iconbutton(state)(function (v) {
                              return {
                                  icon: new UI_Icon.IconText("NxM"),
                                  selected: csize,
                                  tooltip: new Data_Maybe.Just("Taille personnalis\xe9e"),
                                  round: v.round,
                                  large: v.large,
                                  hidden: v.hidden,
                                  disabled: v.disabled,
                                  style: v.style
                              };
                          })([ Pha_Events.onclick(Game_Core.core(dictMsgWithCore)(new Game_Core.SetCustomSize(true))) ]) ];
                      };
                      return [  ];
                  })()));
              };
          };
      };
  };
  var iconSelectGroupM = function (dictShow) {
      return function (dictEq) {
          return function (dictFoldable) {
              return function (state) {
                  return function (title) {
                      return function (values) {
                          return function (selected) {
                              return function (action) {
                                  return function (optionFn) {
                                      return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                          return iconbutton(state)((function () {
                                              var $34 = optionFn(val);
                                              return function ($35) {
                                                  return $34((function (v) {
                                                      return {
                                                          icon: UI_Icon.IconText.create(Data_Show.show(dictShow)(val)),
                                                          selected: Data_Foldable.elem(dictFoldable)(dictEq)(val)(selected),
                                                          tooltip: v.tooltip,
                                                          round: v.round,
                                                          large: v.large,
                                                          hidden: v.hidden,
                                                          disabled: v.disabled,
                                                          style: v.style
                                                      };
                                                  })($35));
                                              };
                                          })())([ Pha_Events.onclick(action(val)) ]);
                                      }));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var iconSelectGroup = function (dictShow) {
      return function (dictEq) {
          return function (state) {
              return function (title) {
                  return function (values) {
                      return function (selected) {
                          return function (action) {
                              return function (optionFn) {
                                  return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                      return iconbutton(state)((function () {
                                          var $36 = optionFn(val);
                                          return function ($37) {
                                              return $36((function (v) {
                                                  return {
                                                      icon: UI_Icon.IconText.create(Data_Show.show(dictShow)(val)),
                                                      selected: Data_Eq.eq(dictEq)(val)(selected),
                                                      tooltip: v.tooltip,
                                                      round: v.round,
                                                      large: v.large,
                                                      hidden: v.hidden,
                                                      disabled: v.disabled,
                                                      style: v.style
                                                  };
                                              })($37));
                                          };
                                      })())([ Pha_Events.onclick(action(val)) ]);
                                  }));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["icongroup"] = icongroup;
  exports["iundo"] = iundo;
  exports["iredo"] = iredo;
  exports["ireset"] = ireset;
  exports["ihelp"] = ihelp;
  exports["irules"] = irules;
  exports["iconSelectGroup"] = iconSelectGroup;
  exports["iconSelectGroupM"] = iconSelectGroupM;
  exports["iconSizesGroup"] = iconSizesGroup;
  exports["icons2Players"] = icons2Players;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Common"] = $PS["Game.Common"] || {};
  var exports = $PS["Game.Common"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];                
  var pointerDecoder = function (f) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Pha_Events_Decoder.currentTarget(f))(Pha_Events_Decoder.getBoundingClientRect))(function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("clientX")(f))(Foreign.readNumber))(function (v1) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("clientY")(f))(Foreign.readNumber))(function (v2) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                      x: (v1 - v.left) / v.width,
                      y: (v2 - v.top) / v.height
                  });
              });
          });
      });
  };
  exports["pointerDecoder"] = pointerDecoder;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["UI.Dialog"] = $PS["UI.Dialog"] || {};
  var exports = $PS["UI.Dialog"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];                
  var dialog = function (v) {
      return function (children) {
          return Pha_Elements.div([ Pha.class_("ui-absolute ui-flex-center ui-dialog-container") ])([ Pha_Elements.div([ Pha.class_("ui-dialog") ])([ Pha_Elements.div([ Pha.class_("ui-dialog-head") ])([ Pha_Elements.div([ Pha.class_("ui-dialog-title") ])([ Pha.text(v.title) ]) ]), Pha_Elements.div([ Pha.class_("ui-dialog-body") ])(children), Pha_Elements.div([ Pha.class_("ui-dialog-buttons") ])(Data_Array.catMaybes([ Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.onCancel)(function (action) {
              return Pha_Elements.button([ Pha.class_("ui-button ui-button-primary"), Pha_Events.onclick(action) ])([ Pha.text("Annuler") ]);
          }), Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.onOk)(function (action) {
              return Pha_Elements.button([ Pha.class_("ui-button ui-button-primary"), Pha_Events.onclick(action) ])([ Pha.text("Ok") ]);
          }) ])) ]) ]);
      };
  };
  exports["dialog"] = dialog;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["UI.IncDecGrid"] = $PS["UI.IncDecGrid"] || {};
  var exports = $PS["UI.IncDecGrid"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var UI_Icon = $PS["UI.Icon"];                
  var incDecGrid = function (v) {
      return function (children) {
          return Pha_Elements.div([ Pha.class_("ui-incdecgrid") ])([ Pha_Elements.div([ Pha.class_("flex") ])([ Pha_Elements.div([ Pha.class_("ui-flex-center ui-incdecgrid-container") ])(children), Pha.ifN(v.showRowButtons)(function (v1) {
              return Pha_Elements.div([ Pha.class_("ui-flex-center ui-incdecgrid-rows") ])([ UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#plus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v.locked,
                      style: v2.style
                  };
              })([ Pha_Events.onclick(v.resize(v.nbRows + 1 | 0)(v.nbColumns)) ]), Pha_Elements.div([ Pha.class_("ui-incdecgrid-text") ])([ Pha_Elements.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbRows)) ]) ]), UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#minus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v.locked,
                      style: v2.style
                  };
              })([ Pha_Events.onclick(v.resize(v.nbRows - 1 | 0)(v.nbColumns)) ]) ]);
          }) ]), Pha.ifN(v.showColButtons)(function (v1) {
              return Pha_Elements.div([ Pha.class_("ui-flex-center ui-incdecgrid-cols") ])([ UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#minus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v.locked,
                      style: v2.style
                  };
              })([ Pha_Events.onclick(v.resize(v.nbRows)(v.nbColumns - 1 | 0)) ]), Pha_Elements.div([ Pha.class_("ui-incdecgrid-text") ])([ Pha_Elements.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbColumns)) ]) ]), UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#plus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v.locked,
                      style: v2.style
                  };
              })([ Pha_Events.onclick(v.resize(v.nbRows)(v.nbColumns + 1 | 0)) ]) ]);
          }) ]);
      };
  };
  exports["incDecGrid"] = incDecGrid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["UI.Template"] = $PS["UI.Template"] || {};
  var exports = $PS["UI.Template"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Game_Common = $PS["Game.Common"];
  var Game_Core = $PS["Game.Core"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Dialog = $PS["UI.Dialog"];
  var UI_IncDecGrid = $PS["UI.IncDecGrid"];                
  var winTitleFor2Players = function (state) {
      var $16 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
      if ($16) {
          return "Le " + ((function () {
              var $17 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
              if ($17) {
                  return "premier";
              };
              return "second";
          })() + " joueur gagne");
      };
      var $18 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
      if ($18) {
          return "Tu as gagn\xe9";
      };
      return "L'IA gagne";
  };
  var winPanel = function (title) {
      return function (visible) {
          return Pha_Elements.div([ Pha.class_("ui-flex-center ui-absolute component-win-container") ])([ Pha_Elements.div([ Pha.class_("component-win"), Pha["class'"]("visible")(visible) ])([ Pha.text(title) ]) ]);
      };
  };
  var turnMessage = function (dictGame) {
      return function (state) {
          var $19 = Game_Core.isLevelFinished(dictGame)(state);
          if ($19) {
              return "Partie finie";
          };
          var $20 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
          if ($20) {
              return "Tour du premier joueur";
          };
          var $21 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
          if ($21) {
              return "Tour du second joueur";
          };
          return "Tour de l'IA";
      };
  };
  var trackPointer = function (dictMsgWithCore) {
      var move = function (e) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Game_Core.core(dictMsgWithCore))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Functor.map(Data_Functor.functorFn)(Game_Core.SetPointer.create)(Data_Maybe.Just.create))(Game_Common.pointerDecoder(e)));
      };
      return [ Pha.style("touch-action")("none"), Pha_Events.on("pointermove")(move), Pha_Events.onpointerleave(Game_Core.core(dictMsgWithCore)(new Game_Core.SetPointer(Data_Maybe.Nothing.value))), Pha_Events.on("pointerdown")(move) ];
  };
  var incDecGrid = function (dictMsgWithCore) {
      return function (dictGame) {
          return function (state) {
              var v = Game_Core.sizeLimit(dictGame)(state);
              return UI_IncDecGrid.incDecGrid({
                  locked: Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget)),
                  nbRows: Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)),
                  nbColumns: Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
                  showRowButtons: v.value0 < v.value2,
                  showColButtons: v.value1 < v.value3,
                  customSize: Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget)),
                  resize: function (x) {
                      return function (y) {
                          return Game_Core.core(dictMsgWithCore)(new Game_Core.SetGridSize(x, y, true));
                      };
                  }
              });
          };
      };
  };
  var gridStyle = function (rows) {
      return function (columns) {
          return function (limit) {
              var m = Data_Int.toNumber(Data_Ord.max(Data_Ord.ordInt)(limit)(Data_Ord.max(Data_Ord.ordInt)(rows)(columns)));
              return [ Pha.style("height")(Pha_Util.pc(Data_Int.toNumber(rows) / m)), Pha.style("width")(Pha_Util.pc(Data_Int.toNumber(columns) / m)) ];
          };
      };
  };
  var dialog = function (dictMsgWithCore) {
      return function (title) {
          return UI_Dialog.dialog({
              title: title,
              onCancel: Data_Maybe.Nothing.value,
              onOk: Data_Maybe.Just.create(Game_Core.core(dictMsgWithCore)(Game_Core.SetNoDialog.value))
          });
      };
  };
  var defaultElements = {
      board: Pha.emptyNode,
      config: Pha.emptyNode,
      rules: [ Pha.text("blah blah") ],
      winTitle: "GAGN\xc9",
      customDialog: function (v) {
          return Pha.emptyNode;
      },
      scoreDialog: function (v) {
          return Pha.emptyNode;
      }
  };
  var template = function (dictMsgWithCore) {
      return function (dictGame) {
          return function (elemFn) {
              return function (state) {
                  var v = elemFn(defaultElements);
                  var dialog$prime = function (v1) {
                      if (v1 instanceof Game_Core.Rules) {
                          return dialog(dictMsgWithCore)("R\xe8gles du jeu")(v.rules);
                      };
                      if (v1 instanceof Game_Core.ConfirmNewGameDialog) {
                          return UI_Dialog.dialog({
                              title: "Nouvelle partie",
                              onCancel: Data_Maybe.Just.create(Game_Core.core(dictMsgWithCore)(Game_Core.SetNoDialog.value)),
                              onOk: Data_Maybe.Just.create(Game_Core.core(dictMsgWithCore)(Game_Core.ConfirmNewGame.value))
                          })([ Pha.text("Tu es sur le point de cr\xe9er une nouvelle partie. Ta partie en cours sera perdue. Es-tu s\xfbr(e)?") ]);
                      };
                      if (v1 instanceof Game_Core.CustomDialog) {
                          return v.customDialog(Data_Unit.unit);
                      };
                      if (v1 instanceof Game_Core.ScoreDialog) {
                          return v.scoreDialog(Data_Unit.unit);
                      };
                      return Pha.emptyNode;
                  };
                  return Pha_Elements.div([  ])([ Pha_Elements.div([ Pha["class'"]("main-container")(true) ])([ Pha_Elements.div([  ])([ v.board, winPanel(v.winTitle)(Data_Lens_Getter.viewOn(state)(Game_Core["_showWin"](Data_Lens_Internal_Forget.strongForget))) ]), v.config ]), dialog$prime(Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget))) ]);
              };
          };
      };
  };
  var card = function (title) {
      return function (children) {
          return Pha_Elements.div([ Pha.class_("ui-card") ])([ Pha_Elements.div([ Pha.class_("ui-card-head ui-flex-center") ])([ Pha_Elements.div([ Pha.class_("ui-card-title") ])([ Pha.text(title) ]) ]), Pha_Elements.div([ Pha.class_("ui-card-body") ])(children) ]);
      };
  };
  exports["card"] = card;
  exports["incDecGrid"] = incDecGrid;
  exports["template"] = template;
  exports["gridStyle"] = gridStyle;
  exports["trackPointer"] = trackPointer;
  exports["turnMessage"] = turnMessage;
  exports["winTitleFor2Players"] = winTitleFor2Players;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Baseball.View"] = $PS["Game.Baseball.View"] || {};
  var exports = $PS["Game.Baseball.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Show = $PS["Data.Show"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var translatePeg = function (position) {
      return function (nbBases) {
          var mid = Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var x = 0.42 + 0.35 * $$Math.cos((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases)) + 0.1 * Data_Int.toNumber(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var y = 0.46 + 0.35 * $$Math.sin((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Util.translate(Pha_Util.pc(x))(Pha_Util.pc(y));
      };
  };
  var transformBase = function (i) {
      return function (nbBases) {
          var y = 0.5 + 0.35 * $$Math.sin((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          var x = 0.5 + 0.35 * $$Math.cos((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Util.translate(Pha_Util.pc(x))(Pha_Util.pc(y)) + " rotate(45deg)";
      };
  };
  var colors = [ "blue", "red", "green", "magenta", "orange", "black", "cyan", "gray" ];
  var dupColors = Control_Bind.bind(Control_Bind.bindArray)(colors)(function (x) {
      return [ x, x ];
  });
  var view = function (state) {
      var rules = [ Pha.text("blah blah blah blah") ];
      var nbBases = Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_nbBases"](Data_Lens_Internal_Forget.strongForget));
      var levelFinished = Game_Core.isLevelFinished(Game_Baseball_Model.baseballGame)(state);
      var config = UI_Template.card("Baseball multicolore")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(state)("Nombres de bases")([ 4, 5, 6, 7, 8 ])(nbBases)(Game_Baseball_Model.SetNbBases.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")([ UI_Icons.iundo(Game_Baseball_Model.withcore)(state), UI_Icons.iredo(Game_Baseball_Model.withcore)(state), UI_Icons.ireset(Game_Baseball_Model.withcore)(state), UI_Icons.irules(Game_Baseball_Model.withcore)(state) ]) ]);
      var board = Pha_Elements.div([ Pha["class'"]("ui-board baseball-board")(true) ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_Array.concat([ Data_Array.mapWithIndex(function (i) {
          return function (color) {
              return Pha_Svg.rect([ Pha_Svg.x_("-10"), Pha_Svg.y_("-10"), Pha_Svg.width("20"), Pha_Svg.height("20"), Pha.key("b" + Data_Show.show(Data_Show.showInt)(i)), Pha["class'"]("baseball-base")(true), Pha_Svg.stroke(color), Pha.style("transform")(transformBase(i)(nbBases)) ]);
          };
      })(Data_Array.take(nbBases)(colors)), Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(dupColors)(function (peg) {
          return function (pos) {
              return function (color) {
                  return Pha.ifN(peg !== Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_missingPeg"](Data_Lens_Internal_Forget.strongForget)))(function (v) {
                      return Pha_Svg.g([ Pha["class'"]("baseball-player")(true), Pha.style("transform")(translatePeg(pos)(nbBases)), Pha.key("p" + Data_Show.show(Data_Show.showInt)(peg)) ])([ Pha_Svg.use("#meeple")([ Pha_Svg.width("7"), Pha_Svg.height("7"), Pha_Events.onclick(new Game_Baseball_Model.Play(peg)), Pha_Svg.fill(color), Pha.style("animation")((function () {
                          if (levelFinished) {
                              return "baseballHola 4s linear " + (Data_Show.show(Data_Show.showInt)(1000 + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(2000 * peg | 0)(nbBases) | 0) + "ms infinite");
                          };
                          return "none";
                      })()), Pha.style("cursor")((function () {
                          var $3 = Game_Core.canPlay(Game_Baseball_Model.baseballGame)(state)(peg);
                          if ($3) {
                              return "pointer";
                          };
                          return "not-allowed";
                      })()) ]) ]);
                  });
              };
          };
      }) ])) ]);
      return UI_Template.template(Game_Baseball_Model.withcore)(Game_Baseball_Model.baseballGame)(function (v) {
          return {
              board: board,
              config: config,
              rules: rules,
              winTitle: v.winTitle,
              customDialog: v.customDialog,
              scoreDialog: v.scoreDialog
          };
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Chocolat.Model"] = $PS["Game.Chocolat.Model"] || {};
  var exports = $PS["Game.Chocolat.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Run = $PS["Run"];                
  var CornerMode = (function () {
      function CornerMode() {

      };
      CornerMode.value = new CornerMode();
      return CornerMode;
  })();
  var BorderMode = (function () {
      function BorderMode() {

      };
      BorderMode.value = new BorderMode();
      return BorderMode;
  })();
  var StandardMode = (function () {
      function StandardMode() {

      };
      StandardMode.value = new StandardMode();
      return StandardMode;
  })();
  var FromLeft = (function () {
      function FromLeft(value0) {
          this.value0 = value0;
      };
      FromLeft.create = function (value0) {
          return new FromLeft(value0);
      };
      return FromLeft;
  })();
  var FromRight = (function () {
      function FromRight(value0) {
          this.value0 = value0;
      };
      FromRight.create = function (value0) {
          return new FromRight(value0);
      };
      return FromRight;
  })();
  var FromTop = (function () {
      function FromTop(value0) {
          this.value0 = value0;
      };
      FromTop.create = function (value0) {
          return new FromTop(value0);
      };
      return FromTop;
  })();
  var FromBottom = (function () {
      function FromBottom(value0) {
          this.value0 = value0;
      };
      FromBottom.create = function (value0) {
          return new FromBottom(value0);
      };
      return FromBottom;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetHover = (function () {
      function SetHover(value0) {
          this.value0 = value0;
      };
      SetHover.create = function (value0) {
          return new SetHover(value0);
      };
      return SetHover;
  })();
  var SetSoapMode = (function () {
      function SetSoapMode(value0) {
          this.value0 = value0;
      };
      SetSoapMode.create = function (value0) {
          return new SetSoapMode(value0);
      };
      return SetSoapMode;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var showSoapMode = new Data_Show.Show(function (v) {
      return "";
  });
  var istate = Game_Core.genState({
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
  })(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 6,
          nbColumns: 7,
          customSize: v.customSize,
          mode: Game_Core.RandomMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      soap: {
          row: 0,
          col: 0
      },
      soapMode: CornerMode.value,
      moveWhenHover: Data_Maybe.Nothing.value
  });
  var eqSoapMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof CornerMode && y instanceof CornerMode) {
              return true;
          };
          if (x instanceof BorderMode && y instanceof BorderMode) {
              return true;
          };
          if (x instanceof StandardMode && y instanceof StandardMode) {
              return true;
          };
          return false;
      };
  });
  var cutLine = function (state) {
      var v = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function (v1) {
          if (v1 instanceof FromLeft) {
              return {
                  x1: v1.value0,
                  y1: v.top,
                  x2: v1.value0,
                  y2: v.bottom
              };
          };
          if (v1 instanceof FromRight) {
              return {
                  x1: v1.value0,
                  y1: v.top,
                  x2: v1.value0,
                  y2: v.bottom
              };
          };
          if (v1 instanceof FromTop) {
              return {
                  x1: v.left,
                  y1: v1.value0,
                  x2: v.right,
                  y2: v1.value0
              };
          };
          if (v1 instanceof FromBottom) {
              return {
                  x1: v.left,
                  y1: v1.value0,
                  x2: v.right,
                  y2: v1.value0
              };
          };
          throw new Error("Failed pattern match at Game.Chocolat.Model (line 77, column 17 - line 81, column 56): " + [ v1.constructor.name ]);
      };
  };
  var _ext$prime = function (dictStrong) {
      var $85 = Game_Core["_ext"](dictStrong);
      var $86 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($87) {
          return $85($86($87));
      };
  };
  var _moveWhenHover = function (dictStrong) {
      var $88 = _ext$prime(dictStrong);
      var $89 = Data_Lens_Lens.lens(function (v) {
          return v.moveWhenHover;
      })(function (v) {
          return function (v1) {
              return {
                  moveWhenHover: v1,
                  soap: v.soap,
                  soapMode: v.soapMode
              };
          };
      })(dictStrong);
      return function ($90) {
          return $88($89($90));
      };
  };
  var _soap = function (dictStrong) {
      var $91 = _ext$prime(dictStrong);
      var $92 = Data_Lens_Lens.lens(function (v) {
          return v.soap;
      })(function (v) {
          return function (v1) {
              return {
                  soap: v1,
                  moveWhenHover: v.moveWhenHover,
                  soapMode: v.soapMode
              };
          };
      })(dictStrong);
      return function ($93) {
          return $91($92($93));
      };
  };
  var _soapMode = function (dictStrong) {
      var $94 = _ext$prime(dictStrong);
      var $95 = Data_Lens_Lens.lens(function (v) {
          return v.soapMode;
      })(function (v) {
          return function (v1) {
              return {
                  soapMode: v1,
                  moveWhenHover: v.moveWhenHover,
                  soap: v.soap
              };
          };
      })(dictStrong);
      return function ($96) {
          return $94($95($96));
      };
  };
  var chocolat2Game = new Game_Core.TwoPlayersGame(function () {
      return gameChocolat;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return ((v1.col - v.left | 0) ^ ((v.right - v1.col | 0) - 1 | 0) ^ (v1.row - v.top | 0) ^ ((v.bottom - v1.row | 0) - 1 | 0)) === 0;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.left + 1 | 0)(v1.col))(FromLeft.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.col + 1 | 0)(v.right - 1 | 0))(FromRight.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.top + 1 | 0)(v1.row))(FromTop.create))(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.row + 1 | 0)(v.bottom - 1 | 0))(FromBottom.create))));
  });
  var gameChocolat = new Game_Core.Game(Game_Core["computerMove'"](chocolat2Game), function (st) {
      return Control_Applicative.pure(Run.applicativeRun)({
          left: 0,
          right: Data_Lens_Getter.viewOn(st)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
          top: 0,
          bottom: Data_Lens_Getter.viewOn(st)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))
      });
  }, (function () {
      var $97 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($98) {
          return (function (v) {
              return v.left === (v.right - 1 | 0) && v.top === (v.bottom - 1 | 0);
          })($97($98));
      };
  })(), function (state) {
      return Control_Bind.bind(Run.bindRun)((function () {
          var $71 = Data_Eq.eq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(StandardMode.value);
          if ($71) {
              return Pha_Effects_Random.randomInt(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          };
          return Control_Applicative.pure(Run.applicativeRun)(0);
      })())(function (v) {
          return Control_Bind.bind(Run.bindRun)((function () {
              var $73 = Data_Eq.notEq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(CornerMode.value);
              if ($73) {
                  return Pha_Effects_Random.randomInt(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)));
              };
              return Control_Applicative.pure(Run.applicativeRun)(0);
          })())(function (v1) {
              return Control_Applicative.pure(Run.applicativeRun)(Data_Lens_Setter.set(_soap(Data_Profunctor_Strong.strongFn))({
                  row: v,
                  col: v1
              })(state));
          });
      });
  }, function (st) {
      var p = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function (v) {
          if (v instanceof FromLeft) {
              return new Data_Maybe.Just({
                  left: v.value0,
                  bottom: p.bottom,
                  right: p.right,
                  top: p.top
              });
          };
          if (v instanceof FromTop) {
              return new Data_Maybe.Just({
                  top: v.value0,
                  bottom: p.bottom,
                  left: p.left,
                  right: p.right
              });
          };
          if (v instanceof FromRight) {
              return new Data_Maybe.Just({
                  right: v.value0,
                  bottom: p.bottom,
                  left: p.left,
                  top: p.top
              });
          };
          if (v instanceof FromBottom) {
              return new Data_Maybe.Just({
                  bottom: v.value0,
                  left: p.left,
                  right: p.right,
                  top: p.top
              });
          };
          throw new Error("Failed pattern match at Game.Chocolat.Model (line 44, column 15 - line 48, column 47): " + [ v.constructor.name ]);
      };
  }, Data_Function["const"](new Game_Core.SizeLimit(4, 4, 10, 10)), function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(gameChocolat)(v.value0);
      };
      if (v instanceof SetHover) {
          return Pha_Action.setState(Data_Lens_Setter.set(_moveWhenHover(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetSoapMode) {
          return Game_Core.newGame(gameChocolat)(Data_Lens_Setter.set(_soapMode(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Control_Apply.applySecond(Run.applyRun)(Pha_Action.setState(Data_Lens_Setter.set(_moveWhenHover(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)))(Game_Core.playA(gameChocolat)(v.value0));
      };
      throw new Error("Failed pattern match at Game.Chocolat.Model (line 87, column 1 - line 87, column 35): " + [ v.constructor.name ]);
  };
  exports["FromLeft"] = FromLeft;
  exports["FromRight"] = FromRight;
  exports["FromTop"] = FromTop;
  exports["FromBottom"] = FromBottom;
  exports["CornerMode"] = CornerMode;
  exports["BorderMode"] = BorderMode;
  exports["StandardMode"] = StandardMode;
  exports["_soap"] = _soap;
  exports["_soapMode"] = _soapMode;
  exports["_moveWhenHover"] = _moveWhenHover;
  exports["istate"] = istate;
  exports["cutLine"] = cutLine;
  exports["SetHover"] = SetHover;
  exports["SetSoapMode"] = SetSoapMode;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["eqSoapMode"] = eqSoapMode;
  exports["showSoapMode"] = showSoapMode;
  exports["gameChocolat"] = gameChocolat;
  exports["chocolat2Game"] = chocolat2Game;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Chocolat"] = $PS["Game.Chocolat"] || {};
  var exports = $PS["Game.Chocolat"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Core = $PS["Game.Core"];                
  var init = Game_Core.init(Game_Chocolat_Model.gameChocolat);
  exports["init"] = init;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Chocolat.View"] = $PS["Game.Chocolat.View"] || {};
  var exports = $PS["Game.Chocolat.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var inside = function (state) {
      return function (row) {
          return function (col) {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
              return col >= v.left && (col <= (v.right - 1 | 0) && (row >= v.top && row <= (v.bottom - 1 | 0)));
          };
      };
  };
  var view = function (state) {
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var pos = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var v = Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soap"](Data_Lens_Internal_Forget.strongForget));
      var winTitle = UI_Template.winTitleFor2Players(state);
      var rules = [ Pha.text("A chaque tour de ce jeu, tu peux d\xe9placer une pile de jetons vers une case adjacente"), Pha_Elements.br, Pha.text("qui contient au moins autant de jetons"), Pha_Elements.br, Pha.text("Le but est de finir la partie avec le moins de cases contenant des piles de jetons.") ];
      var cutter = function (row) {
          return function (col) {
              return function (move) {
                  return Pha_Svg.circle([ Pha_Svg.cx(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(col))), Pha_Svg.cy(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(row))), Pha_Svg.r("7"), Pha.key("c" + Data_Show.show(Data_Show.showInt)((row * (columns + 1 | 0) | 0) + col | 0)), Pha["class'"]("chocolat-cutter")(true), Pha_Events.onpointerenter(new Game_Chocolat_Model.SetHover(new Data_Maybe.Just(move))), Pha_Events.onpointerleave(new Game_Chocolat_Model.SetHover(Data_Maybe.Nothing.value)), Pha_Events.onclick(new Game_Chocolat_Model.Play(move)) ]);
              };
          };
      };
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(3))([ Pha["class'"]("ui-board")(true) ]))([ Pha_Svg.svg([ Pha_Svg.viewBox(-7 | 0)(-7 | 0)((50 * columns | 0) + 14 | 0)((50 * rows | 0) + 14 | 0) ])(Data_Array.concat([ Lib_Util.tabulate2(rows)(columns)(function (row) {
          return function (col) {
              return Pha_Svg.rect([ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(col) + 7.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(50.0 * Data_Int.toNumber(row) + 7.0)), Pha_Svg.width("36"), Pha_Svg.height("36"), Pha.key("choc" + Data_Show.show(Data_Show.showInt)((row * columns | 0) + col | 0)), Pha["class'"]("chocolat-square")(true), Pha["class'"]("soap")(row === v.row && col === v.col), Pha["class'"]("hidden")(!inside(state)(row)(col)) ]);
          };
      }), Control_Bind.bind(Control_Bind.bindArray)(Game_Core.possibleMoves(Game_Chocolat_Model.chocolat2Game)(state))(function (v1) {
          if (v1 instanceof Game_Chocolat_Model.FromLeft) {
              return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)) ];
          };
          if (v1 instanceof Game_Chocolat_Model.FromRight) {
              return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)) ];
          };
          if (v1 instanceof Game_Chocolat_Model.FromTop) {
              return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromTop(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromTop(v1.value0)) ];
          };
          if (v1 instanceof Game_Chocolat_Model.FromBottom) {
              return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromBottom(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromBottom(v1.value0)) ];
          };
          throw new Error("Failed pattern match at Game.Chocolat.View (line 62, column 41 - line 66, column 106): " + [ v1.constructor.name ]);
      }), [ Pha_Svg.use("#skull")([ Pha_Svg.x_(Data_Show.show(Data_Show.showInt)((50 * v.col | 0) + 12 | 0)), Pha_Svg.y_(Data_Show.show(Data_Show.showInt)((50 * v.row | 0) + 12 | 0)), Pha_Svg.width("26"), Pha_Svg.height("26"), Pha.key("skull"), Pha_Svg.fill("#20AF20") ]), Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_moveWhenHover"](Data_Lens_Internal_Forget.strongForget)))(function (m) {
          var v1 = Game_Chocolat_Model.cutLine(state)(m);
          return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showInt)(50 * v1.x1 | 0)), Pha_Svg.y1(Data_Show.show(Data_Show.showInt)(50 * v1.y1 | 0)), Pha_Svg.x2(Data_Show.show(Data_Show.showInt)(50 * v1.x2 | 0)), Pha_Svg.y2(Data_Show.show(Data_Show.showInt)(50 * v1.y2 | 0)), Pha.key("line"), Pha.class_("chocolat-line-to-pointer") ]);
      })) ] ])) ]);
      var config = UI_Template.card("Barre de chocolat")([ UI_Icons.iconSizesGroup(Game_Chocolat_Model.withcore)(state)([ new Data_Tuple.Tuple(6, 7) ])(true), UI_Icons.iconSelectGroup(Game_Chocolat_Model.showSoapMode)(Game_Chocolat_Model.eqSoapMode)(state)("Emplacement du savon")([ Game_Chocolat_Model.CornerMode.value, Game_Chocolat_Model.BorderMode.value, Game_Chocolat_Model.StandardMode.value ])(Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soapMode"](Data_Lens_Internal_Forget.strongForget)))(Game_Chocolat_Model.SetSoapMode.create)(function (mode) {
          return function (opt) {
              if (mode instanceof Game_Chocolat_Model.CornerMode) {
                  return {
                      icon: new UI_Icon.IconSymbol("#choc-mode0"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Dans le coin"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (mode instanceof Game_Chocolat_Model.BorderMode) {
                  return {
                      icon: new UI_Icon.IconSymbol("#choc-mode1"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Sur un bord"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (mode instanceof Game_Chocolat_Model.StandardMode) {
                  return {
                      icon: new UI_Icon.IconSymbol("#choc-mode2"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("N'importe o\xf9"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              throw new Error("Failed pattern match at Game.Chocolat.View (line 29, column 57 - line 32, column 100): " + [ mode.constructor.name ]);
          };
      }), UI_Icons.icons2Players(Game_Chocolat_Model.withcore)(Game_Chocolat_Model.gameChocolat)(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Chocolat_Model.withcore), UI_Icons.iredo(Game_Chocolat_Model.withcore), UI_Icons.ireset(Game_Chocolat_Model.withcore), UI_Icons.irules(Game_Chocolat_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = UI_Template.incDecGrid(Game_Chocolat_Model.withcore)(Game_Chocolat_Model.gameChocolat)(state)([ grid, Pha_Elements.span([ Pha["class'"]("frog-turn-message")(true) ])([ Pha.text(UI_Template.turnMessage(Game_Chocolat_Model.gameChocolat)(state)) ]) ]);
      return UI_Template.template(Game_Chocolat_Model.withcore)(Game_Chocolat_Model.gameChocolat)(function (v1) {
          return {
              board: board,
              config: config,
              rules: rules,
              winTitle: winTitle,
              customDialog: v1.customDialog,
              scoreDialog: v1.scoreDialog
          };
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Dessin.Model"] = $PS["Game.Dessin.Model"] || {};
  var exports = $PS["Game.Dessin.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Run = $PS["Run"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetGraphIndex = (function () {
      function SetGraphIndex(value0) {
          this.value0 = value0;
      };
      SetGraphIndex.create = function (value0) {
          return new SetGraphIndex(value0);
      };
      return SetGraphIndex;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Edge = (function () {
      function Edge(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Edge.create = function (value0) {
          return function (value1) {
              return new Edge(value0, value1);
          };
      };
      return Edge;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var nbRaises = (function () {
      var $63 = Data_Array.filter(Data_Maybe.isNothing);
      var $64 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($65) {
          return Data_Array.length($63($64($65)));
      };
  })();
  var house = {
      vertices: [ {
          x: 1.0,
          y: 4.0
      }, {
          x: 3.0,
          y: 4.0
      }, {
          x: 1.0,
          y: 2.0
      }, {
          x: 3.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 1.0
      } ],
      edges: [ new Edge(0, 1), new Edge(0, 2), new Edge(0, 3), new Edge(1, 2), new Edge(1, 3), new Edge(2, 3), new Edge(2, 4), new Edge(3, 4) ]
  };
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      graphIndex: 0,
      graph: house
  });
  var ex3 = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 1.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 3.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 1.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 1.0
      }, {
          x: 2.0,
          y: 2.0
      } ])(function (v) {
          return {
              x: v.x * 1.3,
              y: v.y * 1.3 - 0.3
          };
      }),
      edges: [ new Edge(0, 1), new Edge(1, 2), new Edge(2, 3), new Edge(3, 0), new Edge(0, 8), new Edge(1, 8), new Edge(2, 8), new Edge(3, 8), new Edge(0, 4), new Edge(1, 4), new Edge(0, 5), new Edge(3, 5), new Edge(2, 6), new Edge(3, 6), new Edge(1, 7), new Edge(2, 7) ]
  };
  var ex2 = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 1.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 3.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 1.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 3.0
      }, {
          x: 3.0,
          y: 1.0
      } ])(function (v) {
          return {
              x: v.x * 1.3,
              y: v.y * 1.3 - 0.3
          };
      }),
      edges: [ new Edge(0, 1), new Edge(1, 2), new Edge(2, 3), new Edge(3, 0), new Edge(0, 2), new Edge(0, 4), new Edge(1, 4), new Edge(0, 5), new Edge(3, 5), new Edge(2, 6), new Edge(3, 6), new Edge(1, 7), new Edge(2, 7) ]
  };
  var ex1 = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 1.0,
          y: 0.0
      }, {
          x: 0.0,
          y: 1.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 2.0
      }, {
          x: 0.0,
          y: 3.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 1.0,
          y: 4.0
      }, {
          x: 0.0,
          y: 5.0
      }, {
          x: 2.0,
          y: 5.0
      } ])(function (v) {
          return {
              x: v.x * 0.9 + 1.0,
              y: v.y * 0.9 + 0.2
          };
      }),
      edges: [ new Edge(0, 1), new Edge(0, 2), new Edge(1, 2), new Edge(1, 3), new Edge(2, 3), new Edge(3, 4), new Edge(3, 5), new Edge(4, 5), new Edge(1, 4), new Edge(2, 5), new Edge(4, 6), new Edge(5, 6), new Edge(6, 7), new Edge(6, 8), new Edge(4, 7), new Edge(5, 8) ]
  };
  var eqEdge = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0 === v1.value0 && v.value1 === v1.value1 || v.value0 === v1.value1 && v1.value0 === v.value1;
      };
  });
  var edgesOf = (function () {
      var toEdge = function (v) {
          if (v.value0 instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(new Edge(v.value0.value0, v.value1.value0));
          };
          return Data_Maybe.Nothing.value;
      };
      var $66 = Data_Array.mapMaybe(toEdge);
      return function ($67) {
          return $66(Lib_Util.pairwise($67));
      };
  })();
  var cross = {
      vertices: Data_Functor.mapFlipped(Data_Functor.functorArray)([ {
          x: 0.0,
          y: 1.0
      }, {
          x: 0.0,
          y: 2.0
      }, {
          x: 0.5,
          y: 1.5
      }, {
          x: 1.0,
          y: 0.0
      }, {
          x: 1.0,
          y: 1.0
      }, {
          x: 1.0,
          y: 2.0
      }, {
          x: 1.0,
          y: 3.0
      }, {
          x: 1.5,
          y: 0.5
      }, {
          x: 1.5,
          y: 1.5
      }, {
          x: 1.5,
          y: 2.5
      }, {
          x: 2.0,
          y: 0.0
      }, {
          x: 2.0,
          y: 1.0
      }, {
          x: 2.0,
          y: 2.0
      }, {
          x: 2.0,
          y: 3.0
      }, {
          x: 2.5,
          y: 1.5
      }, {
          x: 3.0,
          y: 1.0
      }, {
          x: 3.0,
          y: 2.0
      } ])(function (v) {
          return {
              x: v.x * 1.3 + 0.5,
              y: v.y * 1.3 + 0.5
          };
      }),
      edges: [ new Edge(0, 1), new Edge(0, 2), new Edge(1, 2), new Edge(0, 4), new Edge(1, 5), new Edge(2, 4), new Edge(2, 5), new Edge(3, 4), new Edge(4, 5), new Edge(5, 6), new Edge(3, 7), new Edge(4, 7), new Edge(4, 8), new Edge(5, 8), new Edge(5, 9), new Edge(6, 9), new Edge(3, 10), new Edge(4, 11), new Edge(5, 12), new Edge(6, 13), new Edge(7, 10), new Edge(7, 11), new Edge(8, 11), new Edge(8, 12), new Edge(9, 12), new Edge(9, 13), new Edge(10, 11), new Edge(11, 12), new Edge(12, 13), new Edge(11, 14), new Edge(12, 14), new Edge(11, 15), new Edge(12, 16), new Edge(14, 15), new Edge(14, 16), new Edge(15, 16) ]
  };
  var graphs = [ house, ex1, ex2, ex3, cross ];
  var _ext$prime = function (dictStrong) {
      var $68 = Game_Core["_ext"](dictStrong);
      var $69 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($70) {
          return $68($69($70));
      };
  };
  var _graph = function (dictStrong) {
      var $71 = _ext$prime(dictStrong);
      var $72 = Data_Lens_Lens.lens(function (v) {
          return v.graph;
      })(function (v) {
          return function (v1) {
              return {
                  graph: v1,
                  graphIndex: v.graphIndex
              };
          };
      })(dictStrong);
      return function ($73) {
          return $71($72($73));
      };
  };
  var _graphIndex = function (dictStrong) {
      var $74 = _ext$prime(dictStrong);
      var $75 = Data_Lens_Lens.lens(function (v) {
          return v.graphIndex;
      })(function (v) {
          return function (v1) {
              return {
                  graphIndex: v1,
                  graph: v.graph
              };
          };
      })(dictStrong);
      return function ($76) {
          return $74($75($76));
      };
  };
  var gameDessin = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Maybe.Nothing.value);
  }, function (v) {
      return Control_Applicative.pure(Run.applicativeRun)([  ]);
  }, function (state) {
      return Data_Array.length(edgesOf(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))) === Data_Array.length((Data_Lens_Getter.viewOn(state)(_graph(Data_Lens_Internal_Forget.strongForget))).edges);
  }, function (state) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Lens_Setter.set(_graph(Data_Profunctor_Strong.strongFn))(Data_Maybe.fromMaybe(house)(Data_Array.index(graphs)(Data_Lens_Getter.viewOn(state)(_graphIndex(Data_Lens_Internal_Forget.strongForget)))))(state));
  }, function (state) {
      return function (x) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var v = new Data_Tuple.Tuple(x, Data_Array.last(position));
          if (v.value0 instanceof Data_Maybe.Nothing && (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Data_Maybe.Just)) {
              return new Data_Maybe.Just(Data_Array.snoc(position)(x));
          };
          if (v.value0 instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_Maybe.Just && (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Data_Maybe.Just)) {
              var $53 = !Data_Foldable.elem(Data_Foldable.foldableArray)(eqEdge)(new Edge(v.value0.value0, v.value1.value0.value0))(edgesOf(position)) && Data_Foldable.elem(Data_Foldable.foldableArray)(eqEdge)(new Edge(v.value0.value0, v.value1.value0.value0))((Data_Lens_Getter.viewOn(state)(_graph(Data_Lens_Internal_Forget.strongForget))).edges);
              if ($53) {
                  return new Data_Maybe.Just(Data_Array.snoc(position)(x));
              };
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(Data_Array.snoc(position)(x));
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(gameDessin)(v.value0);
      };
      if (v instanceof SetGraphIndex) {
          return Game_Core.newGame(gameDessin)(Data_Lens_Setter.set(_graphIndex(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Game_Core.playA(gameDessin)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Dessin.Model (line 120, column 1 - line 120, column 35): " + [ v.constructor.name ]);
  };
  exports["_graphIndex"] = _graphIndex;
  exports["_graph"] = _graph;
  exports["istate"] = istate;
  exports["edgesOf"] = edgesOf;
  exports["nbRaises"] = nbRaises;
  exports["SetGraphIndex"] = SetGraphIndex;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["gameDessin"] = gameDessin;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Dessin"] = $PS["Game.Dessin"] || {};
  var exports = $PS["Game.Dessin"];
  var Game_Core = $PS["Game.Core"];
  var Game_Dessin_Model = $PS["Game.Dessin.Model"];                
  var init = Game_Core.init(Game_Dessin_Model.gameDessin);
  exports["init"] = init;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Dessin.View"] = $PS["Game.Dessin.View"] || {};
  var exports = $PS["Game.Dessin.View"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Dessin_Model = $PS["Game.Dessin.Model"];
  var Pha = $PS["Pha"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var Pha_Svg = $PS["Pha.Svg"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var getCoords = function (graph) {
      return function (u) {
          return Data_Maybe.fromMaybe({
              x: 0.0,
              y: 0.0
          })(Data_Array.index(graph.vertices)(u));
      };
  };
  var getCoordsOfEdge = function (graph) {
      return function (v) {
          var v2 = getCoords(graph)(v.value0);
          var v3 = getCoords(graph)(v.value1);
          return {
              px1: v2.x,
              px2: v3.x,
              py1: v2.y,
              py2: v3.y
          };
      };
  };
  var currentLine = function (p1) {
      return function (p2) {
          return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(100.0 * p1.x)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(100.0 * p1.y)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(20.0 * p2.x)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(20.0 * p2.y)), Pha.class_("dessin-line-to-pointer") ]);
      };
  };
  var view = function (state) {
      var rules = [ Pha.text("blah blah blah blah blah blah blah blah"), Pha_Elements.br, Pha.text("blah blah blah blah blah blah blah blah") ];
      var raises = Game_Dessin_Model.nbRaises(state);
      var s = (function () {
          var $18 = raises > 1;
          if ($18) {
              return "s";
          };
          return "";
      })();
      var winTitle = "Tu as r\xe9ussi en " + (Data_Show.show(Data_Show.showInt)(raises) + (" lev\xe9" + s));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var graph = Data_Lens_Getter.viewOn(state)(Game_Dessin_Model["_graph"](Data_Lens_Internal_Forget.strongForget));
      var config = UI_Template.card("Dessin")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(state)("Dessin")([ 0, 1, 2, 3, 4 ])(Data_Lens_Getter.viewOn(state)(Game_Dessin_Model["_graphIndex"](Data_Lens_Internal_Forget.strongForget)))(Game_Dessin_Model.SetGraphIndex.create)(function (i) {
          return function (v) {
              return {
                  icon: new UI_Icon.IconText(Data_Show.show(Data_Show.showInt)(i + 1 | 0)),
                  selected: v.selected,
                  tooltip: v.tooltip,
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          };
      }), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Dessin_Model.withcore), UI_Icons.iredo(Game_Dessin_Model.withcore), UI_Icons.ireset(Game_Dessin_Model.withcore), UI_Icons.irules(Game_Dessin_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.trackPointer(Game_Dessin_Model.withcore))([ Pha.class_("ui-board dessin-board"), Pha_Events.custom("contextmenu")(Pha_Events_Decoder.always({
          message: new Data_Maybe.Just(new Game_Dessin_Model.Play(Data_Maybe.Nothing.value)),
          preventDefault: true,
          stopPropagation: false
      })) ]))([ Pha_Svg.svg([ Pha["class'"]("dessin-svg")(true), Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_Array.concat([ Data_Functor.mapFlipped(Data_Functor.functorArray)(graph.edges)(function (edge) {
          var v = getCoordsOfEdge(graph)(edge);
          return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(20.0 * v.px1)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(20.0 * v.py1)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(20.0 * v.px2)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(20.0 * v.py2)), Pha_Svg.stroke("grey"), Pha_Svg.strokeDasharray("3,1") ]);
      }), Data_Functor.mapFlipped(Data_Functor.functorArray)(Game_Dessin_Model.edgesOf(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))))(function (edge) {
          var v = getCoordsOfEdge(graph)(edge);
          return Pha_Svg.line([ Pha_Svg.x1(Data_Show.show(Data_Show.showNumber)(20.0 * v.px1)), Pha_Svg.y1(Data_Show.show(Data_Show.showNumber)(20.0 * v.py1)), Pha_Svg.x2(Data_Show.show(Data_Show.showNumber)(20.0 * v.px2)), Pha_Svg.y2(Data_Show.show(Data_Show.showNumber)(20.0 * v.py2)), Pha_Svg.stroke("red"), Pha_Svg.strokeWidth("1.5") ]);
      }), Data_Array.mapWithIndex(function (i) {
          return function (v) {
              return Pha_Svg.circle([ Pha_Svg.cx(Data_Show.show(Data_Show.showNumber)(20.0 * v.x)), Pha_Svg.cy(Data_Show.show(Data_Show.showNumber)(20.0 * v.y)), Pha_Svg.r("3"), Pha_Svg.stroke((function () {
                  var $30 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Maybe.eqMaybe(Data_Eq.eqInt)))(new Data_Maybe.Just(new Data_Maybe.Just(i)))(Data_Array.last(position));
                  if ($30) {
                      return "red";
                  };
                  return "blue";
              })()), Pha_Svg.fill("blue"), Pha_Events.onclick(new Game_Dessin_Model.Play(new Data_Maybe.Just(i))) ]);
          };
      })(graph.vertices), [ Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(currentLine)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(Data_Functor.map(Data_Maybe.functorMaybe)(getCoords(graph))(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.last(position))))) ] ])), Pha_Elements.span([ Pha["class'"]("dessin-raise-info dessin-raise-info")(true) ])([ Pha.text(Data_Show.show(Data_Show.showInt)(raises) + (" lev\xe9" + (s + " de crayon"))) ]), Pha_Elements.button([ Pha["class'"]("ui-button ui-button-primary dessin-raise")(true), Pha_Attributes.disabled(!Game_Core.canPlay(Game_Dessin_Model.gameDessin)(state)(Data_Maybe.Nothing.value)), Pha_Events.onclick(new Game_Dessin_Model.Play(Data_Maybe.Nothing.value)) ])([ Pha.text("Lever le crayon") ]) ]);
      return UI_Template.template(Game_Dessin_Model.withcore)(Game_Dessin_Model.gameDessin)(function (v) {
          return {
              board: board,
              config: config,
              rules: rules,
              winTitle: winTitle,
              customDialog: v.customDialog,
              scoreDialog: v.scoreDialog
          };
      })(state);
  };
  exports["view"] = view;
})(PS);
(function(exports) {
  exports.getLoc = () => Object.assign({}, window.location);
})(PS["Game.Effs"] = PS["Game.Effs"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Effs"] = $PS["Game.Effs"] || {};
  var exports = $PS["Game.Effs"];
  var $foreign = $PS["Game.Effs"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect = $PS["Effect"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Run = $PS["Run"];                
  var GetLocation = (function () {
      function GetLocation(value0) {
          this.value0 = value0;
      };
      GetLocation.create = function (value0) {
          return new GetLocation(value0);
      };
      return GetLocation;
  })();
  var interpretEffects = Data_Functor_Variant.match()()()({
      delay: Pha_Effects_Delay.interpretDelay,
      rng: Pha_Effects_Random.interpretRng,
      location: function (v) {
          return Control_Bind.bind(Effect.bindEffect)($foreign.getLoc)(v.value0);
      }
  });
  var functorLoc = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new GetLocation(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
      };
  });
  var getLocation = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "location";
  }))(functorLoc)(Data_Symbol.SProxy.value)(new GetLocation(Control_Category.identity(Control_Category.categoryFn)));
  exports["getLocation"] = getLocation;
  exports["interpretEffects"] = interpretEffects;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Frog.Model"] = $PS["Game.Frog.Model"] || {};
  var exports = $PS["Game.Frog.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];
  var Run = $PS["Run"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SelectMove = (function () {
      function SelectMove(value0) {
          this.value0 = value0;
      };
      SelectMove.create = function (value0) {
          return new SelectMove(value0);
      };
      return SelectMove;
  })();
  var Mark = (function () {
      function Mark(value0) {
          this.value0 = value0;
      };
      Mark.create = function (value0) {
          return new Mark(value0);
      };
      return Mark;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var winningPositions = function (dictFoldable) {
      return function (size) {
          return function (moves) {
              var t = Lib_Util.tabulate(size)(function (i) {
                  return Data_Lazy.defer(function (v) {
                      return i === 0 || Data_Foldable.all(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (m) {
                          return Data_Maybe.maybe(false)((function () {
                              var $31 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                              return function ($32) {
                                  return $31(Data_Lazy.force($32));
                              };
                          })())(Data_Array.index(t)(i - m | 0));
                      })(moves);
                  });
              });
              return Data_Functor.mapFlipped(Data_Functor.functorArray)(t)(Data_Lazy.force);
          };
      };
  };
  var istate = Game_Core.genState(20)(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 20,
          nbColumns: v.nbColumns,
          customSize: true,
          mode: Game_Core.ExpertMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      moves: Data_Array_NonEmpty.cons(1)(Data_Array_NonEmpty.cons(2)(Data_Array_NonEmpty.singleton(3))),
      winning: [  ],
      marked: [  ],
      keySequence: [  ]
  });
  var _ext$prime = function (dictStrong) {
      var $33 = Game_Core["_ext"](dictStrong);
      var $34 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($35) {
          return $33($34($35));
      };
  };
  var _marked = function (dictStrong) {
      var $39 = _ext$prime(dictStrong);
      var $40 = Data_Lens_Lens.lens(function (v) {
          return v.marked;
      })(function (v) {
          return function (v1) {
              return {
                  marked: v1,
                  keySequence: v.keySequence,
                  moves: v.moves,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($41) {
          return $39($40($41));
      };
  };
  var _moves = function (dictStrong) {
      var $42 = _ext$prime(dictStrong);
      var $43 = Data_Lens_Lens.lens(function (v) {
          return v.moves;
      })(function (v) {
          return function (v1) {
              return {
                  moves: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($44) {
          return $42($43($44));
      };
  };
  var canPlay = function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var moves = Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget));
          var maximum = Data_Foldable.foldr(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Ord.max(Data_Ord.ordInt))(0)(moves);
          return Data_Foldable.elem(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Eq.eqInt)(position - v | 0)(moves) || position > 0 && (v === 0 && position <= maximum);
      };
  };
  var reachableArray = function (state) {
      return Lib_Util.tabulate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(canPlay(state));
  };
  var _winning = function (dictStrong) {
      var $45 = _ext$prime(dictStrong);
      var $46 = Data_Lens_Lens.lens(function (v) {
          return v.winning;
      })(function (v) {
          return function (v1) {
              return {
                  winning: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  moves: v.moves
              };
          };
      })(dictStrong);
      return function ($47) {
          return $45($46($47));
      };
  };
  var frogGame2 = new Game_Core.TwoPlayersGame(function () {
      return frogGame;
  }, function (state) {
      return Data_Maybe.fromMaybe(true)(Data_Array.index(Data_Lens_Getter.viewOn(state)(_winning(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  }, function (state) {
      return Data_Array.filter(canPlay(state))(Lib_Util["range'"](0)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))));
  });
  var frogGame = new Game_Core.Game(Game_Core["computerMove'"](frogGame2), function (state) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      return Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)) === 0;
  }, function (state) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Lens_Setter.set(_marked(Data_Profunctor_Strong.strongFn))(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(false))(Data_Lens_Setter.set(_winning(Data_Profunctor_Strong.strongFn))(winningPositions(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget))))(state)));
  }, function (state) {
      return function (v) {
          var $25 = canPlay(state)(v);
          if ($25) {
              return new Data_Maybe.Just(v);
          };
          return Data_Maybe.Nothing.value;
      };
  }, function (v) {
      return new Game_Core.SizeLimit(5, 0, 30, 0);
  }, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(frogGame)(v.value0);
      };
      if (v instanceof SelectMove) {
          var selectMove = function (move1) {
              return function (moves) {
                  return Data_Maybe.fromMaybe(moves)(Data_Array_NonEmpty.fromArray(Data_Array.filter(function (m) {
                      return (m === move1) !== Data_Foldable.elem(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Eq.eqInt)(m)(moves);
                  })(Lib_Util["range'"](1)(5))));
              };
          };
          return Game_Core.newGame(frogGame)(Data_Lens_Setter.over(_moves(Data_Profunctor_Strong.strongFn))(selectMove(v.value0)));
      };
      if (v instanceof Mark) {
          return Pha_Action.setState(Data_Lens_Setter.over((function () {
              var $48 = _marked(Data_Profunctor_Strong.strongFn);
              var $49 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($50) {
                  return $48($49($50));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
      };
      if (v instanceof Play) {
          return Game_Core.playA(frogGame)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Frog.Model (line 76, column 1 - line 76, column 35): " + [ v.constructor.name ]);
  };
  exports["_moves"] = _moves;
  exports["_marked"] = _marked;
  exports["istate"] = istate;
  exports["reachableArray"] = reachableArray;
  exports["SelectMove"] = SelectMove;
  exports["Mark"] = Mark;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["frogGame"] = frogGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Frog"] = $PS["Game.Frog"] || {};
  var exports = $PS["Game.Frog"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];                
  var init = Game_Core.init(Game_Frog_Model.frogGame);
  exports["init"] = init;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Frog.View"] = $PS["Game.Frog.View"] || {};
  var exports = $PS["Game.Frog.View"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Events_Decoder = $PS["Pha.Events.Decoder"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var spiralPointsPolar = function (n) {
      return Data_Array.reverse(Lib_Util.tabulate(n + 1 | 0)(function (i) {
          var theta = $$Math.sqrt((function () {
              var $9 = i === n;
              if ($9) {
                  return 21.0;
              };
              return (Data_Int.toNumber(i) * 20.0) / Data_Int.toNumber(n);
          })()) * 1.36 * $$Math.pi;
          var radius = (61.0 * theta) / (2.0 * $$Math.pi);
          return {
              theta: theta,
              radius: radius
          };
      }));
  };
  var polarToCartesian = function (v) {
      return {
          x: v.radius * $$Math.cos(v.theta),
          y: v.radius * $$Math.sin(v.theta)
      };
  };
  var spiralPoints = function (n) {
      return Data_Functor.mapFlipped(Data_Functor.functorArray)(spiralPointsPolar(n))(polarToCartesian);
  };
  var lineIntersection = function (m1) {
      return function (b1) {
          return function (m2) {
              return function (b2) {
                  var x = (b2 - b1) / (m1 - m2);
                  return {
                      x: x,
                      y: m1 * x + b1
                  };
              };
          };
      };
  };
  var spiral = function (center) {
      return function (startRadius) {
          return function (radiusStep) {
              return function (startTheta) {
                  return function (endTheta) {
                      return function (thetaStep) {
                          return Data_String_Common.joinWith(" ")(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
                              return function (v) {
                                  var v1 = lineIntersection(v.value0.slope)(v.value0.intercept)(v.value1.slope)(v.value1.intercept);
                                  var p = [ "Q", Data_Show.show(Data_Show.showNumber)(v1.x + center.x), Data_Show.show(Data_Show.showNumber)(v1.y + center.y), Data_Show.show(Data_Show.showNumber)(v.value1.point.x), Data_Show.show(Data_Show.showNumber)(v.value1.point.y) ];
                                  var $15 = i === 0;
                                  if ($15) {
                                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "M", Data_Show.show(Data_Show.showNumber)(v.value0.point.x), Data_Show.show(Data_Show.showNumber)(v.value0.point.y) ])(p);
                                  };
                                  return p;
                              };
                          })(Lib_Util.pairwise(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util.floatRange(startTheta)(endTheta)(thetaStep))(function (theta) {
                              var b = radiusStep / (2.0 * $$Math.pi);
                              var r = startRadius + b * theta;
                              var point = {
                                  x: center.x + r * $$Math.cos(theta),
                                  y: center.y + r * $$Math.sin(theta)
                              };
                              var slope = (b * $$Math.sin(theta) + r * $$Math.cos(theta)) / (b * $$Math.cos(theta) - r * $$Math.sin(theta));
                              var intercept = -(slope * r * $$Math.cos(theta) - r * $$Math.sin(theta));
                              return {
                                  point: point,
                                  slope: slope,
                                  intercept: intercept
                              };
                          })))));
                      };
                  };
              };
          };
      };
  };
  var spiralPath = spiral({
      x: 0.0,
      y: 0.0
  })(0.0)(61.0)(0.0)((37.0 / 6.0) * $$Math.pi)($$Math.pi / 6.0);
  var lily = function (i) {
      return function (x) {
          return function (y) {
              return function (reachable) {
                  return function (hidden) {
                      var pos = (function () {
                          var $20 = i === 0;
                          if ($20) {
                              return [ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(x - 30.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(y - 45.0)), Pha_Svg.width("80"), Pha_Svg.height("80") ];
                          };
                          return [ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(x - 24.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(y - 24.0)), Pha_Svg.width("48"), Pha_Svg.height("48") ];
                      })();
                      return Pha_Svg.use("#lily")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(pos)([ Pha["class'"]("frog-lily")(true), Pha["class'"]("reachable")(reachable), Pha["class'"]("hidden")(hidden) ]));
                  };
              };
          };
      };
  };
  var view = function (state) {
      var winTitle = UI_Template.winTitleFor2Players(state);
      var spoints = spiralPoints(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
      var rules = [ Pha.text("Jeu de la grenouille"), Pha_Elements.br, Pha.text("R\xe8gles pas encore d\xe9finies") ];
      var reachable = Game_Frog_Model.reachableArray(state);
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var pointsPolar = spiralPointsPolar(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
      var grid = Pha_Elements.div([ Pha["class'"]("ui-board frog-board")(true) ])([ Pha_Svg.svg([ Pha_Svg.viewBox(-190 | 0)(-200 | 0)(400)(400) ])(Data_Array.concat([ [ Pha_Svg.path(spiralPath)([ Pha_Svg.fill("none"), Pha_Svg.stroke("black"), Pha_Svg.strokeWidth("3") ]), Pha_Svg.line([ Pha_Svg.x_("153"), Pha_Svg.y_("9"), Pha_Svg.width("207"), Pha_Svg.height("20"), Pha_Svg.stroke("black"), Pha_Svg.strokeDasharray("5"), Pha_Svg.strokeWidth("6") ]), Pha_Svg.line([ Pha_Svg.x_("153"), Pha_Svg.y_("7"), Pha_Svg.width("153"), Pha_Svg.height("39"), Pha_Svg.stroke("black"), Pha_Svg.strokeWidth("3") ]), Pha_Svg.line([ Pha_Svg.x_("207"), Pha_Svg.y_("18"), Pha_Svg.width("207"), Pha_Svg.height("50"), Pha_Svg.stroke("black"), Pha_Svg.strokeWidth("3") ]) ], Lib_Util.map2(spoints)(reachable)(function (i) {
          return function (v) {
              return function (reach) {
                  return Pha_Svg.g([ Pha.key("lily" + Data_Show.show(Data_Show.showInt)(i)), Pha_Events.on("click")((function () {
                      var $32 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v1) {
                          if (v1) {
                              return new Game_Frog_Model.Mark(i);
                          };
                          return new Game_Frog_Model.Play(i);
                      });
                      return function ($33) {
                          return $32(Pha_Events_Decoder.shiftKey($33));
                      };
                  })()) ])([ lily(i)(v.x)(v.y)(false)(false), lily(i)(v.x)(v.y)(true)(!reach || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Svg["text'"]((function () {
                      var $23 = Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget));
                      if ($23) {
                          return Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) - i | 0);
                      };
                      return "";
                  })())([ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(v.x)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(v.y)), Pha["class'"]("frog-index")(true) ]) ]);
              };
          };
      }), Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_marked"](Data_Lens_Internal_Forget.strongForget)))(spoints)(function (i) {
          return function (mark) {
              return function (v) {
                  return Pha.ifN(mark && i !== position)(function (v1) {
                      return Pha_Svg.use("#frog2")([ Pha_Svg.x_(Data_Show.show(Data_Show.showNumber)(v.x - 20.0)), Pha_Svg.y_(Data_Show.show(Data_Show.showNumber)(v.y - 20.0)), Pha_Svg.width("32"), Pha_Svg.height("32"), Pha.key("reach" + Data_Show.show(Data_Show.showInt)(i)), Pha["class'"]("frog-frog marked")(true) ]);
                  });
              };
          };
      }), [ Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Array.index(pointsPolar)(position))(function (v) {
          return Pha_Svg.g([ Pha.key("frog"), Pha["class'"]("frog-frog-container")(true), Pha.style("transform")(Pha_Util.translate(Pha_Util.px(v.radius))("0") + (" rotate(" + (Data_Show.show(Data_Show.showNumber)((v.theta * 180.0) / $$Math.pi) + "deg)"))), Pha.style("transform-origin")(Pha_Util.px(-v.radius) + " 0") ])([ Pha_Svg.g([ Pha["class'"]("frog-frog-container")(true), Pha.style("transform")("rotate(" + (Data_Show.show(Data_Show.showNumber)((-v.theta * 180.0) / $$Math.pi) + "deg)")) ])([ Pha_Svg.use("#frog2")([ Pha_Svg.x_("-20"), Pha_Svg.y_("-20"), Pha_Svg.width("40"), Pha_Svg.height("40"), Pha.class_("frog-frog"), Pha["class'"]("goal")(position === 0) ]) ]) ]);
      })) ] ])), Pha_Elements.span([  ])([ Pha.text(UI_Template.turnMessage(Game_Frog_Model.frogGame)(state)) ]) ]);
      var config = UI_Template.card("La grenouille")([ UI_Icons.iconSelectGroupM(Data_Show.showInt)(Data_Eq.eqInt)(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(state)("D\xe9placements autoris\xe9s")([ 1, 2, 3, 4, 5 ])(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_moves"](Data_Lens_Internal_Forget.strongForget)))(Game_Frog_Model.SelectMove.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icons2Players(Game_Frog_Model.withcore)(Game_Frog_Model.frogGame)(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp(Game_Frog_Model.withcore), UI_Icons.iundo(Game_Frog_Model.withcore), UI_Icons.iredo(Game_Frog_Model.withcore), UI_Icons.ireset(Game_Frog_Model.withcore), UI_Icons.irules(Game_Frog_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = UI_Template.incDecGrid(Game_Frog_Model.withcore)(Game_Frog_Model.frogGame)(state)([ grid ]);
      return UI_Template.template(Game_Frog_Model.withcore)(Game_Frog_Model.frogGame)(function (v) {
          return {
              board: board,
              config: config,
              rules: rules,
              winTitle: winTitle,
              customDialog: v.customDialog,
              scoreDialog: v.scoreDialog
          };
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Nim.Model"] = $PS["Game.Nim.Model"] || {};
  var exports = $PS["Game.Nim.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = $PS["Data.Int.Bits"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Run = $PS["Run"];                
  var Move = (function () {
      function Move(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Move.create = function (value0) {
          return function (value1) {
              return new Move(value0, value1);
          };
      };
      return Move;
  })();
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SetNbPiles = (function () {
      function SetNbPiles(value0) {
          this.value0 = value0;
      };
      SetNbPiles.create = function (value0) {
          return new SetNbPiles(value0);
      };
      return SetNbPiles;
  })();
  var SetLength = (function () {
      function SetLength(value0) {
          this.value0 = value0;
      };
      SetLength.create = function (value0) {
          return new SetLength(value0);
      };
      return SetLength;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: v.nbRows,
          nbColumns: v.nbColumns,
          customSize: v.customSize,
          mode: Game_Core.ExpertMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          scores: v.scores,
          pointer: v.pointer
      };
  })({
      length: 10,
      nbPiles: 4
  });
  var canPlay = function (state) {
      return function (v) {
          var v1 = Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v.value0);
          if (v1 instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (v1 instanceof Data_Maybe.Just) {
              return v.value1 !== v1.value0.value0 && (v.value1 !== v1.value0.value1 && (function () {
                  var $23 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
                  if ($23) {
                      return v.value1 < v1.value0.value1;
                  };
                  return v.value1 > v1.value0.value0;
              })());
          };
          throw new Error("Failed pattern match at Game.Nim.Model (line 34, column 5 - line 36, column 105): " + [ v1.constructor.name ]);
      };
  };
  var _ext$prime = function (dictStrong) {
      var $55 = Game_Core["_ext"](dictStrong);
      var $56 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($57) {
          return $55($56($57));
      };
  };
  var _length = function (dictStrong) {
      var $58 = _ext$prime(dictStrong);
      var $59 = Data_Lens_Lens.lens(function (v) {
          return v.length;
      })(function (v) {
          return function (v1) {
              return {
                  length: v1,
                  nbPiles: v.nbPiles
              };
          };
      })(dictStrong);
      return function ($60) {
          return $58($59($60));
      };
  };
  var _nbPiles = function (dictStrong) {
      var $61 = _ext$prime(dictStrong);
      var $62 = Data_Lens_Lens.lens(function (v) {
          return v.nbPiles;
      })(function (v) {
          return function (v1) {
              return {
                  nbPiles: v1,
                  length: v.length
              };
          };
      })(dictStrong);
      return function ($63) {
          return $61($62($63));
      };
  };
  var nimGame2 = new Game_Core.TwoPlayersGame(function () {
      return nimGame;
  }, (function () {
      var $64 = Data_Eq.eq(Data_Eq.eqInt)(0);
      var $65 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (t) {
          return Data_Int_Bits.xor((Data_Tuple.snd(t) - Data_Tuple.fst(t) | 0) - 1 | 0);
      })(0);
      var $66 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($67) {
          return $64($65($66($67)));
      };
  })(), function (state) {
      return Data_Array.sortWith(Data_Ord.ordInt)(function (v) {
          return Data_Maybe.maybe(0)(function (x) {
              var $31 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
              if ($31) {
                  return Data_Tuple.fst(x) - v.value1 | 0;
              };
              return v.value1 - Data_Tuple.snd(x) | 0;
          })(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v.value0));
      })(Data_Array.filter(canPlay(state))(Lib_Util.tabulate2(Data_Lens_Getter.viewOn(state)(_nbPiles(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)))(Move.create)));
  });
  var nimGame = new Game_Core.Game(Game_Core["computerMove'"](nimGame2), function (state) {
      return Data_Traversable.sequence(Data_Traversable.traversableArray)(Run.applicativeRun)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(_nbPiles(Data_Lens_Internal_Forget.strongForget)))((function () {
          var $34 = Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)) === 5;
          if ($34) {
              return Control_Applicative.pure(Run.applicativeRun)(new Data_Tuple.Tuple(0, 4));
          };
          return Control_Bind.bind(Run.bindRun)(Pha_Effects_Random.randomInt(5))(function (v) {
              return Control_Bind.bind(Run.bindRun)(Pha_Effects_Random.randomInt(5))(function (v1) {
                  return Control_Applicative.pure(Run.applicativeRun)(new Data_Tuple.Tuple(v, v1 + 5 | 0));
              });
          });
      })()));
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return (v.value1 - v.value0 | 0) === 1 && v.value0 === (function () {
              var $38 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
              if ($38) {
                  return Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)) - 2 | 0;
              };
              return 0;
          })();
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, Game_Core.defaultOnNewGame, function (state) {
      return function (v) {
          var $43 = canPlay(state)(v);
          if ($43) {
              return Data_Array.modifyAt(v.value0)(function (v1) {
                  var $45 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
                  if ($45) {
                      return new Data_Tuple.Tuple(v.value1, v1.value1);
                  };
                  return new Data_Tuple.Tuple(v1.value0, v.value1);
              })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
          };
          return Data_Maybe.Nothing.value;
      };
  }, Game_Core.defaultSizeLimit, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(nimGame)(v.value0);
      };
      if (v instanceof SetNbPiles) {
          return Game_Core.newGame(nimGame)(Data_Lens_Setter.set(_nbPiles(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof SetLength) {
          return Game_Core.newGame(nimGame)(Data_Lens_Setter.set(_length(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Game_Core.playA(nimGame)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Nim.Model (line 75, column 1 - line 75, column 35): " + [ v.constructor.name ]);
  };
  exports["Move"] = Move;
  exports["istate"] = istate;
  exports["_length"] = _length;
  exports["_nbPiles"] = _nbPiles;
  exports["SetNbPiles"] = SetNbPiles;
  exports["SetLength"] = SetLength;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["nimGame"] = nimGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Nim"] = $PS["Game.Nim"] || {};
  var exports = $PS["Game.Nim"];
  var Game_Core = $PS["Game.Core"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];                
  var init = Game_Core.init(Game_Nim_Model.nimGame);
  exports["init"] = init;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Nim.View"] = $PS["Game.Nim.View"] || {};
  var exports = $PS["Game.Nim.View"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var px$prime = function (a) {
      return Data_Show.show(Data_Show.showInt)(a) + "px";
  };
  var view = function (state) {
      var winTitle = "Les " + ((function () {
          var $1 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn2.value);
          if ($1) {
              return "bleu";
          };
          return "rouge";
      })() + "s gagnent");
      var rules = [ Pha.text("Essaie de bloquer ton adversaire"), Pha_Elements.br, Pha.text("A chaque tour, tu peux d\xe9placer un de tes jetons vers la gauche ou vers la droite"), Pha_Elements.br, Pha.text("d'autant de cases que tu veux mais tu ne peux pas sauter par dessus le jeton adversaire."), Pha_Elements.br, Pha.text("Tu es oblig\xe9 de d\xe9placer un jeton d'au moins une case, tu ne peux pas passer ton tour."), Pha_Elements.br, Pha.text("Tu gagnes la partie si ton adversaire n'a aucun mouvement possible.") ];
      var nbPiles = Data_Lens_Getter.viewOn(state)(Game_Nim_Model["_nbPiles"](Data_Lens_Internal_Forget.strongForget));
      var length = Data_Lens_Getter.viewOn(state)(Game_Nim_Model["_length"](Data_Lens_Internal_Forget.strongForget));
      var config = UI_Template.card("Poker Nim")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(state)("Nombre de rang\xe9es")([ 1, 2, 3, 4, 5 ])(nbPiles)(Game_Nim_Model.SetNbPiles.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(state)("Taille des rang\xe9es")([ 10, 5 ])(length)(Game_Nim_Model.SetLength.create)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icons2Players(Game_Nim_Model.withcore)(Game_Nim_Model.nimGame)(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Nim_Model.withcore), UI_Icons.iredo(Game_Nim_Model.withcore), UI_Icons.ireset(Game_Nim_Model.withcore), UI_Icons.irules(Game_Nim_Model.withcore) ])(function (x) {
          return x(state);
      })) ]);
      var board = Pha_Elements.div([ Pha["class'"]("ui-board nim-board")(true) ])([ Pha_Svg.svg([ Pha_Svg.viewBox(0)(0)(100)(100) ])(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
          return function (pile) {
              return Data_Array.concat([ [ Pha_Svg.rect([ Pha_Svg.x_((function () {
                  var $2 = length === 5;
                  if ($2) {
                      return "25";
                  };
                  return "0";
              })()), Pha_Svg.y_(Data_Show.show(Data_Show.showInt)(10 + (19 * i | 0) | 0)), Pha_Svg.width((function () {
                  var $3 = length === 5;
                  if ($3) {
                      return "50";
                  };
                  return "100";
              })()), Pha_Svg.height("10"), Pha.key("pile" + Data_Show.show(Data_Show.showInt)(i)), Pha_Svg.fill("snow") ]) ], Lib_Util.tabulate(length)(function (j) {
                  return Pha_Svg.rect([ Pha_Svg.x_("-2.5"), Pha_Svg.y_("-2.5"), Pha_Svg.width("5"), Pha_Svg.height("5"), Pha.key("base-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(j)))), Pha_Svg.fill("gray"), Pha_Events.onclick(new Game_Nim_Model.Play(new Game_Nim_Model.Move(i, j))), Pha.style("transform")(Pha_Util.translate(px$prime((function () {
                      var $4 = length === 5;
                      if ($4) {
                          return 30;
                      };
                      return 5;
                  })() + (10 * j | 0) | 0))(px$prime(15 + (19 * i | 0) | 0)) + " rotate(45deg)"), Pha.style("cursor")((function () {
                      var $5 = Game_Core.canPlay(Game_Nim_Model.nimGame)(state)(new Game_Nim_Model.Move(i, j));
                      if ($5) {
                          return "pointer";
                      };
                      return "not-allowed";
                  })()) ]);
              }), Data_Array.mapWithIndex(function (j) {
                  return function (peg) {
                      return Pha_Svg.use("#meeple")([ Pha.key("p-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(j)))), Pha_Svg.width("8"), Pha_Svg.height("8"), Pha.class_("nim-player"), Pha_Svg.fill((function () {
                          var $6 = j === 0;
                          if ($6) {
                              return "blue";
                          };
                          return "red";
                      })()), Pha.style("transform")(Pha_Util.translate(px$prime((function () {
                          var $7 = length === 5;
                          if ($7) {
                              return 26;
                          };
                          return 1;
                      })() + (10 * peg | 0) | 0))(px$prime(11 + (19 * i | 0) | 0))) ]);
                  };
              })([ Data_Tuple.fst(pile), Data_Tuple.snd(pile) ]) ]);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))))), Pha_Elements.span([ Pha.class_("nim-turn-message") ])([ Pha.text((function () {
          var $8 = Game_Core.isLevelFinished(Game_Nim_Model.nimGame)(state);
          if ($8) {
              return "Partie finie";
          };
          var $9 = Data_Eq.eq(Game_Core.eqTurn)(Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.Turn1.value);
          if ($9) {
              return "Tour du joueur bleu";
          };
          return "Tour du joueur rouge";
      })()) ]) ]);
      return UI_Template.template(Game_Nim_Model.withcore)(Game_Nim_Model.nimGame)(function (v) {
          return {
              board: board,
              config: config,
              rules: rules,
              winTitle: winTitle,
              customDialog: v.customDialog,
              scoreDialog: v.scoreDialog
          };
      })(state);
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Noirblanc.Model"] = $PS["Game.Noirblanc.Model"] || {};
  var exports = $PS["Game.Noirblanc.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Effects_Random = $PS["Pha.Effects.Random"];
  var Run = $PS["Run"];                
  var Core = (function () {
      function Core(value0) {
          this.value0 = value0;
      };
      Core.create = function (value0) {
          return new Core(value0);
      };
      return Core;
  })();
  var SelectMode = (function () {
      function SelectMode(value0) {
          this.value0 = value0;
      };
      SelectMode.create = function (value0) {
          return new SelectMode(value0);
      };
      return SelectMode;
  })();
  var SelectLevel = (function () {
      function SelectLevel(value0) {
          this.value0 = value0;
      };
      SelectLevel.create = function (value0) {
          return new SelectLevel(value0);
      };
      return SelectLevel;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Ext = function (x) {
      return x;
  };
  var withcore = new Game_Core.MsgWithCore(Core.create);
  var sizes = [ new Data_Tuple.Tuple(3, 3), new Data_Tuple.Tuple(4, 4), new Data_Tuple.Tuple(2, 10), new Data_Tuple.Tuple(3, 10), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(8, 8), new Data_Tuple.Tuple(8, 8) ];
  var istate = Game_Core.genState({
      light: [  ],
      played: [  ]
  })(Control_Category.identity(Control_Category.categoryFn))({
      level: 0,
      mode: 0,
      maxLevels: [ 0, 1, 1, 0 ],
      keySequence: [  ]
  });
  var _played = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.played;
      })(function (v) {
          return function (v1) {
              return {
                  played: v1,
                  light: v.light
              };
          };
      })(dictStrong);
  };
  var _light = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.light;
      })(function (v) {
          return function (v1) {
              return {
                  light: v1,
                  played: v.played
              };
          };
      })(dictStrong);
  };
  var _ext$prime = function (dictStrong) {
      var $56 = Game_Core["_ext"](dictStrong);
      var $57 = Data_Lens_Iso.iso(function (v) {
          return v;
      })(Ext)(dictStrong.Profunctor0());
      return function ($58) {
          return $56($57($58));
      };
  };
  var _level = function (dictStrong) {
      var $62 = _ext$prime(dictStrong);
      var $63 = Data_Lens_Lens.lens(function (v) {
          return v.level;
      })(function (v) {
          return function (v1) {
              return {
                  level: v1,
                  keySequence: v.keySequence,
                  maxLevels: v.maxLevels,
                  mode: v.mode
              };
          };
      })(dictStrong);
      return function ($64) {
          return $62($63($64));
      };
  };
  var _maxLevels = function (dictStrong) {
      var $65 = _ext$prime(dictStrong);
      var $66 = Data_Lens_Lens.lens(function (v) {
          return v.maxLevels;
      })(function (v) {
          return function (v1) {
              return {
                  maxLevels: v1,
                  keySequence: v.keySequence,
                  level: v.level,
                  mode: v.mode
              };
          };
      })(dictStrong);
      return function ($67) {
          return $65($66($67));
      };
  };                                                                                                         
  var _mode = function (dictStrong) {
      var $68 = _ext$prime(dictStrong);
      var $69 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  keySequence: v.keySequence,
                  level: v.level,
                  maxLevels: v.maxLevels
              };
          };
      })(dictStrong);
      return function ($70) {
          return $68($69($70));
      };
  };
  var neighbor = function (state) {
      return function (index1) {
          return function (index2) {
              var mode = Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget));
              var v = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(index1)(index2);
              return ((v.row * v.row | 0) + (v.col * v.col | 0) | 0) === 1 || (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(mode)(3) === 0 && index1 === index2 || mode >= 2 && (index1 !== index2 && (v.row * v.col | 0) === 0));
          };
      };
  };
  var toggleCell = function (state) {
      return function (index) {
          return Data_Array.mapWithIndex(function (i) {
              return function (color) {
                  return color !== neighbor(state)(index)(i);
              };
          });
      };
  };
  var genRandomBoard = function (state) {
      var size = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0;
      return Control_Bind.bind(Run.bindRun)(Pha_Effects_Random.randomInt(size + 1 | 0))(function (v) {
          return Control_Bind.bind(Run.bindRun)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Run.applicativeRun)(Data_Array.replicate(v)(Pha_Effects_Random.randomInt(size))))(function (v1) {
              return Control_Applicative.pure(Run.applicativeRun)(Data_Foldable.foldr(Data_Foldable.foldableArray)(toggleCell(state))(Data_Array.replicate(size)(true))(v1));
          });
      });
  };
  var noirblancGame = new Game_Core.Game(function (v) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Maybe.Nothing.value);
  }, function (state) {
      var size = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0;
      return Control_Bind.bind(Run.bindRun)((function () {
          var $43 = Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget)) >= 6;
          if ($43) {
              return genRandomBoard(state);
          };
          return Control_Applicative.pure(Run.applicativeRun)(Data_Array.replicate(size)(true));
      })())(function (v) {
          return Control_Applicative.pure(Run.applicativeRun)({
              light: v,
              played: Data_Array.replicate(size)(false)
          });
      });
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))((Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).light);
  }, function (state) {
      var v = Data_Maybe.fromMaybe(new Data_Tuple.Tuple(8, 8))(Data_Array.index(sizes)(Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget))));
      return Control_Applicative.pure(Run.applicativeRun)(Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(v.value1)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(v.value0)(state)));
  }, function (state) {
      return function (index) {
          return Data_Maybe.Just.create(Data_Lens_Setter.over((function () {
              var $71 = _played(Data_Profunctor_Strong.strongFn);
              var $72 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(index)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($73) {
                  return $71($72($73));
              };
          })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Lens_Setter.over(_light(Data_Profunctor_Strong.strongFn))(toggleCell(state)(index))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))));
      };
  }, function (v) {
      return new Game_Core.SizeLimit(3, 3, 10, 10);
  }, function (st) {
      return new Data_Tuple.Tuple(st, true);
  });
  var afterPlay = Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
      var mode = Data_Lens_Getter.viewOn(v)(_mode(Data_Lens_Internal_Forget.strongForget));
      return Control_Applicative.when(Run.applicativeRun)(Game_Core.isLevelFinished(noirblancGame)(v))((function () {
          var nextLevel = (function () {
              var $49 = Data_Lens_Getter.viewOn(v)(_level(Data_Lens_Internal_Forget.strongForget)) >= 4;
              if ($49) {
                  return 6;
              };
              return Data_Lens_Getter.viewOn(v)(_level(Data_Lens_Internal_Forget.strongForget)) + (function () {
                  var $50 = mode === 0 || mode === 3;
                  if ($50) {
                      return 1;
                  };
                  return 2;
              })() | 0;
          })();
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(Data_Lens_Setter.set((function () {
              var $74 = _maxLevels(Data_Profunctor_Strong.strongFn);
              var $75 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(mode)(Data_Lens_Internal_Wander.wanderFunction);
              return function ($76) {
                  return $74($75($76));
              };
          })())(nextLevel)))(function () {
              return Game_Core.newGame(noirblancGame)(Data_Lens_Setter.over(_level(Data_Profunctor_Strong.strongFn))(function (lvl) {
                  return Data_Ord.min(Data_Ord.ordInt)(lvl + 1 | 0)(6);
              }));
          });
      })());
  });
  var update = function (v) {
      if (v instanceof Core) {
          return Game_Core.coreUpdate(noirblancGame)(v.value0);
      };
      if (v instanceof SelectMode) {
          return Game_Core.newGame(noirblancGame)((function () {
              var $77 = Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn))(v.value0);
              var $78 = Data_Lens_Setter.set(_level(Data_Profunctor_Strong.strongFn))(0);
              return function ($79) {
                  return $77($78($79));
              };
          })());
      };
      if (v instanceof SelectLevel) {
          return Game_Core.newGame(noirblancGame)(Data_Lens_Setter.set(_level(Data_Profunctor_Strong.strongFn))(v.value0));
      };
      if (v instanceof Play) {
          return Control_Apply.applySecond(Run.applyRun)(Game_Core.playA(noirblancGame)(v.value0))(afterPlay);
      };
      throw new Error("Failed pattern match at Game.Noirblanc.Model (line 107, column 1 - line 107, column 35): " + [ v.constructor.name ]);
  };
  exports["istate"] = istate;
  exports["_mode"] = _mode;
  exports["_level"] = _level;
  exports["_maxLevels"] = _maxLevels;
  exports["SelectMode"] = SelectMode;
  exports["SelectLevel"] = SelectLevel;
  exports["Play"] = Play;
  exports["update"] = update;
  exports["noirblancGame"] = noirblancGame;
  exports["withcore"] = withcore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Noirblanc"] = $PS["Game.Noirblanc"] || {};
  var exports = $PS["Game.Noirblanc"];
  var Game_Core = $PS["Game.Core"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];                
  var init = Game_Core.init(Game_Noirblanc_Model.noirblancGame);
  exports["init"] = init;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Game.Noirblanc.View"] = $PS["Game.Noirblanc.View"] || {};
  var exports = $PS["Game.Noirblanc.View"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Events = $PS["Pha.Events"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Pha_Util = $PS["Pha.Util"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var square = function (light) {
      return function (cross) {
          return function (props) {
              return Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.class_("noirblanc-square") ])(props))([ Pha_Elements.div([ Pha.class_("noirblanc-square-inner"), Pha["class'"]("blanc")(light) ])([ Pha_Elements.div([ Pha.class_("noirblanc-square-blanc") ])((function () {
                  if (cross) {
                      return [ Pha_Svg.svg([ Pha_Svg.width("100%"), Pha_Svg.height("100%"), Pha.class_("ui-absolute noirblanc-cross") ])([ Pha_Svg.use("#cross")([  ]) ]) ];
                  };
                  return [  ];
              })()), Pha_Elements.div([ Pha.class_("noirblanc-square-noir") ])((function () {
                  if (cross) {
                      return [ Pha_Svg.svg([ Pha_Svg.width("100%"), Pha_Svg.height("100%"), Pha.class_("ui-absolute noirblanc-cross") ])([ Pha_Svg.use("#cross")([  ]) ]) ];
                  };
                  return [  ];
              })()) ]) ]);
          };
      };
  };
  var levelOptions = function (v) {
      return function (v1) {
          return function (opt) {
              if (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#locked"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Difficult\xe9 non d\xe9bloqu\xe9e"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: true,
                      style: opt.style
                  };
              };
              if (v === 0) {
                  return {
                      icon: new UI_Icon.IconText("3x3"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 1) {
                  return {
                      icon: new UI_Icon.IconText("4x4"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 2) {
                  return {
                      icon: new UI_Icon.IconText("2x10"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 3) {
                  return {
                      icon: new UI_Icon.IconText("3x10"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 4) {
                  return {
                      icon: new UI_Icon.IconText("5x5"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 5) {
                  return {
                      icon: new UI_Icon.IconText("NxM"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Dimensions personnalis\xe9es"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              return {
                  icon: new UI_Icon.IconSymbol("#lo-rand"),
                  selected: opt.selected,
                  tooltip: new Data_Maybe.Just("Grille al\xe9atoire"),
                  round: opt.round,
                  large: opt.large,
                  hidden: opt.hidden,
                  disabled: opt.disabled,
                  style: opt.style
              };
          };
      };
  };
  var view = function (state) {
      var rules = [ Pha.text("blablahblah") ];
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var config = UI_Template.card("Tout noir tout blanc")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(state)("Mode jeu")([ 0, 1, 2, 3 ])(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Noirblanc_Model.SelectMode.create)(function (i) {
          return function (v) {
              return {
                  icon: UI_Icon.IconSymbol.create("#lo-mode" + Data_Show.show(Data_Show.showInt)(i + 1 | 0)),
                  selected: v.selected,
                  tooltip: v.tooltip,
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          };
      }), UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(state)("Difficult\xe9")([ 0, 1, 2, 3, 4, 5, 6 ])(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_level"](Data_Lens_Internal_Forget.strongForget)))(Game_Noirblanc_Model.SelectLevel.create)(function (i) {
          return levelOptions(i)(Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Ord.ordInt))(new Data_Maybe.Just(i))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_maxLevels"](Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_mode"](Data_Lens_Internal_Forget.strongForget)))));
      }), UI_Icons.icongroup("Options")([ UI_Icons.ihelp(Game_Noirblanc_Model.withcore)(state), UI_Icons.ireset(Game_Noirblanc_Model.withcore)(state), UI_Icons.irules(Game_Noirblanc_Model.withcore)(state) ]) ]);
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var grid = Pha_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha["class'"]("ui-board")(true) ])(UI_Template.gridStyle(rows)(columns)(4)))(Lib_Util.map2(position.light)(position.played)(function (index) {
          return function (light) {
              return function (played) {
                  var v = Lib_Util.coords(columns)(index);
                  return square(light)(Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && played)([ Pha.key(Data_Show.show(Data_Show.showInt)(index)), Pha.style("height")(Pha_Util.pc(0.86 / Data_Int.toNumber(rows))), Pha.style("width")(Pha_Util.pc(0.86 / Data_Int.toNumber(columns))), Pha.style("left")(Pha_Util.pc((Data_Int.toNumber(v.col) + 7.0e-2) / Data_Int.toNumber(columns))), Pha.style("top")(Pha_Util.pc((Data_Int.toNumber(v.row) + 7.0e-2) / Data_Int.toNumber(rows))), Pha_Events.onclick(new Game_Noirblanc_Model.Play(index)) ]);
              };
          };
      }));
      var board = UI_Template.incDecGrid(Game_Noirblanc_Model.withcore)(Game_Noirblanc_Model.noirblancGame)(state)([ grid ]);
      return UI_Template.template(Game_Noirblanc_Model.withcore)(Game_Noirblanc_Model.noirblancGame)(function (v) {
          return {
              board: board,
              config: config,
              rules: rules,
              winTitle: "GAGN\xc9",
              customDialog: v.customDialog,
              scoreDialog: v.scoreDialog
          };
      })(state);
  };
  exports["view"] = view;
})(PS);
(function(exports) {
  exports.unsafeToMaybeAux = nothing => just => x => x === null || x === undefined ? nothing :  just(x);
  exports.unsafeKey = e => e && e.key;
})(PS["Pha.Event"] = PS["Pha.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Event"] = $PS["Pha.Event"] || {};
  var exports = $PS["Pha.Event"];
  var $foreign = $PS["Pha.Event"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeToMaybe = $foreign.unsafeToMaybeAux(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var key = function ($0) {
      return unsafeToMaybe($foreign.unsafeKey($0));
  };
  exports["key"] = key;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Pha.Lens"] = $PS["Pha.Lens"] || {};
  var exports = $PS["Pha.Lens"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Pha_Action = $PS["Pha.Action"];
  var Run = $PS["Run"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var lensVariant = function (lens) {
      return Data_Functor_Variant.onMatch()()()({
          getState: function (v) {
              return Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                  return "getState";
              }))(Pha_Action.functorGetState)(Data_Symbol.SProxy.value)(new Pha_Action.GetState((function () {
                  var $11 = Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget));
                  return function ($12) {
                      return v.value0($11($12));
                  };
              })()));
          },
          setState: function (v) {
              return Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                  return "setState";
              }))(Pha_Action.functorSetState)(Data_Symbol.SProxy.value)(new Pha_Action.SetState(Data_Lens_Setter.over(lens(Data_Profunctor_Strong.strongFn))(v.value0), v.value1));
          }
      })(Unsafe_Coerce.unsafeCoerce);
  };
  var actionOver = function (lens) {
      return function (v) {
          return Run.Run(Control_Monad_Free.hoistFree(lensVariant(function (dictStrong) {
              return lens(dictStrong);
          }))(v));
      };
  };
  exports["actionOver"] = actionOver;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.5
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Game_Baseball = $PS["Game.Baseball"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Baseball_View = $PS["Game.Baseball.View"];
  var Game_Chocolat = $PS["Game.Chocolat"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Chocolat_View = $PS["Game.Chocolat.View"];
  var Game_Dessin = $PS["Game.Dessin"];
  var Game_Dessin_Model = $PS["Game.Dessin.Model"];
  var Game_Dessin_View = $PS["Game.Dessin.View"];
  var Game_Effs = $PS["Game.Effs"];
  var Game_Frog = $PS["Game.Frog"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Game_Frog_View = $PS["Game.Frog.View"];
  var Game_Nim = $PS["Game.Nim"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Game_Nim_View = $PS["Game.Nim.View"];
  var Game_Noirblanc = $PS["Game.Noirblanc"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];
  var Game_Noirblanc_View = $PS["Game.Noirblanc.View"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Attributes = $PS["Pha.Attributes"];
  var Pha_Effects_Delay = $PS["Pha.Effects.Delay"];
  var Pha_Elements = $PS["Pha.Elements"];
  var Pha_Event = $PS["Pha.Event"];
  var Pha_Lens = $PS["Pha.Lens"];
  var Pha_Svg = $PS["Pha.Svg"];
  var Run = $PS["Run"];                
  var BaseballMsg = (function () {
      function BaseballMsg(value0) {
          this.value0 = value0;
      };
      BaseballMsg.create = function (value0) {
          return new BaseballMsg(value0);
      };
      return BaseballMsg;
  })();
  var ChocolatMsg = (function () {
      function ChocolatMsg(value0) {
          this.value0 = value0;
      };
      ChocolatMsg.create = function (value0) {
          return new ChocolatMsg(value0);
      };
      return ChocolatMsg;
  })();
  var DessinMsg = (function () {
      function DessinMsg(value0) {
          this.value0 = value0;
      };
      DessinMsg.create = function (value0) {
          return new DessinMsg(value0);
      };
      return DessinMsg;
  })();
  var FrogMsg = (function () {
      function FrogMsg(value0) {
          this.value0 = value0;
      };
      FrogMsg.create = function (value0) {
          return new FrogMsg(value0);
      };
      return FrogMsg;
  })();
  var NimMsg = (function () {
      function NimMsg(value0) {
          this.value0 = value0;
      };
      NimMsg.create = function (value0) {
          return new NimMsg(value0);
      };
      return NimMsg;
  })();
  var NoirblancMsg = (function () {
      function NoirblancMsg(value0) {
          this.value0 = value0;
      };
      NoirblancMsg.create = function (value0) {
          return new NoirblancMsg(value0);
      };
      return NoirblancMsg;
  })();
  var viewGame = function (st) {
      if (st.location === "baseball") {
          return Data_Functor.mapFlipped(Pha.functorVDom)(Game_Baseball_View.view(st.baseball))(BaseballMsg.create);
      };
      if (st.location === "chocolat") {
          return Data_Functor.mapFlipped(Pha.functorVDom)(Game_Chocolat_View.view(st.chocolat))(ChocolatMsg.create);
      };
      if (st.location === "dessin") {
          return Data_Functor.mapFlipped(Pha.functorVDom)(Game_Dessin_View.view(st.dessin))(DessinMsg.create);
      };
      if (st.location === "frog") {
          return Data_Functor.mapFlipped(Pha.functorVDom)(Game_Frog_View.view(st.frog))(FrogMsg.create);
      };
      if (st.location === "nim") {
          return Data_Functor.mapFlipped(Pha.functorVDom)(Game_Nim_View.view(st.nim))(NimMsg.create);
      };
      return Data_Functor.mapFlipped(Pha.functorVDom)(Game_Noirblanc_View.view(st.noirblanc))(NoirblancMsg.create);
  };
  var view = function (st) {
      return Pha_Elements.div([ Pha.key(st.location), Pha["class'"]("main-main-container")(true), Pha["class'"]("valise")(st.location === "valise"), Pha["class'"]("appear")(st.anim) ])([ Pha.ifN(st.location !== "valise")(function (v) {
          return Pha_Elements.a([ Pha["class'"]("main-minivalise-link")(true), Pha_Attributes.href("#valise") ])([ Pha_Svg.svg([ Pha_Svg.width("100%"), Pha_Svg.height("100%") ])([ Pha_Svg.use("#valise")([  ]) ]) ]);
      }), viewGame(st) ]);
  };
  var state = {
      baseball: Game_Baseball_Model.istate,
      chocolat: Game_Chocolat_Model.istate,
      dessin: Game_Dessin_Model.istate,
      frog: Game_Frog_Model.istate,
      nim: Game_Nim_Model.istate,
      noirblanc: Game_Noirblanc_Model.istate,
      location: "",
      anim: true
  };
  var onKeyDown = function (ev) {
      return Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
          var v1 = Pha_Event.key(ev);
          return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
      });
  };
  var extractLocation = function (url) {
      return function (defaultValue) {
          return Data_Maybe.maybe(defaultValue)(function (i) {
              return Data_String_CodePoints.drop(i + 1 | 0)(url);
          })(Data_String_CodePoints.indexOf("#")(url));
      };
  };
  var hashChange = function (v) {
      return Control_Bind.bind(Run.bindRun)(Game_Effs.getLocation)(function (v1) {
          var location = extractLocation(v1.hash)("valise");
          var $49 = location === "valise" || location === "";
          if ($49) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(function (v2) {
                  return {
                      location: location,
                      anim: true,
                      baseball: v2.baseball,
                      chocolat: v2.chocolat,
                      dessin: v2.dessin,
                      frog: v2.frog,
                      nim: v2.nim,
                      noirblanc: v2.noirblanc
                  };
              }))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(100))(function () {
                      return Pha_Action.setState(function (v2) {
                          return {
                              anim: false,
                              location: v2.location,
                              baseball: v2.baseball,
                              chocolat: v2.chocolat,
                              dessin: v2.dessin,
                              frog: v2.frog,
                              nim: v2.nim,
                              noirblanc: v2.noirblanc
                          };
                      });
                  });
              });
          };
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(function (v2) {
              return {
                  location: location,
                  anim: true,
                  baseball: v2.baseball,
                  chocolat: v2.chocolat,
                  dessin: v2.dessin,
                  frog: v2.frog,
                  nim: v2.nim,
                  noirblanc: v2.noirblanc
              };
          }))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Effects_Delay.delay(100))(function () {
                  return Pha_Action.setState(function (v2) {
                      return {
                          anim: false,
                          location: v2.location,
                          baseball: v2.baseball,
                          chocolat: v2.chocolat,
                          dessin: v2.dessin,
                          frog: v2.frog,
                          nim: v2.nim,
                          noirblanc: v2.noirblanc
                      };
                  });
              });
          });
      });
  };
  var _noirblanc = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.noirblanc;
      })(function (v) {
          return function (v1) {
              return {
                  noirblanc: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  dessin: v.dessin,
                  frog: v.frog,
                  location: v.location,
                  nim: v.nim
              };
          };
      })(dictStrong);
  };
  var _nim = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.nim;
      })(function (v) {
          return function (v1) {
              return {
                  nim: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  dessin: v.dessin,
                  frog: v.frog,
                  location: v.location,
                  noirblanc: v.noirblanc
              };
          };
      })(dictStrong);
  };
  var _frog = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.frog;
      })(function (v) {
          return function (v1) {
              return {
                  frog: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  dessin: v.dessin,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc
              };
          };
      })(dictStrong);
  };
  var _dessin = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.dessin;
      })(function (v) {
          return function (v1) {
              return {
                  dessin: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc
              };
          };
      })(dictStrong);
  };
  var _chocolat = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.chocolat;
      })(function (v) {
          return function (v1) {
              return {
                  chocolat: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  dessin: v.dessin,
                  frog: v.frog,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc
              };
          };
      })(dictStrong);
  };
  var _baseball = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.baseball;
      })(function (v) {
          return function (v1) {
              return {
                  baseball: v1,
                  anim: v.anim,
                  chocolat: v.chocolat,
                  dessin: v.dessin,
                  frog: v.frog,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc
              };
          };
      })(dictStrong);
  };
  var init = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Lens.actionOver(function (dictStrong) {
      return _baseball(dictStrong);
  })(Game_Baseball.init))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Lens.actionOver(function (dictStrong) {
          return _chocolat(dictStrong);
      })(Game_Chocolat.init))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Lens.actionOver(function (dictStrong) {
              return _dessin(dictStrong);
          })(Game_Dessin.init))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Lens.actionOver(function (dictStrong) {
                  return _frog(dictStrong);
              })(Game_Frog.init))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Lens.actionOver(function (dictStrong) {
                      return _nim(dictStrong);
                  })(Game_Nim.init))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Lens.actionOver(function (dictStrong) {
                          return _noirblanc(dictStrong);
                      })(Game_Noirblanc.init))(function () {
                          return hashChange(Data_Unit.unit);
                      });
                  });
              });
          });
      });
  });
  var update = function (v) {
      if (v instanceof BaseballMsg) {
          return Pha_Lens.actionOver(function (dictStrong) {
              return _baseball(dictStrong);
          })(Game_Baseball_Model.update(v.value0));
      };
      if (v instanceof ChocolatMsg) {
          return Pha_Lens.actionOver(function (dictStrong) {
              return _chocolat(dictStrong);
          })(Game_Chocolat_Model.update(v.value0));
      };
      if (v instanceof DessinMsg) {
          return Pha_Lens.actionOver(function (dictStrong) {
              return _dessin(dictStrong);
          })(Game_Dessin_Model.update(v.value0));
      };
      if (v instanceof FrogMsg) {
          return Pha_Lens.actionOver(function (dictStrong) {
              return _frog(dictStrong);
          })(Game_Frog_Model.update(v.value0));
      };
      if (v instanceof NimMsg) {
          return Pha_Lens.actionOver(function (dictStrong) {
              return _nim(dictStrong);
          })(Game_Nim_Model.update(v.value0));
      };
      if (v instanceof NoirblancMsg) {
          return Pha_Lens.actionOver(function (dictStrong) {
              return _noirblanc(dictStrong);
          })(Game_Noirblanc_Model.update(v.value0));
      };
      throw new Error("Failed pattern match at Main (line 132, column 1 - line 132, column 39): " + [ v.constructor.name ]);
  };
  var main = Pha.app({
      state: state,
      view: view,
      update: update,
      init: init,
      node: "root",
      events: [ new Data_Tuple.Tuple("keydown", onKeyDown), new Data_Tuple.Tuple("hashchange", hashChange) ],
      interpret: Game_Effs.interpretEffects
  });
  exports["extractLocation"] = extractLocation;
  exports["BaseballMsg"] = BaseballMsg;
  exports["ChocolatMsg"] = ChocolatMsg;
  exports["DessinMsg"] = DessinMsg;
  exports["FrogMsg"] = FrogMsg;
  exports["NimMsg"] = NimMsg;
  exports["NoirblancMsg"] = NoirblancMsg;
  exports["_baseball"] = _baseball;
  exports["_chocolat"] = _chocolat;
  exports["_dessin"] = _dessin;
  exports["_frog"] = _frog;
  exports["_nim"] = _nim;
  exports["_noirblanc"] = _noirblanc;
  exports["hashChange"] = hashChange;
  exports["update"] = update;
  exports["init"] = init;
  exports["onKeyDown"] = onKeyDown;
  exports["view"] = view;
  exports["viewGame"] = viewGame;
  exports["state"] = state;
  exports["main"] = main;
})(PS);
PS["Main"].main();