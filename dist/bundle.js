// Generated by purs bundle 0.13.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];                          
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Functor = $PS["Data.Functor"];                  
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  var substFree = function (k) {
      var go = function (f) {
          var v = toView(f);
          if (v instanceof Return) {
              return Control_Applicative.pure(freeApplicative)(v.value0);
          };
          if (v instanceof Bind) {
              return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [ v.constructor.name ]);
      };
      return go;
  };
  var hoistFree = function (k) {
      return substFree(function ($125) {
          return liftF(k($125));
      });
  };
  exports["liftF"] = liftF;
  exports["hoistFree"] = hoistFree;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var takeEnd = function (n) {
      return function (xs) {
          return $foreign.drop($foreign.length(xs) - n | 0)(xs);
      };
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $123 = Data_Maybe.maybe([  ])(singleton);
          return function ($124) {
              return $123(f($124));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["takeEnd"] = takeEnd;
  exports["zip"] = zip;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var singleton = function ($49) {
      return unsafeFromArray(Data_Array.singleton($49));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var init = adaptMaybe(Data_Array.init);
  var last = adaptMaybe(Data_Array.last);    
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $68 = adaptAny(f);
      return function ($69) {
          return unsafeFromArray($68($69));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  var unsafeIndex = function (dictPartial) {
      return adaptAny(Data_Array.unsafeIndex());
  };
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["cons"] = cons;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["unsafeIndex"] = unsafeIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["all"] = all;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];                                          
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["functorEither"] = functorEither;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (f) {
      return function (z) {
          var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($54) {
              return $52($53($54));
          };
      };
  });
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  var allWithIndex = function (dictFoldableWithIndex) {
      return function (dictHeytingAlgebra) {
          return function (t) {
              var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
              var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                  var $67 = t(i);
                  return function ($68) {
                      return Data_Monoid_Conj.Conj($67($68));
                  };
              });
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  exports["allWithIndex"] = allWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Functor.Variant"] = $PS["Data.Functor.Variant"] || {};
  var exports = $PS["Data.Functor.Variant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var onMatch = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var on = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (f) {
                  return function (g) {
                      return function (r) {
                          if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                              return f(r.value);
                          };
                          return g(r);
                      };
                  };
              };
          };
      };
  };
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  return function (value) {
                      return {
                          type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                          value: value,
                          map: Data_Functor.map(dictFunctor)
                      };
                  };
              };
          };
      };
  };
  var functorVariantF = new Data_Functor.Functor(function (f) {
      return function (a) {
          return {
              type: a.type,
              value: a.map(f)(a.value),
              map: a.map
          };
      };
  });
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
  }; 
  var match = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["on"] = on;
  exports["onMatch"] = onMatch;
  exports["match"] = match;
  exports["functorVariantF"] = functorVariantF;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";            

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["Strong"] = Strong;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  exports["newtypeForget"] = newtypeForget;
  exports["strongForget"] = strongForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Internal.Wander"] = $PS["Data.Lens.Internal.Wander"] || {};
  var exports = $PS["Data.Lens.Internal.Wander"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  };
  var wanderFunction = new Wander(function () {
      return Data_Profunctor_Choice.choiceFn;
  }, function () {
      return Data_Profunctor_Strong.strongFn;
  }, function (t) {
      return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
  });
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["wanderFunction"] = wanderFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var Index = function (ix) {
      this.ix = ix;
  };
  var ix = function (dict) {
      return dict.ix;
  }; 
  var indexArray = new Index(function (n) {
      return function (dictWander) {
          return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return function (coalg) {
                  return function (xs) {
                      return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(xs))((function () {
                          var $31 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (x) {
                              return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(n)(x)(xs));
                          });
                          return function ($32) {
                              return $31(coalg($32));
                          };
                      })())(Data_Array.index(xs)(n));
                  };
              };
          });
      };
  });
  exports["ix"] = ix;
  exports["indexArray"] = indexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Data_Function = $PS["Data.Function"];          
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                         
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
})(PS);
(function(exports) {
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game"] = $PS["Game"] || {};
  var exports = $PS["Game"];
  var CGame = function (init, onKeyDown, view) {
      this.init = init;
      this.onKeyDown = onKeyDown;
      this.view = view;
  };
  var view = function (dict) {
      return dict.view;
  };
  var init = function (dict) {
      return dict.init;
  };
  exports["init"] = init;
  exports["view"] = view;
  exports["CGame"] = CGame;
})(PS);
(function(exports) {
  exports.genSeed = Math.random;
})(PS["Lib.Random"] = PS["Lib.Random"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Lib.Util"] = $PS["Lib.Util"] || {};
  var exports = $PS["Lib.Util"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                
  var swap = function (i) {
      return function (j) {
          return function (array) {
              return Data_Maybe.fromMaybe(array)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(i))(function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(j))(function (v1) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.updateAt(i)(v1)(array))(Data_Array.updateAt(j)(v));
                  });
              }));
          };
      };
  };
  var range$prime = function (n) {
      return function (m) {
          var $6 = n > m;
          if ($6) {
              return [  ];
          };
          return Data_Array.range(n)(m);
      };
  };
  var tabulate = function (v) {
      return function (v1) {
          if (v === 0) {
              return [  ];
          };
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(range$prime(0)(v - 1 | 0))(v1);
      };
  };
  var tabulate2 = function (n) {
      return function (m) {
          return function (f) {
              return tabulate(n * m | 0)(function (i) {
                  return f(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(m))(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(m));
              });
          };
      };
  };
  var pairwise = function (list) {
      return Data_Maybe.maybe([  ])(Data_Array.zip(list))(Data_Array.tail(list));
  };
  var map2 = function (t1) {
      return function (t2) {
          return function (fn) {
              return Data_Array.zipWith(Data_Function.apply)(Data_Array.mapWithIndex(fn)(t1))(t2);
          };
      };
  };
  var floatRange = function (begin) {
      return function (end) {
          return function (step) {
              return tabulate(Data_Ord.max(Data_Ord.ordInt)(0)(Data_Int.floor(1.0 + (end - begin) / step)))(function (i) {
                  return begin + Data_Int.toNumber(i) * step;
              });
          };
      };
  };
  exports["range'"] = range$prime;
  exports["tabulate"] = tabulate;
  exports["tabulate2"] = tabulate2;
  exports["map2"] = map2;
  exports["floatRange"] = floatRange;
  exports["pairwise"] = pairwise;
  exports["swap"] = swap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Lib.Random"] = $PS["Lib.Random"] || {};
  var exports = $PS["Lib.Random"];
  var $foreign = $PS["Lib.Random"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];                
  var Seed = function (x) {
      return x;
  };
  var Random = function (x) {
      return x;
  };
  var runRnd = function (seed) {
      return function (v) {
          return Data_Tuple.fst(v(seed));
      };
  };
  var nextSeed = function (v) {
      return Seed(($$Math.sin(v * 2819921.0) + 1.0) / 2.0);
  };
  var intFromSeed = function (v) {
      return function (max) {
          return Data_Int.floor(v * Data_Int.toNumber(max));
      };
  };
  var randomInt = function (n) {
      return function (seed) {
          return new Data_Tuple.Tuple(intFromSeed(seed)(n), nextSeed(seed));
      };
  };
  var functorRandom = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function (seed) {
              var v1 = v(seed);
              return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
          };
      };
  });                                                                                                 
  var randomPick = function (t) {
      return Data_Functor.map(functorRandom)(Data_Array_NonEmpty.unsafeIndex()(t))(randomInt(Data_Array_NonEmpty.length(t)));
  };
  var monadRandom = new Control_Monad.Monad(function () {
      return applicativeRandom;
  }, function () {
      return bindRandom;
  });
  var bindRandom = new Control_Bind.Bind(function () {
      return applyRandom;
  }, function (v) {
      return function (f) {
          return function (seed) {
              var v1 = v(seed);
              var v2 = f(v1.value0);
              return v2(v1.value1);
          };
      };
  });
  var applyRandom = new Control_Apply.Apply(function () {
      return functorRandom;
  }, Control_Monad.ap(monadRandom));
  var applicativeRandom = new Control_Applicative.Applicative(function () {
      return applyRandom;
  }, function (x) {
      return Random(Data_Tuple.Tuple.create(x));
  });
  var shuffle = function (array) {
      var n = Data_Array.length(array);
      return Control_Bind.bind(bindRandom)(Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeRandom)(Lib_Util.tabulate(n - 1 | 0)(function (x) {
          return randomInt(n - x | 0);
      })))(function (v) {
          return Control_Applicative.pure(applicativeRandom)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(Lib_Util.swap))(array)(Data_Array.mapWithIndex(function (i) {
              return function (j) {
                  return new Data_Tuple.Tuple(i, i + j | 0);
              };
          })(v)));
      });
  };
  exports["randomInt"] = randomInt;
  exports["shuffle"] = shuffle;
  exports["randomPick"] = randomPick;
  exports["runRnd"] = runRnd;
  exports["functorRandom"] = functorRandom;
  exports["applicativeRandom"] = applicativeRandom;
  exports["bindRandom"] = bindRandom;
  exports["genSeed"] = $foreign.genSeed;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Run"] = $PS["Run"] || {};
  var exports = $PS["Run"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Newtype = $PS["Data.Newtype"];                  
  var Run = function (x) {
      return x;
  };
  var newtypeRun = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Run);
  var resume = function (k1) {
      return function (k2) {
          var $45 = Control_Monad_Free["resume'"](function (x) {
              return function (f) {
                  return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(function ($48) {
                      return Run(f($48));
                  })(x));
              };
          })(k2);
          var $46 = Data_Newtype.unwrap(newtypeRun);
          return function ($47) {
              return $45($46($47));
          };
      };
  };
  var runCont = function (k1) {
      return function (k2) {
          var loop = resume(function (b) {
              return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(loop)(b));
          })(k2);
          return loop;
      };
  };                                          
  var lift = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  var $54 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(p);
                  return function ($55) {
                      return Run(Control_Monad_Free.liftF($54($55)));
                  };
              };
          };
      };
  };
  var functorRun = Control_Monad_Free.freeFunctor;
  var bindRun = Control_Monad_Free.freeBind;  
  var applicativeRun = Control_Monad_Free.freeApplicative;
  exports["Run"] = Run;
  exports["lift"] = lift;
  exports["runCont"] = runCont;
  exports["functorRun"] = functorRun;
  exports["applicativeRun"] = applicativeRun;
  exports["bindRun"] = bindRun;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha.Action"] = $PS["Pha.Action"] || {};
  var exports = $PS["Pha.Action"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Lib_Random = $PS["Lib.Random"];
  var Run = $PS["Run"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var SetState = (function () {
      function SetState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetState.create = function (value0) {
          return function (value1) {
              return new SetState(value0, value1);
          };
      };
      return SetState;
  })();
  var Rng = (function () {
      function Rng(value0) {
          this.value0 = value0;
      };
      Rng.create = function (value0) {
          return new Rng(value0);
      };
      return Rng;
  })();
  var GetState = (function () {
      function GetState(value0) {
          this.value0 = value0;
      };
      GetState.create = function (value0) {
          return new GetState(value0);
      };
      return GetState;
  })();
  var GetEvent = (function () {
      function GetEvent(value0) {
          this.value0 = value0;
      };
      GetEvent.create = function (value0) {
          return new GetEvent(value0);
      };
      return GetEvent;
  })();
  var Delay = (function () {
      function Delay(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Delay.create = function (value0) {
          return function (value1) {
              return new Delay(value0, value1);
          };
      };
      return Delay;
  })();
  var functorSetStateF = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new SetState(m.value0, f(m.value1));
      };
  });
  var functorRandF = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Rng(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
      };
  });
  var functorGetStateF = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new GetState(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
      };
  });
  var functorEvF = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new GetEvent(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
      };
  });
  var functorDelayF = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Delay(m.value0, f(m.value1));
      };
  });
  var _setState = Data_Symbol.SProxy.value;
  var setState = function (fn) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "setState";
      }))(functorSetStateF)(_setState)(new SetState(fn, Data_Unit.unit));
  };
  var action = function (fn) {
      return setState(fn);
  };
  var _rng = Data_Symbol.SProxy.value;
  var rng = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "rng";
  }))(functorRandF)(_rng)(new Rng(Control_Category.identity(Control_Category.categoryFn)));
  var _getState = Data_Symbol.SProxy.value;
  var getState = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "getState";
  }))(functorGetStateF)(_getState)(new GetState(Control_Category.identity(Control_Category.categoryFn)));
  var randomAction = function (fn) {
      return Control_Bind.bind(Run.bindRun)(getState)(function (v) {
          return Control_Bind.bind(Run.bindRun)(Data_Functor.mapFlipped(Run.functorRun)(rng)(function (x) {
              return Lib_Random.runRnd(x)(fn(v));
          }))(function (v1) {
              return setState(function (v2) {
                  return v1;
              });
          });
      });
  };
  var randomAction$prime = function (fn) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(randomAction(fn))(function () {
          return getState;
      });
  };
  var setState$prime = function (fn) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(setState(fn))(function () {
          return getState;
      });
  };
  var lensVariant = function (lens) {
      return function (variant) {
          return Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
              return "getState";
          }))(_getState)(function (v) {
              return Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                  return "getState";
              }))(functorGetStateF)(_getState)(GetState.create((function () {
                  var $52 = Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget));
                  return function ($53) {
                      return v.value0($52($53));
                  };
              })()));
          })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
              return "setState";
          }))(_setState)(function (v) {
              return Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                  return "setState";
              }))(functorSetStateF)(_setState)(new SetState(Data_Lens_Setter.over(lens(Data_Profunctor_Strong.strongFn))(v.value0), v.value1));
          })(Unsafe_Coerce.unsafeCoerce))(variant);
      };
  };
  var zoomAt = function (lens) {
      return function (v) {
          return Run.Run(Control_Monad_Free.hoistFree(lensVariant(function (dictStrong) {
              return lens(dictStrong);
          }))(v));
      };
  };
  var _getEvent = Data_Symbol.SProxy.value;
  var getEvent = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "event";
  }))(functorEvF)(_getEvent)(new GetEvent(Control_Category.identity(Control_Category.categoryFn)));
  var _delay = Data_Symbol.SProxy.value;
  var delay = function (ms) {
      return Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "delay";
      }))(functorDelayF)(_delay)(new Delay(ms, Data_Unit.unit));
  };
  exports["delay"] = delay;
  exports["getState"] = getState;
  exports["setState"] = setState;
  exports["getEvent"] = getEvent;
  exports["action"] = action;
  exports["setState'"] = setState$prime;
  exports["randomAction"] = randomAction;
  exports["randomAction'"] = randomAction$prime;
  exports["zoomAt"] = zoomAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Core"] = $PS["Game.Core"] || {};
  var exports = $PS["Game.Core"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Lib_Random = $PS["Lib.Random"];
  var Pha_Action = $PS["Pha.Action"];
  var Run = $PS["Run"];                
  var SizeLimit = (function () {
      function SizeLimit(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      SizeLimit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new SizeLimit(value0, value1, value2, value3);
                  };
              };
          };
      };
      return SizeLimit;
  })();
  var SoloMode = (function () {
      function SoloMode() {

      };
      SoloMode.value = new SoloMode();
      return SoloMode;
  })();
  var RandomMode = (function () {
      function RandomMode() {

      };
      RandomMode.value = new RandomMode();
      return RandomMode;
  })();
  var ExpertMode = (function () {
      function ExpertMode() {

      };
      ExpertMode.value = new ExpertMode();
      return ExpertMode;
  })();
  var DuelMode = (function () {
      function DuelMode() {

      };
      DuelMode.value = new DuelMode();
      return DuelMode;
  })();
  var Rules = (function () {
      function Rules() {

      };
      Rules.value = new Rules();
      return Rules;
  })();
  var NoDialog = (function () {
      function NoDialog() {

      };
      NoDialog.value = new NoDialog();
      return NoDialog;
  })();
  var ConfirmNewGame = (function () {
      function ConfirmNewGame(value0) {
          this.value0 = value0;
      };
      ConfirmNewGame.create = function (value0) {
          return new ConfirmNewGame(value0);
      };
      return ConfirmNewGame;
  })();
  var State = (function () {
      function State(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      State.create = function (value0) {
          return function (value1) {
              return new State(value0, value1);
          };
      };
      return State;
  })();
  var Game = function (canPlay, computerMove, initialPosition, isLevelFinished, onNewGame, play, sizeLimit) {
      this.canPlay = canPlay;
      this.computerMove = computerMove;
      this.initialPosition = initialPosition;
      this.isLevelFinished = isLevelFinished;
      this.onNewGame = onNewGame;
      this.play = play;
      this.sizeLimit = sizeLimit;
  };
  var TwoPlayersGame = function (Game0, isLosingPosition, possibleMoves) {
      this.Game0 = Game0;
      this.isLosingPosition = isLosingPosition;
      this.possibleMoves = possibleMoves;
  };
  var sizeLimit = function (dict) {
      return dict.sizeLimit;
  };
  var possibleMoves = function (dict) {
      return dict.possibleMoves;
  };
  var play = function (dict) {
      return dict.play;
  };
  var onNewGame = function (dict) {
      return dict.onNewGame;
  };
  var isLosingPosition = function (dict) {
      return dict.isLosingPosition;
  };
  var isLevelFinished = function (dict) {
      return dict.isLevelFinished;
  };
  var initialPosition = function (dict) {
      return dict.initialPosition;
  };
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SoloMode && y instanceof SoloMode) {
              return true;
          };
          if (x instanceof RandomMode && y instanceof RandomMode) {
              return true;
          };
          if (x instanceof ExpertMode && y instanceof ExpertMode) {
              return true;
          };
          if (x instanceof DuelMode && y instanceof DuelMode) {
              return true;
          };
          return false;
      };
  });
  var defaultSizeLimit = function (v) {
      return new SizeLimit(0, 0, 0, 0);
  };                                                                            
  var defaultCoreState = function (p) {
      return {
          position: p,
          history: [  ],
          redoHistory: [  ],
          dialog: Rules.value,
          turn: 0,
          nbRows: 0,
          nbColumns: 0,
          customSize: false,
          help: false,
          mode: SoloMode.value,
          locked: false,
          showWin: false,
          pointer: Data_Maybe.Nothing.value
      };
  };
  var genState = function (p) {
      return function (f) {
          return function (ext) {
              return new State(f(defaultCoreState(p)), ext);
          };
      };
  };
  var computerMove = function (dict) {
      return dict.computerMove;
  };
  var canPlay = function (dict) {
      return dict.canPlay;
  };
  var _core = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value0;
      })(function (v) {
          return function (x) {
              return new State(x, v.value1);
          };
      })(dictStrong);
  };
  var _customSize = function (dictStrong) {
      var $114 = _core(dictStrong);
      var $115 = Data_Lens_Lens.lens(function (v) {
          return v.customSize;
      })(function (v) {
          return function (v1) {
              return {
                  customSize: v1,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($116) {
          return $114($115($116));
      };
  };
  var _dialog = function (dictStrong) {
      var $117 = _core(dictStrong);
      var $118 = Data_Lens_Lens.lens(function (v) {
          return v.dialog;
      })(function (v) {
          return function (v1) {
              return {
                  dialog: v1,
                  customSize: v.customSize,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($119) {
          return $117($118($119));
      };
  };
  var confirmNewGameA = function (st) {
      return Pha_Action.action(function (v) {
          return Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(NoDialog.value)(st);
      });
  };
  var _help = function (dictStrong) {
      var $120 = _core(dictStrong);
      var $121 = Data_Lens_Lens.lens(function (v) {
          return v.help;
      })(function (v) {
          return function (v1) {
              return {
                  help: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($122) {
          return $120($121($122));
      };
  };
  var toggleHelpA = Pha_Action.action(Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
  var _history = function (dictStrong) {
      var $123 = _core(dictStrong);
      var $124 = Data_Lens_Lens.lens(function (v) {
          return v.history;
      })(function (v) {
          return function (v1) {
              return {
                  history: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($125) {
          return $123($124($125));
      };
  };
  var _locked = function (dictStrong) {
      var $126 = _core(dictStrong);
      var $127 = Data_Lens_Lens.lens(function (v) {
          return v.locked;
      })(function (v) {
          return function (v1) {
              return {
                  locked: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($128) {
          return $126($127($128));
      };
  };
  var lockAction = function (act) {
      return Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
          var $90 = Data_Lens_Getter.viewOn(v)(_locked(Data_Lens_Internal_Forget.strongForget));
          if ($90) {
              return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
          };
          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(true)))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(act)(function () {
                  return Pha_Action.setState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(false));
              });
          });
      });
  };
  var _mode = function (dictStrong) {
      var $129 = _core(dictStrong);
      var $130 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($131) {
          return $129($130($131));
      };
  };
  var _nbColumns = function (dictStrong) {
      var $132 = _core(dictStrong);
      var $133 = Data_Lens_Lens.lens(function (v) {
          return v.nbColumns;
      })(function (v) {
          return function (v1) {
              return {
                  nbColumns: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($134) {
          return $132($133($134));
      };
  };
  var _nbRows = function (dictStrong) {
      var $135 = _core(dictStrong);
      var $136 = Data_Lens_Lens.lens(function (v) {
          return v.nbRows;
      })(function (v) {
          return function (v1) {
              return {
                  nbRows: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($137) {
          return $135($136($137));
      };
  };
  var _position = function (dictStrong) {
      var $141 = _core(dictStrong);
      var $142 = Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (v1) {
              return {
                  position: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($143) {
          return $141($142($143));
      };
  };
  var _redoHistory = function (dictStrong) {
      var $144 = _core(dictStrong);
      var $145 = Data_Lens_Lens.lens(function (v) {
          return v.redoHistory;
      })(function (v) {
          return function (v1) {
              return {
                  redoHistory: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($146) {
          return $144($145($146));
      };
  };
  var newGameAux = function (dictGame) {
      return function (f) {
          return function (state) {
              var state2 = f(state);
              return Control_Bind.bind(Lib_Random.bindRandom)(onNewGame(dictGame)(state2))(function (v) {
                  return Control_Bind.bind(Lib_Random.bindRandom)(initialPosition(dictGame)(v))(function (v1) {
                      var state4 = Data_Lens_Setter.set(_help(Data_Profunctor_Strong.strongFn))(false)(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1)(v))));
                      var $93 = Data_Array["null"](Data_Lens_Getter.viewOn(state2)(_history(Data_Lens_Internal_Forget.strongForget))) || isLevelFinished(dictGame)(state);
                      if ($93) {
                          return Control_Applicative.pure(Lib_Random.applicativeRandom)(state4);
                      };
                      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(new ConfirmNewGame(state4))(state));
                  });
              });
          };
      };
  };
  var init = function (dictGame) {
      return function (st) {
          return Data_Functor.mapFlipped(Effect.functorEffect)(Lib_Random.genSeed)(function (seed) {
              return Lib_Random.runRnd(seed)(newGameAux(dictGame)(Control_Category.identity(Control_Category.categoryFn))(st));
          });
      };
  };
  var newGame = function (dictGame) {
      return function (f) {
          return Pha_Action.randomAction(newGameAux(dictGame)(f));
      };
  };
  var newGame$prime = function (dictGame) {
      return function (f) {
          return function (val) {
              return newGame(dictGame)(f(val));
          };
      };
  };
  var setModeA = function (dictGame) {
      return newGame$prime(dictGame)(Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn)));
  };
  var setGridSizeA = function (dictGame) {
      return function (nbRows) {
          return function (nbColumns) {
              return function (customSize) {
                  var setSize$prime = function (state) {
                      var v = sizeLimit(dictGame)(state);
                      var $95 = nbRows >= v.value0 && (nbRows <= v.value2 && (nbColumns >= v.value1 && nbColumns <= v.value3));
                      if ($95) {
                          return Data_Lens_Setter.set(_nbColumns(Data_Profunctor_Strong.strongFn))(nbColumns)(Data_Lens_Setter.set(_nbRows(Data_Profunctor_Strong.strongFn))(nbRows)(state));
                      };
                      return state;
                  };
                  return newGame(dictGame)((function () {
                      var $147 = Data_Lens_Setter.set(_customSize(Data_Profunctor_Strong.strongFn))(customSize);
                      return function ($148) {
                          return setSize$prime($147($148));
                      };
                  })());
              };
          };
      };
  };
  var pushToHistory = function (state) {
      return Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_Function.flip(Data_Array.snoc)(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state));
  };
  var _showWin = function (dictStrong) {
      var $149 = _core(dictStrong);
      var $150 = Data_Lens_Lens.lens(function (v) {
          return v.showWin;
      })(function (v) {
          return function (v1) {
              return {
                  showWin: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($151) {
          return $149($150($151));
      };
  };
  var showVictory = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.setState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(true)))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.delay(1000))(function () {
          return Pha_Action.setState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(false));
      });
  });
  var _turn = function (dictStrong) {
      var $152 = _core(dictStrong);
      var $153 = Data_Lens_Lens.lens(function (v) {
          return v.turn;
      })(function (v) {
          return function (v1) {
              return {
                  turn: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin
              };
          };
      })(dictStrong);
      return function ($154) {
          return $152($153($154));
      };
  };
  var changeTurn = function (state) {
      var $100 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(DuelMode.value);
      if ($100) {
          return Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(function (x) {
              return 1 - x | 0;
          })(state);
      };
      return state;
  };
  var redoA = Pha_Action.action(function (state) {
      return Data_Maybe.maybe(state)(function (hs) {
          return changeTurn(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.last(hs))(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.init(hs))(Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_Function.flip(Data_Array.snoc)(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state))));
      })(Data_Array_NonEmpty.fromArray(Data_Lens_Getter.viewOn(state)(_redoHistory(Data_Lens_Internal_Forget.strongForget))));
  });
  var undoA = Pha_Action.action(function (state) {
      return Data_Maybe.maybe(state)(function (hs) {
          return changeTurn(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.last(hs))(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.init(hs))(Data_Lens_Setter.over(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_Function.flip(Data_Array.snoc)(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state))));
      })(Data_Array_NonEmpty.fromArray(Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget))));
  });
  var playAux = function (dictGame) {
      return function (move) {
          return function (state) {
              var $101 = canPlay(dictGame)(state)(move);
              if ($101) {
                  var position = Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget));
                  return Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(function (v) {
                      return 1 - v | 0;
                  })(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(play(dictGame)(state)(move))(state));
              };
              return state;
          };
      };
  };
  var computerMove$prime = function (dictTwoPlayersGame) {
      return function (state) {
          var $102 = isLevelFinished(dictTwoPlayersGame.Game0())(state);
          if ($102) {
              return Data_Maybe.Nothing.value;
          };
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.fromArray(possibleMoves(dictTwoPlayersGame)(state)))(function (moves) {
              var bestMove = (function () {
                  var $103 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
                  if ($103) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Foldable.find(Data_Foldable.foldableArray)((function () {
                      var $155 = isLosingPosition(dictTwoPlayersGame);
                      var $156 = Data_Function.flip(playAux(dictTwoPlayersGame.Game0()))(state);
                      return function ($157) {
                          return $155($156($157));
                      };
                  })())(Data_Array_NonEmpty.toArray(moves));
              })();
              return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(bestMove)(Control_Applicative.pure(Lib_Random.applicativeRandom)))(new Data_Maybe.Just(Lib_Random.randomPick(moves)));
          });
      };
  };
  var computerPlay = function (dictGame) {
      return Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
          return Data_Maybe.maybe(Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit))(function (rndmove) {
              return Control_Bind.bind(Run.bindRun)(Pha_Action["randomAction'"](function (st) {
                  return Data_Functor.mapFlipped(Lib_Random.functorRandom)(rndmove)(function (m) {
                      return playAux(dictGame)(m)(st);
                  });
              }))(function (v1) {
                  var $106 = isLevelFinished(dictGame)(v1);
                  if ($106) {
                      return showVictory;
                  };
                  return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
              });
          })(computerMove(dictGame)(v));
      });
  };
  var computerStartsA = function (dictGame) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.action(pushToHistory))(function () {
          return computerPlay(dictGame);
      });
  };
  var playA$prime = function (dictGame) {
      return function (optionFn) {
          return function (move) {
              return lockAction(Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
                  var v1 = optionFn({
                      showWin: true
                  });
                  var $109 = !canPlay(dictGame)(v)(move);
                  if ($109) {
                      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                  };
                  return Control_Bind.bind(Run.bindRun)(Pha_Action["setState'"]((function () {
                      var $158 = playAux(dictGame)(move);
                      return function ($159) {
                          return $158(pushToHistory($159));
                      };
                  })()))(function (v2) {
                      var $111 = v1.showWin && isLevelFinished(dictGame)(v2);
                      if ($111) {
                          return showVictory;
                      };
                      var $112 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(v)(_mode(Data_Lens_Internal_Forget.strongForget)))(ExpertMode.value) || Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(v)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
                      if ($112) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Pha_Action.delay(1000))(function () {
                              return computerPlay(dictGame);
                          });
                      };
                      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                  });
              }));
          };
      };
  };
  var playA = function (dictGame) {
      return playA$prime(dictGame)(Control_Category.identity(Control_Category.categoryFn));
  };
  var resetA = Pha_Action.action(function (state) {
      return Data_Maybe.maybe(state)(function (hs) {
          return Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.head(hs))(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_turn(Data_Profunctor_Strong.strongFn))(0)(state))));
      })(Data_Array_NonEmpty.fromArray(Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget))));
  });
  exports["canPlay"] = canPlay;
  exports["isLevelFinished"] = isLevelFinished;
  exports["possibleMoves"] = possibleMoves;
  exports["sizeLimit"] = sizeLimit;
  exports["Rules"] = Rules;
  exports["NoDialog"] = NoDialog;
  exports["ConfirmNewGame"] = ConfirmNewGame;
  exports["RandomMode"] = RandomMode;
  exports["ExpertMode"] = ExpertMode;
  exports["DuelMode"] = DuelMode;
  exports["State"] = State;
  exports["genState"] = genState;
  exports["_position"] = _position;
  exports["_history"] = _history;
  exports["_redoHistory"] = _redoHistory;
  exports["_mode"] = _mode;
  exports["_help"] = _help;
  exports["_turn"] = _turn;
  exports["_dialog"] = _dialog;
  exports["_nbRows"] = _nbRows;
  exports["_nbColumns"] = _nbColumns;
  exports["_customSize"] = _customSize;
  exports["_locked"] = _locked;
  exports["_showWin"] = _showWin;
  exports["SizeLimit"] = SizeLimit;
  exports["Game"] = Game;
  exports["defaultSizeLimit"] = defaultSizeLimit;
  exports["undoA"] = undoA;
  exports["redoA"] = redoA;
  exports["resetA"] = resetA;
  exports["toggleHelpA"] = toggleHelpA;
  exports["computerStartsA"] = computerStartsA;
  exports["playA"] = playA;
  exports["newGame'"] = newGame$prime;
  exports["init"] = init;
  exports["setModeA"] = setModeA;
  exports["setGridSizeA"] = setGridSizeA;
  exports["confirmNewGameA"] = confirmNewGameA;
  exports["TwoPlayersGame"] = TwoPlayersGame;
  exports["computerMove'"] = computerMove$prime;
  exports["eqMode"] = eqMode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Baseball.Model"] = $PS["Game.Baseball.Model"] || {};
  var exports = $PS["Game.Baseball.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      nbBases: 5,
      missingPeg: 0
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _missingPeg = function (dictStrong) {
      var $21 = _ext(dictStrong);
      var $22 = Data_Lens_Lens.lens(function (v) {
          return v.missingPeg;
      })(function (v) {
          return function (v1) {
              return {
                  missingPeg: v1,
                  nbBases: v.nbBases
              };
          };
      })(dictStrong);
      return function ($23) {
          return $21($22($23));
      };
  };
  var _nbBases = function (dictStrong) {
      var $24 = _ext(dictStrong);
      var $25 = Data_Lens_Lens.lens(function (v) {
          return v.nbBases;
      })(function (v) {
          return function (v1) {
              return {
                  nbBases: v1,
                  missingPeg: v.missingPeg
              };
          };
      })(dictStrong);
      return function ($26) {
          return $24($25($26));
      };
  };
  var baseballGame = new Game_Core.Game(function (state) {
      return function (i) {
          return Data_Maybe.fromMaybe(false)((function () {
              var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
              var nbBases = Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget));
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(Data_Lens_Getter.viewOn(state)(_missingPeg(Data_Lens_Internal_Forget.strongForget))))(function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(i))(function (v1) {
                      var diff = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2) - Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v1)(2) | 0;
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(diff)([ 1, nbBases - 1 | 0, -1 | 0, 1 - nbBases | 0 ]));
                  });
              });
          })());
      };
  }, Data_Function["const"](Data_Maybe.Nothing.value), function (state) {
      return Lib_Random.shuffle(Lib_Util["range'"](0)((2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0) - 1 | 0));
  }, function (state) {
      return Data_FoldableWithIndex.allWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (i) {
          return function (j) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(2) === Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(j)(2);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      return Data_Functor.mapFlipped(Lib_Random.functorRandom)(Lib_Random.randomInt(2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0))(function (i) {
          return Data_Lens_Setter.set(_missingPeg(Data_Profunctor_Strong.strongFn))(i)(state);
      });
  }, function (state) {
      return function (i) {
          return Lib_Util.swap(Data_Lens_Getter.viewOn(state)(_missingPeg(Data_Lens_Internal_Forget.strongForget)))(i)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, Game_Core.defaultSizeLimit);
  var setNbBases = Game_Core["newGame'"](baseballGame)(Data_Lens_Setter.set(_nbBases(Data_Profunctor_Strong.strongFn)));
  exports["_nbBases"] = _nbBases;
  exports["_missingPeg"] = _missingPeg;
  exports["istate"] = istate;
  exports["setNbBases"] = setNbBases;
  exports["baseballGame"] = baseballGame;
})(PS);
(function(exports) {
  const RECYCLED_NODE = 1
  const LAZY_NODE = 2
  const TEXT_NODE = 3
  const EMPTY_OBJ = {}
  const EMPTY_ARR = []
  const map = EMPTY_ARR.map
  const defer = requestAnimationFrame || setTimeout

  const merge = function(a, b) {
    var out = {}

    for (var k in a) out[k] = a[k]
    for (var k in b) out[k] = b[k]

    return out
  }

  const patchProperty = function(node, key, oldValue, newValue, listener, isSvg) {
    if (key === "key") {
    } else if (key === "style") {
      for (var k in merge(oldValue, newValue)) {
        oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
        if (k[0] === "-") {
          node[key].setProperty(k, oldValue)
        } else {
          node[key][k] = oldValue
        }
      }
    } else if (key[0] === "o" && key[1] === "n") {
      if (
        !((node.actions || (node.actions = {}))[
          (key = key.slice(2).toLowerCase())
        ] = newValue)
      ) {
        node.removeEventListener(key, listener)
      } else if (!oldValue) {
        node.addEventListener(key, listener)
      }
    } else if (!isSvg && key !== "list" && key in node) {
      node[key] = newValue == null ? "" : newValue
    } else if (
      newValue == null ||
      newValue === false ||
      (key === "class" && !newValue)
    ) {
      node.removeAttribute(key)
    } else {
      node.setAttribute(key, newValue)
    }
  }

  const createNode = function(vnode, listener, isSvg) {
    var node =
      vnode.type === TEXT_NODE
        ? document.createTextNode(vnode.name)
        : (isSvg = isSvg || vnode.name === "svg")
        ? document.createElementNS("http://www.w3.org/2000/svg", vnode.name)
        : document.createElement(vnode.name)
    var props = vnode.props

    for (var k in props) {
      patchProperty(node, k, null, props[k], listener, isSvg)
    }

    for (var i = 0, len = vnode.children.length; i < len; i++) {
      node.appendChild(
        createNode(
          (vnode.children[i] = getVNode(vnode.children[i])),
          listener,
          isSvg
        )
      )
    }

    return (vnode.node = node)
  }

  const getKey = vnode => vnode == null ? null : vnode.key;

  const patch = function(parent, node, oldVNode, newVNode, listener, isSvg) {
    if (oldVNode === newVNode) {
    } else if (
      oldVNode != null &&
      oldVNode.type === TEXT_NODE &&
      newVNode.type === TEXT_NODE
    ) {
      if (oldVNode.name !== newVNode.name) node.nodeValue = newVNode.name
    } else if (oldVNode == null || oldVNode.name !== newVNode.name) {
      node = parent.insertBefore(
        createNode((newVNode = getVNode(newVNode)), listener, isSvg),
        node
      )
      if (oldVNode != null) {
        parent.removeChild(oldVNode.node)
      }
    } else {
      var tmpVKid
      var oldVKid

      var oldKey
      var newKey

      var oldVProps = oldVNode.props
      var newVProps = newVNode.props

      var oldVKids = oldVNode.children
      var newVKids = newVNode.children

      var oldHead = 0
      var newHead = 0
      var oldTail = oldVKids.length - 1
      var newTail = newVKids.length - 1

      isSvg = isSvg || newVNode.name === "svg"

      for (var i in merge(oldVProps, newVProps)) {
        if (
          (i === "value" || i === "selected" || i === "checked"
            ? node[i]
            : oldVProps[i]) !== newVProps[i]
        ) {
          patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg)
        }
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldHead])) == null ||
          oldKey !== getKey(newVKids[newHead])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldHead].node,
          oldVKids[oldHead],
          (newVKids[newHead] = getVNode(
            newVKids[newHead++],
            oldVKids[oldHead++]
          )),
          listener,
          isSvg
        )
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldTail])) == null ||
          oldKey !== getKey(newVKids[newTail])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldTail].node,
          oldVKids[oldTail],
          (newVKids[newTail] = getVNode(
            newVKids[newTail--],
            oldVKids[oldTail--]
          )),
          listener,
          isSvg
        )
      }

      if (oldHead > oldTail) {
        while (newHead <= newTail) {
          node.insertBefore(
            createNode(
              (newVKids[newHead] = getVNode(newVKids[newHead++])),
              listener,
              isSvg
            ),
            (oldVKid = oldVKids[oldHead]) && oldVKid.node
          )
        }
      } else if (newHead > newTail) {
        while (oldHead <= oldTail) {
          node.removeChild(oldVKids[oldHead++].node)
        }
      } else {
        for (var i = oldHead, keyed = {}, newKeyed = {}; i <= oldTail; i++) {
          if ((oldKey = oldVKids[i].key) != null) {
            keyed[oldKey] = oldVKids[i]
          }
        }

        while (newHead <= newTail) {
          oldKey = getKey((oldVKid = oldVKids[oldHead]))
          newKey = getKey(
            (newVKids[newHead] = getVNode(newVKids[newHead], oldVKid))
          )

          if (
            newKeyed[oldKey] ||
            (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))
          ) {
            if (oldKey == null) {
              node.removeChild(oldVKid.node)
            }
            oldHead++
            continue
          }

          if (newKey == null || oldVNode.type === RECYCLED_NODE) {
            if (oldKey == null) {
              patch(
                node,
                oldVKid && oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg
              )
              newHead++
            }
            oldHead++
          } else {
            if (oldKey === newKey) {
              patch(
                node,
                oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg
              )
              newKeyed[newKey] = true
              oldHead++
            } else {
              if ((tmpVKid = keyed[newKey]) != null) {
                patch(
                  node,
                  node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),
                  tmpVKid,
                  newVKids[newHead],
                  listener,
                  isSvg
                )
                newKeyed[newKey] = true
              } else {
                patch(
                  node,
                  oldVKid && oldVKid.node,
                  null,
                  newVKids[newHead],
                  listener,
                  isSvg
                )
              }
            }
            newHead++
          }
        }

        while (oldHead <= oldTail) {
          if (getKey((oldVKid = oldVKids[oldHead++])) == null) {
            node.removeChild(oldVKid.node)
          }
        }

        for (var i in keyed) {
          if (newKeyed[i] == null) {
            node.removeChild(keyed[i].node)
          }
        }
      }
    }

    return (newVNode.node = node)
  }

  const propsChanged = function(a, b) {
    for (var k in a) if (a[k] !== b[k]) return true
    for (var k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = function(newVNode, oldVNode) {
    return newVNode.type === LAZY_NODE
      ? ((!oldVNode || propsChanged(oldVNode.lazy, newVNode.lazy)) &&
          ((oldVNode = newVNode.lazy.view(newVNode.lazy)).lazy = newVNode.lazy),
        oldVNode)
      : newVNode
  }

  const createVNode = function(name, props, children, node, key, type) {
    return {
      name: name,
      props: props,
      children: children,
      node: node,
      type: type,
      key: key
    }
  }

  const createTextVNode = (value, node) =>
      createVNode(value, EMPTY_OBJ, EMPTY_ARR, node, null, TEXT_NODE);

  const recycleNode = node =>
    node.nodeType === TEXT_NODE
      ? createTextVNode(node.nodeValue, node)
      : createVNode(
          node.nodeName.toLowerCase(),
          EMPTY_OBJ,
          map.call(node.childNodes, recycleNode),
          node,
          null,
          RECYCLED_NODE
        )

  const appAux = disp => props => () => {
    const {view, events, effects, init} = props
    let state = {};
    let lock = false
    let node = document.getElementById(props.node);
    let vdom = node && recycleNode(node);

    const listener = function(event) {
        disp(() => state)(dispatch)(effects(event))(this.actions[event.type])();
    }

    const setState = newState => {
      if (state !== newState) {
        state = newState
        if (!lock) defer(render, (lock = true))
      }
      return state
    }

    const dispatch = fn => () => setState(fn(state));

    const rawEvent = (name, action) => {
       //const listener = event => disp(action(dispatch)(event))();
       //addEventListener (name, listener);
     }


    const render = () => {
      lock = false
      node = patch(
        node.parentNode,
        node,
        vdom,
        vdom = view(state),
        listener
      )
    }
    setState(props.state);
    for (let i = 0; i < events.length; i++) {
       rawEvent(events[i].value0, events[i].value1);
    }
    //launchAff(init(dispatch)(undefined))();
  }

  const h = isStyle => name => ps => children => {
      const style = {};
      const props = {style};
      const vdom = { name, children: children.filter(x => x), props, node: null };
      const n = ps.length;
      for (let i = 0; i < n; i++) {
          const obj = ps[i];
          const value0 = obj.value0;
          const value1 = obj.value1;
          if (value1 === undefined)
              vdom.key = value0;
          else if (typeof value1 === 'object')
              vdom.props["on"+value0] = value1;
          else if (typeof value1 === 'boolean') {
              if(!value1)
                  {}
              else if (props.class)  
                  props.class += ' ' + value0;
              else
                  props.class = value0;
          }
          else if (isStyle(obj))
              style[value0] = value1;
          else
              props[value0] = value1;
      }
      return vdom;
  }

  exports.emptyNode = null;
  exports.appAux = appAux;
  exports.hAux = h;
  exports.text = createTextVNode;
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Run = $PS["Run"];                
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Class = (function () {
      function Class(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Class.create = function (value0) {
          return function (value1) {
              return new Class(value0, value1);
          };
      };
      return Class;
  })();
  var Style = (function () {
      function Style(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Style.create = function (value0) {
          return function (value1) {
              return new Style(value0, value1);
          };
      };
      return Style;
  })();
  var Event = (function () {
      function Event(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Event.create = function (value0) {
          return function (value1) {
              return new Event(value0, value1);
          };
      };
      return Event;
  })();
  var whenN = function (cond) {
      return function (vdom) {
          if (cond) {
              return vdom(Data_Unit.unit);
          };
          return $foreign.emptyNode;
      };
  };
  var maybeN = Data_Maybe.fromMaybe($foreign.emptyNode);
  var isStyle = function (v) {
      if (v instanceof Style) {
          return true;
      };
      return false;
  };
  var h = $foreign.hAux(isStyle);
  var dispatch = function (getS) {
      return function (setS) {
          return function (matching) {
              var go = Data_Functor_Variant.onMatch()()()({
                  getState: function (v) {
                      return Control_Bind.bind(Effect.bindEffect)(getS)(v.value0);
                  },
                  setState: function (v) {
                      return Control_Apply.applySecond(Effect.applyEffect)(setS(v.value0))(v.value1);
                  }
              })(matching);
              return Run.runCont(go)(function (v) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              });
          };
      };
  };
  var app = $foreign.appAux(dispatch);
  exports["Key"] = Key;
  exports["Attr"] = Attr;
  exports["Class"] = Class;
  exports["Style"] = Style;
  exports["Event"] = Event;
  exports["h"] = h;
  exports["whenN"] = whenN;
  exports["maybeN"] = maybeN;
  exports["app"] = app;
  exports["text"] = $foreign.text;
  exports["emptyNode"] = $foreign.emptyNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha.Html"] = $PS["Pha.Html"] || {};
  var exports = $PS["Pha.Html"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];                
  var translate = function (x1) {
      return function (y1) {
          return "translate(" + (Data_Show.show(Data_Show.showNumber)(x1) + ("px," + (Data_Show.show(Data_Show.showNumber)(y1) + "px)")));
      };
  };
  var svg = Pha.h("svg");
  var style = Pha.Style.create;
  var span = Pha.h("span");                 
  var key = Pha.Key.create;
  var h2 = Pha.h("h2");
  var g = Pha.h("g");
  var div$prime = Pha.h("div");                     
  var click = Pha.Event.create("click");
  var class$prime = Pha.Class.create;
  var button = Pha.h("button");
  var br = Pha.h("br")([  ])([  ]);
  var attr = Pha.Attr.create;
  var circle = function (cx) {
      return function (cy) {
          return function (r) {
              return function (props) {
                  return Pha.h("circle")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("cx")(Data_Show.show(Data_Show.showNumber)(cx)), attr("cy")(Data_Show.show(Data_Show.showNumber)(cy)), attr("r")(Data_Show.show(Data_Show.showNumber)(r)) ])(props))([  ]);
              };
          };
      };
  };
  var disabled = function (b) {
      return attr("disabled")((function () {
          if (b) {
              return "true";
          };
          return "";
      })());
  };
  var fill = attr("fill");
  var height = attr("height");
  var href = attr("href");
  var line = function (x1) {
      return function (y1) {
          return function (x2) {
              return function (y2) {
                  return function (props) {
                      return Pha.h("line")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x1")(Data_Show.show(Data_Show.showNumber)(x1)), attr("y1")(Data_Show.show(Data_Show.showNumber)(y1)), attr("x2")(Data_Show.show(Data_Show.showNumber)(x2)), attr("y2")(Data_Show.show(Data_Show.showNumber)(y2)) ])(props))([  ]);
                  };
              };
          };
      };
  };
  var path = function (d) {
      return function (props) {
          return Pha.h("path")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("d")(d) ])(props))([  ]);
      };
  };
  var rect = function (x$prime) {
      return function (y$prime) {
          return function (w) {
              return function (h$prime) {
                  return function (props) {
                      return Pha.h("rect")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x")(Data_Show.show(Data_Show.showNumber)(x$prime)), attr("y")(Data_Show.show(Data_Show.showNumber)(y$prime)), attr("width")(Data_Show.show(Data_Show.showNumber)(w)), attr("height")(Data_Show.show(Data_Show.showNumber)(h$prime)) ])(props))([  ]);
                  };
              };
          };
      };
  };
  var stroke = attr("stroke");
  var strokeDasharray = attr("stroke-dasharray");
  var strokeWidth = attr("stroke-width");
  var text$prime = function (x1) {
      return function (y1) {
          return function (t) {
              return function (props) {
                  return Pha.h("text")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x")(Data_Show.show(Data_Show.showNumber)(x1)), attr("y")(Data_Show.show(Data_Show.showNumber)(y1)) ])(props))([ Pha.text(t) ]);
              };
          };
      };
  };                                
  var use = function (x1) {
      return function (y1) {
          return function (w) {
              return function (h$prime) {
                  return function (href$prime) {
                      return function (props) {
                          return Pha.h("use")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x")(Data_Show.show(Data_Show.showNumber)(x1)), attr("y")(Data_Show.show(Data_Show.showNumber)(y1)), attr("width")(Data_Show.show(Data_Show.showNumber)(w)), attr("height")(Data_Show.show(Data_Show.showNumber)(h$prime)), attr("href")(href$prime) ])(props))([  ]);
                      };
                  };
              };
          };
      };
  };
  var viewBox = function (a1) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return attr("viewBox")(Data_Show.show(Data_Show.showInt)(a1) + (" " + (Data_Show.show(Data_Show.showInt)(b) + (" " + (Data_Show.show(Data_Show.showInt)(c) + (" " + Data_Show.show(Data_Show.showInt)(d)))))));
              };
          };
      };
  };
  var width = attr("width");
  var svguse = function (symbol) {
      return function (props) {
          return svg(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ width("100%"), height("100%") ])(props))([ Pha.h("use")([ attr("href")(symbol) ])([  ]) ]);
      };
  };                
  var a = Pha.h("a");
  exports["key"] = key;
  exports["class'"] = class$prime;
  exports["style"] = style;
  exports["click"] = click;
  exports["br"] = br;
  exports["button"] = button;
  exports["div'"] = div$prime;
  exports["span"] = span;
  exports["h2"] = h2;
  exports["a"] = a;
  exports["disabled"] = disabled;
  exports["width"] = width;
  exports["height"] = height;
  exports["href"] = href;
  exports["stroke"] = stroke;
  exports["fill"] = fill;
  exports["viewBox"] = viewBox;
  exports["strokeWidth"] = strokeWidth;
  exports["strokeDasharray"] = strokeDasharray;
  exports["g"] = g;
  exports["svg"] = svg;
  exports["rect"] = rect;
  exports["path"] = path;
  exports["line"] = line;
  exports["circle"] = circle;
  exports["use"] = use;
  exports["text'"] = text$prime;
  exports["translate"] = translate;
  exports["svguse"] = svguse;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Icon"] = $PS["UI.Icon"] || {};
  var exports = $PS["UI.Icon"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];                
  var IconText = (function () {
      function IconText(value0) {
          this.value0 = value0;
      };
      IconText.create = function (value0) {
          return new IconText(value0);
      };
      return IconText;
  })();
  var IconSymbol = (function () {
      function IconSymbol(value0) {
          this.value0 = value0;
      };
      IconSymbol.create = function (value0) {
          return new IconSymbol(value0);
      };
      return IconSymbol;
  })();
  var IconNone = (function () {
      function IconNone() {

      };
      IconNone.value = new IconNone();
      return IconNone;
  })();
  var defaultOptions = {
      icon: IconNone.value,
      selected: false,
      tooltip: Data_Maybe.Nothing.value,
      round: false,
      large: false,
      hidden: false,
      disabled: false,
      style: [  ]
  };
  var iconbutton = function (optionFn) {
      return function (props) {
          var v = optionFn(defaultOptions);
          return Pha_Html.button(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-icon")(true), Pha_Html["class'"]("selected")(v.selected), Pha_Html["class'"]("round")(v.large), Pha_Html["class'"]("hidden")(v.hidden), Pha_Html.disabled(v.disabled) ])(props))([ (function () {
              if (v.icon instanceof IconSymbol) {
                  return Pha_Html.svguse(v.icon.value0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-icon-symbol")(true) ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.style)(Data_Tuple.uncurry(Pha_Html.style))));
              };
              if (v.icon instanceof IconText) {
                  return Pha_Html.span([ Pha_Html["class'"]("ui-icon-text")(true) ])([ Pha.text(v.icon.value0) ]);
              };
              if (v.icon instanceof IconNone) {
                  return Pha.emptyNode;
              };
              throw new Error("Failed pattern match at UI.Icon (line 43, column 9 - line 46, column 34): " + [ v.icon.constructor.name ]);
          })(), Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.tooltip)(function (t) {
              return Pha_Html.span([ Pha_Html["class'"]("ui-icon-tooltip")(true) ])([ Pha.text(t) ]);
          })) ]);
      };
  };
  exports["IconText"] = IconText;
  exports["IconSymbol"] = IconSymbol;
  exports["iconbutton"] = iconbutton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Icons"] = $PS["UI.Icons"] || {};
  var exports = $PS["UI.Icons"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];                
  var icongroup = function (title) {
      return function (children) {
          return Pha_Html["div'"]([  ])([ Pha_Html.h2([  ])([ Pha.text(title) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-icon-grid")(true) ])(children) ]);
      };
  };
  var iconbutton = function (state) {
      return function (optionFn) {
          return function (props) {
              return UI_Icon.iconbutton(function (opts) {
                  var opts2 = optionFn(opts);
                  return {
                      icon: opts2.icon,
                      selected: opts2.selected,
                      tooltip: opts2.tooltip,
                      round: opts2.round,
                      large: opts2.large,
                      hidden: opts2.hidden,
                      disabled: opts2.disabled || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget)),
                      style: opts2.style
                  };
              })(props);
          };
      };
  };
  var icons2Players = function (dictGame) {
      return function (lens) {
          return function (state) {
              return icongroup("Mode de jeu")([ iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#school"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.RandomMode.value),
                      tooltip: new Data_Maybe.Just("IA mode facile"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.setModeA(dictGame)(Game_Core.RandomMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#enstein"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.ExpertMode.value),
                      tooltip: new Data_Maybe.Just("IA mode expert"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.setModeA(dictGame)(Game_Core.ExpertMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#duel"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                      tooltip: new Data_Maybe.Just("Affronte un autre joueur"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.setModeA(dictGame)(Game_Core.DuelMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconText("2P\u21e8"),
                      selected: v.selected,
                      tooltip: new Data_Maybe.Just("L'IA commence"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: !Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))) || Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.computerStartsA(dictGame))) ]) ]);
          };
      };
  };
  var ihelp = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#help"),
                  selected: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)),
                  tooltip: new Data_Maybe.Just("Aide"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.toggleHelpA)) ]);
      };
  };
  var iredo = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#undo"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Rejoue le coup annul\xe9"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_redoHistory"](Data_Lens_Internal_Forget.strongForget))),
                  style: [ new Data_Tuple.Tuple("transform", "scaleX(-1)") ]
              };
          })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.redoA)) ]);
      };
  };
  var ireset = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#reset"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Recommence la partie"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))),
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.resetA)) ]);
      };
  };
  var irules = function (lens) {
      return function (state) {
          var selected = (function () {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget));
              if (v instanceof Game_Core.Rules) {
                  return true;
              };
              return false;
          })();
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#rules"),
                  selected: selected,
                  tooltip: new Data_Maybe.Just("R\xe8gles"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
              return lens(dictStrong);
          })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.Rules.value)))) ]);
      };
  };
  var iundo = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#undo"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Annule le dernier coup effectu\xe9"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))),
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.undoA)) ]);
      };
  };
  var iconSizesGroup = function (dictGame) {
      return function (lens) {
          return function (state) {
              return function (sizeList) {
                  return function (customSize) {
                      var csize = Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget));
                      var crows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
                      var ccols = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
                      return icongroup("Dimensions de la grille")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(sizeList)(function (v) {
                          return iconbutton(state)(function (v1) {
                              return {
                                  icon: UI_Icon.IconText.create(Data_Show.show(Data_Show.showInt)(v.value0) + ("x" + Data_Show.show(Data_Show.showInt)(v.value1))),
                                  selected: v.value0 === crows && (v.value1 === ccols && !csize),
                                  tooltip: v1.tooltip,
                                  round: v1.round,
                                  large: v1.large,
                                  hidden: v1.hidden,
                                  disabled: v1.disabled,
                                  style: v1.style
                              };
                          })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Core.setGridSizeA(dictGame)(v.value0)(v.value1)(false))) ]);
                      }))((function () {
                          if (customSize) {
                              return [ iconbutton(state)(function (v) {
                                  return {
                                      icon: new UI_Icon.IconText("NxM"),
                                      selected: csize,
                                      tooltip: new Data_Maybe.Just("Taille personnalis\xe9e"),
                                      round: v.round,
                                      large: v.large,
                                      hidden: v.hidden,
                                      disabled: v.disabled,
                                      style: v.style
                                  };
                              })([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_customSize"](Data_Profunctor_Strong.strongFn))(true)))) ]) ];
                          };
                          return [  ];
                      })()));
                  };
              };
          };
      };
  };
  var iconSelectGroupM = function (dictShow) {
      return function (dictEq) {
          return function (dictFoldable) {
              return function (lens) {
                  return function (state) {
                      return function (title) {
                          return function (values) {
                              return function (selected) {
                                  return function (action) {
                                      return function (optionFn) {
                                          return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                              return iconbutton(state)((function () {
                                                  var $41 = optionFn(val);
                                                  return function ($42) {
                                                      return $41((function (v) {
                                                          return {
                                                              icon: UI_Icon.IconText.create(Data_Show.show(dictShow)(val)),
                                                              selected: Data_Foldable.elem(dictFoldable)(dictEq)(val)(selected),
                                                              tooltip: v.tooltip,
                                                              round: v.round,
                                                              large: v.large,
                                                              hidden: v.hidden,
                                                              disabled: v.disabled,
                                                              style: v.style
                                                          };
                                                      })($42));
                                                  };
                                              })())([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                                                  return lens(dictStrong);
                                              })(action(val))) ]);
                                          }));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var iconSelectGroup = function (dictShow) {
      return function (dictEq) {
          return function (lens) {
              return function (state) {
                  return function (title) {
                      return function (values) {
                          return function (selected) {
                              return function (action) {
                                  return function (optionFn) {
                                      return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                          return iconbutton(state)((function () {
                                              var $43 = optionFn(val);
                                              return function ($44) {
                                                  return $43((function (v) {
                                                      return {
                                                          icon: UI_Icon.IconText.create(Data_Show.show(dictShow)(val)),
                                                          selected: Data_Eq.eq(dictEq)(val)(selected),
                                                          tooltip: v.tooltip,
                                                          round: v.round,
                                                          large: v.large,
                                                          hidden: v.hidden,
                                                          disabled: v.disabled,
                                                          style: v.style
                                                      };
                                                  })($44));
                                              };
                                          })())([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                                              return lens(dictStrong);
                                          })(action(val))) ]);
                                      }));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["icongroup"] = icongroup;
  exports["iundo"] = iundo;
  exports["iredo"] = iredo;
  exports["ireset"] = ireset;
  exports["ihelp"] = ihelp;
  exports["irules"] = irules;
  exports["iconSelectGroup"] = iconSelectGroup;
  exports["iconSelectGroupM"] = iconSelectGroupM;
  exports["iconSizesGroup"] = iconSizesGroup;
  exports["icons2Players"] = icons2Players;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Dialog"] = $PS["UI.Dialog"] || {};
  var exports = $PS["UI.Dialog"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];                
  var dialog = function (v) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-absolute ui-flex-center ui-dialog-container")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-head")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-title")(true) ])([ Pha.text(v.title) ]) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-body")(true) ])(children), Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-buttons")(true) ])(Data_Array.catMaybes([ Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.onCancel)(function (action) {
              return Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary")(true), Pha_Html.click(action) ])([ Pha.text("Annuler") ]);
          }), Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.onOk)(function (action) {
              return Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary")(true), Pha_Html.click(action) ])([ Pha.text("Ok") ]);
          }) ])) ]) ]);
      };
  };
  exports["dialog"] = dialog;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.IncDecGrid"] = $PS["UI.IncDecGrid"] || {};
  var exports = $PS["UI.IncDecGrid"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];                
  var incDecGrid = function (v) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-incdecgrid")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("flex")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-incdecgrid-container")(true) ])(children), Pha.whenN(v.showRowButtons)(function (v1) {
              return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-incdecgrid-rows")(true) ])([ UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#plus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v2.disabled,
                      style: v2.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows + 1 | 0)(v.nbColumns)) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-incdecgrid-text")(true) ])([ Pha_Html.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbRows)) ]) ]), UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#minus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v2.disabled,
                      style: v2.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows - 1 | 0)(v.nbColumns)) ]) ]);
          }) ]), Pha.whenN(v.showColButtons)(function (v1) {
              return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-incdecgrid-cols")(true) ])([ UI_Icon.iconbutton(function (x) {
                  return {
                      icon: new UI_Icon.IconSymbol("#minus"),
                      selected: x.selected,
                      tooltip: x.tooltip,
                      round: true,
                      large: x.large,
                      hidden: !v.customSize,
                      disabled: x.disabled,
                      style: x.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows)(v.nbColumns - 1 | 0)) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-incdecgrid-text")(true) ])([ Pha_Html.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbColumns)) ]) ]), UI_Icon.iconbutton(function (x) {
                  return {
                      icon: new UI_Icon.IconSymbol("#plus"),
                      selected: x.selected,
                      tooltip: x.tooltip,
                      round: true,
                      large: x.large,
                      hidden: !v.customSize,
                      disabled: x.disabled,
                      style: x.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows)(v.nbColumns + 1 | 0)) ]) ]);
          }) ]);
      };
  };
  exports["incDecGrid"] = incDecGrid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Template"] = $PS["UI.Template"] || {};
  var exports = $PS["UI.Template"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Dialog = $PS["UI.Dialog"];
  var UI_IncDecGrid = $PS["UI.IncDecGrid"];                
  var winTitleFor2Players = function (state) {
      var $12 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
      if ($12) {
          return "Le " + ((function () {
              var $13 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 1;
              if ($13) {
                  return "premier";
              };
              return "second";
          })() + " joueur gagne");
      };
      var $14 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 1;
      if ($14) {
          return "Tu as gagn\xe9";
      };
      return "L'IA gagne";
  };
  var winPanel = function (title) {
      return function (state) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-absolute component-win-container")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("component-win")(true), Pha_Html["class'"]("visible")(Data_Lens_Getter.viewOn(state)(Game_Core["_showWin"](Data_Lens_Internal_Forget.strongForget))) ])([ Pha.text(title) ]) ]);
      };
  };
  var turnMessage = function (dictGame) {
      return function (state) {
          var $15 = Game_Core.isLevelFinished(dictGame)(state);
          if ($15) {
              return "Partie finie";
          };
          var $16 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 0;
          if ($16) {
              return "Tour du premier joueur";
          };
          var $17 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
          if ($17) {
              return "Tour du second joueur";
          };
          return "Tour de l'IA";
      };
  };
  var template = function (dictGame) {
      return function (lens) {
          return function (v) {
              return function (state) {
                  var dialog$prime = function (v1) {
                      if (v1 instanceof Game_Core.Rules) {
                          return UI_Dialog.dialog({
                              title: "R\xe8gles du jeu",
                              onCancel: Data_Maybe.Nothing.value,
                              onOk: Data_Maybe.Just.create(Pha_Action.zoomAt(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.NoDialog.value))))
                          })(v.rules);
                      };
                      if (v1 instanceof Game_Core.ConfirmNewGame) {
                          return UI_Dialog.dialog({
                              title: "Nouvelle partie",
                              onCancel: Data_Maybe.Just.create(Pha_Action.zoomAt(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.NoDialog.value)))),
                              onOk: new Data_Maybe.Just(Pha_Action.zoomAt(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Game_Core.confirmNewGameA(v1.value0)))
                          })([ Pha.text("Tu es sur le point de cr\xe9er une nouvelle partie. Ta partie en cours sera perdue. Es-tu s\xfbr(e)?") ]);
                      };
                      return Pha.emptyNode;
                  };
                  return Pha_Html["div'"]([  ])([ Pha_Html["div'"]([ Pha_Html["class'"]("main-container")(true) ])([ Pha_Html["div'"]([  ])([ v.board, winPanel(v.winTitle)(state) ]), v.config ]), dialog$prime(Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget))) ]);
              };
          };
      };
  };
  var incDecGrid = function (dictGame) {
      return function (lens) {
          return function (state) {
              var v = Game_Core.sizeLimit(dictGame)(state);
              return UI_IncDecGrid.incDecGrid({
                  nbRows: Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)),
                  nbColumns: Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
                  showRowButtons: v.value0 < v.value2,
                  showColButtons: v.value1 < v.value3,
                  customSize: Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget)),
                  onResize: function (x) {
                      return function (y) {
                          return Pha_Action.zoomAt(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Core.setGridSizeA(dictGame)(x)(y)(true));
                      };
                  }
              });
          };
      };
  };
  var gridStyle = function (rows) {
      return function (columns) {
          return function (limit) {
              var m = Data_Int.toNumber(Data_Ord.max(Data_Ord.ordInt)(limit)(Data_Ord.max(Data_Ord.ordInt)(rows)(columns)));
              return [ Pha_Html.style("height")(Data_Show.show(Data_Show.showNumber)((Data_Int.toNumber(rows) / m) * 100.0) + "%"), Pha_Html.style("width")(Data_Show.show(Data_Show.showNumber)((Data_Int.toNumber(columns) / m) * 100.0) + "%") ];
          };
      };
  };
  var card = function (title) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-card")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-head ui-flex-center")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-title")(true) ])([ Pha.text(title) ]) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-body")(true) ])(children) ]);
      };
  };
  exports["card"] = card;
  exports["gridStyle"] = gridStyle;
  exports["incDecGrid"] = incDecGrid;
  exports["template"] = template;
  exports["turnMessage"] = turnMessage;
  exports["winTitleFor2Players"] = winTitleFor2Players;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Baseball.View"] = $PS["Game.Baseball.View"] || {};
  var exports = $PS["Game.Baseball.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var translatePeg = function (position) {
      return function (nbBases) {
          var mid = Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var x = 42.0 + 35.0 * $$Math.cos((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases)) + 10.0 * Data_Int.toNumber(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var y = 46.0 + 35.0 * $$Math.sin((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Html.translate(x)(y);
      };
  };
  var transformBase = function (i) {
      return function (nbBases) {
          var y = 50.0 + 35.0 * $$Math.sin((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          var x = 50.0 + 35.0 * $$Math.cos((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Html.translate(x)(y) + " rotate(45deg)";
      };
  };
  var colors = [ "blue", "red", "green", "magenta", "orange", "black", "cyan", "gray" ];
  var dupColors = Control_Bind.bind(Control_Bind.bindArray)(colors)(function (x) {
      return [ x, x ];
  });
  var view = function (lens) {
      return function (state) {
          var rules = [ Pha.text("blah blah blah blah") ];
          var nbBases = Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_nbBases"](Data_Lens_Internal_Forget.strongForget));
          var levelFinished = Game_Core.isLevelFinished(Game_Baseball_Model.baseballGame)(state);
          var config = UI_Template.card("Baseball multicolore")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Nombres de bases")([ 4, 5, 6, 7, 8 ])(nbBases)(Game_Baseball_Model.setNbBases)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = Pha_Html["div'"]([ Pha_Html["class'"]("ui-board baseball-board")(true) ])([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html.viewBox(0)(0)(100)(100) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.mapWithIndex(function (i) {
              return function (color) {
                  return Pha_Html.rect(-10.0)(-10.0)(20.0)(20.0)([ Pha_Html.key("b" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html["class'"]("baseball-base")(true), Pha_Html.stroke(color), Pha_Html.style("transform")(transformBase(i)(nbBases)) ]);
              };
          })(Data_Array.take(nbBases)(colors)))(Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(dupColors)(function (peg) {
              return function (pos) {
                  return function (color) {
                      return Pha.whenN(peg !== Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_missingPeg"](Data_Lens_Internal_Forget.strongForget)))(function (v) {
                          return Pha_Html.g([ Pha_Html["class'"]("baseball-player")(true), Pha_Html.style("transform")(translatePeg(pos)(nbBases)), Pha_Html.key("p" + Data_Show.show(Data_Show.showInt)(peg)) ])([ Pha_Html.use(0.0)(0.0)(7.0)(7.0)("#meeple")([ Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Core.playA(Game_Baseball_Model.baseballGame)(peg))), Pha_Html.fill(color), Pha_Html.style("animation")((function () {
                              if (levelFinished) {
                                  return "baseballHola 4s linear " + (Data_Show.show(Data_Show.showInt)(1000 + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(2000 * peg | 0)(nbBases) | 0) + "ms infinite");
                              };
                              return "none";
                          })()), Pha_Html.style("cursor")((function () {
                              var $6 = Game_Core.canPlay(Game_Baseball_Model.baseballGame)(state)(peg);
                              if ($6) {
                                  return "pointer";
                              };
                              return "not-allowed";
                          })()) ]) ]);
                      });
                  };
              };
          }))) ]);
          return UI_Template.template(Game_Baseball_Model.baseballGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "GAGN\xc9"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Baseball"] = $PS["Game.Baseball"] || {};
  var exports = $PS["Game.Baseball"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Baseball_View = $PS["Game.Baseball.View"];
  var Game_Core = $PS["Game.Core"];
  var Run = $PS["Run"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Baseball_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Baseball_Model.baseballGame)(v));
  }, function (v) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
  }, function (lens) {
      return function (v) {
          return Game_Baseball_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Chocolat.Model"] = $PS["Game.Chocolat.Model"] || {};
  var exports = $PS["Game.Chocolat.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];                
  var CornerMode = (function () {
      function CornerMode() {

      };
      CornerMode.value = new CornerMode();
      return CornerMode;
  })();
  var BorderMode = (function () {
      function BorderMode() {

      };
      BorderMode.value = new BorderMode();
      return BorderMode;
  })();
  var StandardMode = (function () {
      function StandardMode() {

      };
      StandardMode.value = new StandardMode();
      return StandardMode;
  })();
  var FromLeft = (function () {
      function FromLeft(value0) {
          this.value0 = value0;
      };
      FromLeft.create = function (value0) {
          return new FromLeft(value0);
      };
      return FromLeft;
  })();
  var FromRight = (function () {
      function FromRight(value0) {
          this.value0 = value0;
      };
      FromRight.create = function (value0) {
          return new FromRight(value0);
      };
      return FromRight;
  })();
  var FromTop = (function () {
      function FromTop(value0) {
          this.value0 = value0;
      };
      FromTop.create = function (value0) {
          return new FromTop(value0);
      };
      return FromTop;
  })();
  var FromBottom = (function () {
      function FromBottom(value0) {
          this.value0 = value0;
      };
      FromBottom.create = function (value0) {
          return new FromBottom(value0);
      };
      return FromBottom;
  })();
  var showSoapMode = new Data_Show.Show(function (v) {
      return "";
  });
  var istate = Game_Core.genState({
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
  })(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 6,
          nbColumns: 7,
          customSize: v.customSize,
          mode: Game_Core.RandomMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      soap: {
          row: 0,
          col: 0
      },
      soapMode: CornerMode.value
  });
  var eqSoapMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof CornerMode && y instanceof CornerMode) {
              return true;
          };
          if (x instanceof BorderMode && y instanceof BorderMode) {
              return true;
          };
          if (x instanceof StandardMode && y instanceof StandardMode) {
              return true;
          };
          return false;
      };
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _soap = function (dictStrong) {
      var $71 = _ext(dictStrong);
      var $72 = Data_Lens_Lens.lens(function (v) {
          return v.soap;
      })(function (v) {
          return function (v1) {
              return {
                  soap: v1,
                  soapMode: v.soapMode
              };
          };
      })(dictStrong);
      return function ($73) {
          return $71($72($73));
      };
  };
  var _soapMode = function (dictStrong) {
      var $74 = _ext(dictStrong);
      var $75 = Data_Lens_Lens.lens(function (v) {
          return v.soapMode;
      })(function (v) {
          return function (v1) {
              return {
                  soapMode: v1,
                  soap: v.soap
              };
          };
      })(dictStrong);
      return function ($76) {
          return $74($75($76));
      };
  };
  var chocolat2Game = new Game_Core.TwoPlayersGame(function () {
      return chocolatGame;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return ((v1.col - v.left | 0) ^ ((v.right - v1.col | 0) - 1 | 0) ^ (v1.row - v.top | 0) ^ ((v.bottom - v1.row | 0) - 1 | 0)) === 0;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.left + 1 | 0)(v1.col))(FromLeft.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.col + 1 | 0)(v.right - 1 | 0))(FromRight.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.top + 1 | 0)(v1.row))(FromTop.create))(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.row + 1 | 0)(v.bottom - 1 | 0))(FromBottom.create))));
  });
  var chocolatGame = new Game_Core.Game(function (v) {
      return function (v1) {
          return true;
      };
  }, Game_Core["computerMove'"](chocolat2Game), function (st) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)({
          left: 0,
          right: Data_Lens_Getter.viewOn(st)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
          top: 0,
          bottom: Data_Lens_Getter.viewOn(st)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))
      });
  }, (function () {
      var $77 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($78) {
          return (function (v) {
              return v.left === (v.right - 1 | 0) && v.top === (v.bottom - 1 | 0);
          })($77($78));
      };
  })(), function (state) {
      return Control_Bind.bind(Lib_Random.bindRandom)((function () {
          var $62 = Data_Eq.eq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(StandardMode.value);
          if ($62) {
              return Lib_Random.randomInt(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          };
          return Control_Applicative.pure(Lib_Random.applicativeRandom)(0);
      })())(function (v) {
          return Control_Bind.bind(Lib_Random.bindRandom)((function () {
              var $64 = Data_Eq.notEq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(CornerMode.value);
              if ($64) {
                  return Lib_Random.randomInt(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)));
              };
              return Control_Applicative.pure(Lib_Random.applicativeRandom)(0);
          })())(function (v1) {
              return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_soap(Data_Profunctor_Strong.strongFn))({
                  row: v,
                  col: v1
              })(state));
          });
      });
  }, function (st) {
      var p = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function (v) {
          if (v instanceof FromLeft) {
              return {
                  left: v.value0,
                  top: p.top,
                  right: p.right,
                  bottom: p.bottom
              };
          };
          if (v instanceof FromTop) {
              return {
                  left: p.left,
                  top: v.value0,
                  right: p.right,
                  bottom: p.bottom
              };
          };
          if (v instanceof FromRight) {
              return {
                  left: p.left,
                  top: p.top,
                  right: v.value0,
                  bottom: p.bottom
              };
          };
          if (v instanceof FromBottom) {
              return {
                  left: p.left,
                  top: p.top,
                  right: p.right,
                  bottom: v.value0
              };
          };
          throw new Error("Failed pattern match at Game.Chocolat.Model (line 38, column 15 - line 42, column 42): " + [ v.constructor.name ]);
      };
  }, Data_Function["const"](new Game_Core.SizeLimit(4, 4, 10, 10)));
  var setSoapModeA = Game_Core["newGame'"](chocolatGame)(Data_Lens_Setter.set(_soapMode(Data_Profunctor_Strong.strongFn)));
  exports["FromLeft"] = FromLeft;
  exports["FromRight"] = FromRight;
  exports["FromTop"] = FromTop;
  exports["FromBottom"] = FromBottom;
  exports["CornerMode"] = CornerMode;
  exports["BorderMode"] = BorderMode;
  exports["StandardMode"] = StandardMode;
  exports["_soap"] = _soap;
  exports["_soapMode"] = _soapMode;
  exports["istate"] = istate;
  exports["setSoapModeA"] = setSoapModeA;
  exports["eqSoapMode"] = eqSoapMode;
  exports["showSoapMode"] = showSoapMode;
  exports["chocolatGame"] = chocolatGame;
  exports["chocolat2Game"] = chocolat2Game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Chocolat.View"] = $PS["Game.Chocolat.View"] || {};
  var exports = $PS["Game.Chocolat.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var inside = function (state) {
      return function (row) {
          return function (col) {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
              return col >= v.left && (col <= (v.right - 1 | 0) && (row >= v.top && row <= (v.bottom - 1 | 0)));
          };
      };
  };
  var view = function (lens) {
      return function (state) {
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var pos = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var v = Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soap"](Data_Lens_Internal_Forget.strongForget));
          var rules = [ Pha.text("A chaque tour de ce jeu, tu peux d\xe9placer une pile de jetons vers une case adjacente"), Pha_Html.br, Pha.text("qui contient au moins autant de jetons"), Pha_Html.br, Pha.text("Le but est de finir la partie avec le moins de cases contenant des piles de jetons.") ];
          var cutter = function (row) {
              return function (col) {
                  return function (move) {
                      return Pha_Html.circle(50.0 * Data_Int.toNumber(col))(50.0 * Data_Int.toNumber(row))(7.0)([ Pha_Html.key("c" + Data_Show.show(Data_Show.showInt)((row * (columns + 1 | 0) | 0) + col | 0)), Pha_Html["class'"]("chocolat-cutter")(true), Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                          return lens(dictStrong);
                      })(Game_Core.playA(Game_Chocolat_Model.chocolatGame)(move))) ]);
                  };
              };
          };
          var grid = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(3))([ Pha_Html["class'"]("ui-board")(true) ]))([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html.viewBox(-7 | 0)(-7 | 0)((50 * columns | 0) + 14 | 0)((50 * rows | 0) + 14 | 0) ])(Data_Array.concat([ Lib_Util.tabulate2(rows)(columns)(function (row) {
              return function (col) {
                  return Pha_Html.rect(50.0 * Data_Int.toNumber(col) + 7.0)(50.0 * Data_Int.toNumber(row) + 7.0)(36.0)(36.0)([ Pha_Html.key("choc" + Data_Show.show(Data_Show.showInt)((row * columns | 0) + col | 0)), Pha_Html["class'"]("chocolat-square")(true), Pha_Html["class'"]("soap")(row === v.row && col === v.col), Pha_Html["class'"]("hidden")(!inside(state)(row)(col)) ]);
              };
          }), [ Pha_Html.use(50.0 * Data_Int.toNumber(v.col) + 12.0)(50.0 * Data_Int.toNumber(v.row) + 12.0)(26.0)(26.0)("#skull")([ Pha_Html.key("skull"), Pha_Html.fill("#20AF20") ]) ], Control_Bind.bind(Control_Bind.bindArray)(Game_Core.possibleMoves(Game_Chocolat_Model.chocolat2Game)(state))(function (v1) {
              if (v1 instanceof Game_Chocolat_Model.FromLeft) {
                  return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)) ];
              };
              if (v1 instanceof Game_Chocolat_Model.FromRight) {
                  return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)) ];
              };
              if (v1 instanceof Game_Chocolat_Model.FromTop) {
                  return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromTop(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromTop(v1.value0)) ];
              };
              if (v1 instanceof Game_Chocolat_Model.FromBottom) {
                  return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromBottom(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromBottom(v1.value0)) ];
              };
              throw new Error("Failed pattern match at Game.Chocolat.View (line 60, column 41 - line 64, column 106): " + [ v1.constructor.name ]);
          }) ])) ]);
          var config = UI_Template.card("Barre de chocolat")([ UI_Icons.iconSizesGroup(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ new Data_Tuple.Tuple(6, 7) ])(true), UI_Icons.iconSelectGroup(Game_Chocolat_Model.showSoapMode)(Game_Chocolat_Model.eqSoapMode)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Emplacement du savon")([ Game_Chocolat_Model.CornerMode.value, Game_Chocolat_Model.BorderMode.value, Game_Chocolat_Model.StandardMode.value ])(Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soapMode"](Data_Lens_Internal_Forget.strongForget)))(Game_Chocolat_Model.setSoapModeA)(function (mode) {
              return function (opt) {
                  if (mode instanceof Game_Chocolat_Model.CornerMode) {
                      return {
                          icon: new UI_Icon.IconSymbol("#choc-mode0"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Dans le coin"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (mode instanceof Game_Chocolat_Model.BorderMode) {
                      return {
                          icon: new UI_Icon.IconSymbol("#choc-mode1"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Sur un bord"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (mode instanceof Game_Chocolat_Model.StandardMode) {
                      return {
                          icon: new UI_Icon.IconSymbol("#choc-mode2"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("N'importe o\xf9"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  throw new Error("Failed pattern match at Game.Chocolat.View (line 29, column 58 - line 32, column 100): " + [ mode.constructor.name ]);
              };
          }), UI_Icons.icons2Players(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = UI_Template.incDecGrid(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "todo"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Chocolat"] = $PS["Game.Chocolat"] || {};
  var exports = $PS["Game.Chocolat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Chocolat_View = $PS["Game.Chocolat.View"];
  var Game_Core = $PS["Game.Core"];
  var Run = $PS["Run"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Chocolat_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Chocolat_Model.chocolatGame)(v));
  }, function (v) {
      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
  }, function (lens) {
      return function (v) {
          return Game_Chocolat_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Lib.KonamiCode"] = $PS["Lib.KonamiCode"] || {};
  var exports = $PS["Lib.KonamiCode"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Pha_Action = $PS["Pha.Action"];
  var Run = $PS["Run"];                
  var codeSequence = "ArrowUp ArrowUp ArrowDown ArrowDown ArrowLeft ArrowRight ArrowLeft ArrowRight b a";
  var konamiCode = function (lens) {
      return function (onActivation) {
          return function (key) {
              return Control_Bind.bind(Run.bindRun)(Pha_Action.getState)(function (v) {
                  var seq = Data_Array.takeEnd(10)(Data_Function.flip(Data_Array.snoc)(key)(Data_Lens_Getter.viewOn(v)(lens(Data_Lens_Internal_Forget.strongForget))));
                  return Control_Bind.bind(Run.bindRun)(Pha_Action["setState'"](Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(seq)))(function (v1) {
                      var $4 = Data_String_Common.joinWith(" ")(seq) === codeSequence;
                      if ($4) {
                          return onActivation;
                      };
                      return Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit);
                  });
              });
          };
      };
  };
  exports["konamiCode"] = konamiCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Frog.Model"] = $PS["Game.Frog.Model"] || {};
  var exports = $PS["Game.Frog.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Game_Core = $PS["Game.Core"];
  var Lib_KonamiCode = $PS["Lib.KonamiCode"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];
  var winningPositions = function (dictFoldable) {
      return function (size) {
          return function (moves) {
              var t = Lib_Util.tabulate(size)(function (i) {
                  return Data_Lazy.defer(function (v) {
                      return i === 0 || Data_Foldable.all(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (m) {
                          return Data_Maybe.maybe(false)((function () {
                              var $30 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                              return function ($31) {
                                  return $30(Data_Lazy.force($31));
                              };
                          })())(Data_Array.index(t)(i - m | 0));
                      })(moves);
                  });
              });
              return Data_Functor.mapFlipped(Data_Functor.functorArray)(t)(Data_Lazy.force);
          };
      };
  };
  var istate = Game_Core.genState(20)(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 20,
          nbColumns: v.nbColumns,
          customSize: v.customSize,
          mode: Game_Core.ExpertMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      moves: Data_Array_NonEmpty.cons(1)(Data_Array_NonEmpty.cons(2)(Data_Array_NonEmpty.singleton(3))),
      winning: [  ],
      marked: [  ],
      keySequence: [  ]
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _keySequence = function (dictStrong) {
      var $32 = _ext(dictStrong);
      var $33 = Data_Lens_Lens.lens(function (v) {
          return v.keySequence;
      })(function (v) {
          return function (v1) {
              return {
                  keySequence: v1,
                  marked: v.marked,
                  moves: v.moves,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($34) {
          return $32($33($34));
      };
  };
  var _marked = function (dictStrong) {
      var $35 = _ext(dictStrong);
      var $36 = Data_Lens_Lens.lens(function (v) {
          return v.marked;
      })(function (v) {
          return function (v1) {
              return {
                  marked: v1,
                  keySequence: v.keySequence,
                  moves: v.moves,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($37) {
          return $35($36($37));
      };
  };
  var markA = function (i) {
      return Pha_Action.action(Data_Lens_Setter.over((function () {
          var $38 = _marked(Data_Profunctor_Strong.strongFn);
          var $39 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(i)(Data_Lens_Internal_Wander.wanderFunction);
          return function ($40) {
              return $38($39($40));
          };
      })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
  };
  var _moves = function (dictStrong) {
      var $41 = _ext(dictStrong);
      var $42 = Data_Lens_Lens.lens(function (v) {
          return v.moves;
      })(function (v) {
          return function (v1) {
              return {
                  moves: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($43) {
          return $41($42($43));
      };
  };
  var _winning = function (dictStrong) {
      var $44 = _ext(dictStrong);
      var $45 = Data_Lens_Lens.lens(function (v) {
          return v.winning;
      })(function (v) {
          return function (v1) {
              return {
                  winning: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  moves: v.moves
              };
          };
      })(dictStrong);
      return function ($46) {
          return $44($45($46));
      };
  };
  var frogGame2 = new Game_Core.TwoPlayersGame(function () {
      return frogGame;
  }, function (state) {
      return Data_Maybe.fromMaybe(true)(Data_Array.index(Data_Lens_Getter.viewOn(state)(_winning(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  }, function (state) {
      return Data_Array.filter(Game_Core.canPlay(frogGame)(state))(Lib_Util["range'"](0)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))));
  });
  var frogGame = new Game_Core.Game(function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var moves = Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget));
          var maximum = Data_Foldable.foldr(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Ord.max(Data_Ord.ordInt))(0)(moves);
          return Data_Foldable.elem(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Eq.eqInt)(position - v | 0)(moves) || position > 0 && (v === 0 && position <= maximum);
      };
  }, Game_Core["computerMove'"](frogGame2), function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      return Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)) === 0;
  }, function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_marked(Data_Profunctor_Strong.strongFn))(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(false))(Data_Lens_Setter.set(_winning(Data_Profunctor_Strong.strongFn))(winningPositions(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget))))(state)));
  }, function (state) {
      return function (v) {
          return v;
      };
  }, function (v) {
      return new Game_Core.SizeLimit(5, 0, 30, 0);
  });
  var reachableArray = function (state) {
      return Lib_Util.tabulate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(Game_Core.canPlay(frogGame)(state));
  };
  var selectMoveA = (function () {
      var _selectMove = function (move) {
          return function (moves) {
              var moves2 = Data_Array.filter(function (m) {
                  return (m === move) !== Data_Foldable.elem(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Eq.eqInt)(m)(moves);
              })(Lib_Util["range'"](1)(5));
              return Data_Maybe.fromMaybe(moves)(Data_Array_NonEmpty.fromArray(moves2));
          };
      };
      return Game_Core["newGame'"](frogGame)((function () {
          var $47 = Data_Lens_Setter.over(_moves(Data_Profunctor_Strong.strongFn));
          return function ($48) {
              return $47(_selectMove($48));
          };
      })());
  })();
  var onKeyDown = Lib_KonamiCode.konamiCode(function (dictStrong) {
      return _keySequence(dictStrong);
  })(Pha_Action.action(function (st) {
      return Data_Lens_Setter.set(_marked(Data_Profunctor_Strong.strongFn))(Data_Lens_Getter.viewOn(st)(_winning(Data_Lens_Internal_Forget.strongForget)))(st);
  }));
  exports["_moves"] = _moves;
  exports["_marked"] = _marked;
  exports["istate"] = istate;
  exports["reachableArray"] = reachableArray;
  exports["selectMoveA"] = selectMoveA;
  exports["markA"] = markA;
  exports["onKeyDown"] = onKeyDown;
  exports["frogGame"] = frogGame;
})(PS);
(function(exports) {
  exports.shiftKey = e => !!e.shiftKey;
})(PS["Pha.Event"] = PS["Pha.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha.Event"] = $PS["Pha.Event"] || {};
  var exports = $PS["Pha.Event"];
  var $foreign = $PS["Pha.Event"];
  exports["shiftKey"] = $foreign.shiftKey;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Frog.View"] = $PS["Game.Frog.View"] || {};
  var exports = $PS["Game.Frog.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Event = $PS["Pha.Event"];
  var Pha_Html = $PS["Pha.Html"];
  var Run = $PS["Run"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var spiralPointsPolar = function (n) {
      return Data_Array.reverse(Lib_Util.tabulate(n + 1 | 0)(function (i) {
          var theta = $$Math.sqrt((function () {
              var $13 = i === n;
              if ($13) {
                  return 21.0;
              };
              return (Data_Int.toNumber(i) * 20.0) / Data_Int.toNumber(n);
          })()) * 1.36 * $$Math.pi;
          var radius = (61.0 * theta) / (2.0 * $$Math.pi);
          return {
              theta: theta,
              radius: radius
          };
      }));
  };
  var polarToCartesian = function (v) {
      return {
          x: v.radius * $$Math.cos(v.theta),
          y: v.radius * $$Math.sin(v.theta)
      };
  };
  var spiralPoints = function (n) {
      return Data_Functor.mapFlipped(Data_Functor.functorArray)(spiralPointsPolar(n))(polarToCartesian);
  };
  var lineIntersection = function (m1) {
      return function (b1) {
          return function (m2) {
              return function (b2) {
                  var x = (b2 - b1) / (m1 - m2);
                  return {
                      x: x,
                      y: m1 * x + b1
                  };
              };
          };
      };
  };
  var spiral = function (center) {
      return function (startRadius) {
          return function (radiusStep) {
              return function (startTheta) {
                  return function (endTheta) {
                      return function (thetaStep) {
                          return Data_String_Common.joinWith(" ")(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
                              return function (v) {
                                  var v1 = lineIntersection(v.value0.slope)(v.value0.intercept)(v.value1.slope)(v.value1.intercept);
                                  var p = [ "Q", Data_Show.show(Data_Show.showNumber)(v1.x + center.x), Data_Show.show(Data_Show.showNumber)(v1.y + center.y), Data_Show.show(Data_Show.showNumber)(v.value1.point.x), Data_Show.show(Data_Show.showNumber)(v.value1.point.y) ];
                                  var $19 = i === 0;
                                  if ($19) {
                                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "M", Data_Show.show(Data_Show.showNumber)(v.value0.point.x), Data_Show.show(Data_Show.showNumber)(v.value0.point.y) ])(p);
                                  };
                                  return p;
                              };
                          })(Lib_Util.pairwise(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util.floatRange(startTheta)(endTheta)(thetaStep))(function (theta) {
                              var b = radiusStep / (2.0 * $$Math.pi);
                              var r = startRadius + b * theta;
                              var point = {
                                  x: center.x + r * $$Math.cos(theta),
                                  y: center.y + r * $$Math.sin(theta)
                              };
                              var slope = (b * $$Math.sin(theta) + r * $$Math.cos(theta)) / (b * $$Math.cos(theta) - r * $$Math.sin(theta));
                              var intercept = -(slope * r * $$Math.cos(theta) - r * $$Math.sin(theta));
                              return {
                                  point: point,
                                  slope: slope,
                                  intercept: intercept
                              };
                          })))));
                      };
                  };
              };
          };
      };
  };
  var spiralPath = spiral({
      x: 0.0,
      y: 0.0
  })(0.0)(61.0)(0.0)((37.0 / 6.0) * $$Math.pi)($$Math.pi / 6.0);
  var lily = function (i) {
      return function (x) {
          return function (y) {
              return function (reachable) {
                  return function (hidden) {
                      return (function () {
                          var $24 = i === 0;
                          if ($24) {
                              return Pha_Html.use(x - 30.0)(y - 45.0)(80.0)(80.0);
                          };
                          return Pha_Html.use(x - 24.0)(y - 24.0)(48.0)(48.0);
                      })()("#lily")([ Pha_Html["class'"]("frog-lily")(true), Pha_Html["class'"]("reachable")(reachable), Pha_Html["class'"]("hidden")(hidden) ]);
                  };
              };
          };
      };
  };
  var view = function (lens) {
      return function (state) {
          var winTitle = UI_Template.winTitleFor2Players(state);
          var spoints = spiralPoints(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          var rules = [ Pha.text("Jeu de la grenouille"), Pha_Html.br, Pha.text("R\xe8gles pas encore d\xe9finies") ];
          var reachable = Game_Frog_Model.reachableArray(state);
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var pointsPolar = spiralPointsPolar(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          var grid = Pha_Html["div'"]([ Pha_Html["class'"]("ui-board frog-board")(true) ])([ Pha_Html.svg([ Pha_Html.viewBox(-190 | 0)(-200 | 0)(400)(400), Pha_Html.height("100%"), Pha_Html.width("100%") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.path(spiralPath)([ Pha_Html.fill("none"), Pha_Html.stroke("black"), Pha_Html.strokeWidth("3") ]), Pha_Html.line(153.0)(9.0)(207.0)(20.0)([ Pha_Html.stroke("black"), Pha_Html.strokeDasharray("5"), Pha_Html.strokeWidth("6") ]), Pha_Html.line(153.0)(7.0)(153.0)(39.0)([ Pha_Html.stroke("black"), Pha_Html.strokeWidth("3") ]), Pha_Html.line(207.0)(18.0)(207.0)(50.0)([ Pha_Html.stroke("black"), Pha_Html.strokeWidth("3") ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.map2(spoints)(reachable)(function (i) {
              return function (v) {
                  return function (reach) {
                      return Pha_Html.g([ Pha_Html.key("lily" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html.click(Pha_Action.zoomAt(function (dictStrong) {
                          return lens(dictStrong);
                      })(Control_Bind.bind(Run.bindRun)(Pha_Action.getEvent)(function (e) {
                          var $26 = Pha_Event.shiftKey(e);
                          if ($26) {
                              return Game_Frog_Model.markA(i);
                          };
                          return Game_Core.playA(Game_Frog_Model.frogGame)(i);
                      }))) ])([ lily(i)(v.x)(v.y)(false)(false), lily(i)(v.x)(v.y)(true)(!reach), Pha_Html["text'"](v.x)(v.y)((function () {
                          var $27 = Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget));
                          if ($27) {
                              return Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) - i | 0);
                          };
                          return "";
                      })())([ Pha_Html["class'"]("frog-index")(true) ]) ]);
                  };
              };
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_marked"](Data_Lens_Internal_Forget.strongForget)))(spoints)(function (i) {
              return function (mark) {
                  return function (v) {
                      return Pha.whenN(mark && i !== position)(function (v1) {
                          return Pha_Html.use(v.x - 20.0)(v.y - 20.0)(32.0)(32.0)("#frog2")([ Pha_Html.key("reach" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html["class'"]("frog-frog marked")(true) ]);
                      });
                  };
              };
          }))([ (function () {
              var v = Data_Maybe.fromMaybe({
                  radius: 0.0,
                  theta: 0.0
              })(Data_Array.index(pointsPolar)(position));
              return Pha_Html.g([ Pha_Html.key("frog"), Pha_Html["class'"]("frog-frog-container")(true), Pha_Html.style("transform")(Pha_Html.translate(v.radius)(0.0) + (" rotate(" + (Data_Show.show(Data_Show.showNumber)((v.theta * 180.0) / $$Math.pi) + "deg)"))), Pha_Html.style("transform-origin")(Data_Show.show(Data_Show.showNumber)(-v.radius) + "px 0") ])([ Pha_Html.g([ Pha_Html["class'"]("frog-frog-container")(true), Pha_Html.style("transform")("rotate(" + (Data_Show.show(Data_Show.showNumber)((-v.theta * 180.0) / $$Math.pi) + "deg)")) ])([ Pha_Html.use(-20.0)(-20.0)(40.0)(40.0)("#frog2")([ Pha_Html["class'"]("frog-frog")(true), Pha_Html["class'"]("goal")(position === 0) ]) ]) ]);
          })() ])))), Pha_Html.span([  ])([ Pha.text(UI_Template.turnMessage(Game_Frog_Model.frogGame)(state)) ]) ]);
          var config = UI_Template.card("La grenouille")([ UI_Icons.iconSelectGroupM(Data_Show.showInt)(Data_Eq.eqInt)(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("D\xe9placements autoris\xe9s")([ 1, 2, 3, 4, 5 ])(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_moves"](Data_Lens_Internal_Forget.strongForget)))(Game_Frog_Model.selectMoveA)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icons2Players(Game_Frog_Model.frogGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp, UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = UI_Template.incDecGrid(Game_Frog_Model.frogGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Frog_Model.frogGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: winTitle
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Frog"] = $PS["Game.Frog"] || {};
  var exports = $PS["Game.Frog"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Game_Frog_View = $PS["Game.Frog.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Frog_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Frog_Model.frogGame)(v));
  }, function (a) {
      return Pha_Action.zoomAt(function (dictStrong) {
          return is(dictStrong.Profunctor0());
      })(Game_Frog_Model.onKeyDown(a));
  }, function (lens) {
      return function (v) {
          return Game_Frog_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function(exports) {
  exports.getLocationHref = () => window.location.href;

  exports.setTimeout = ms => fn => () => setTimeout (fn, ms);
})(PS["Main"] = PS["Main"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var $foreign = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor_Variant = $PS["Data.Functor.Variant"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Baseball = $PS["Game.Baseball"];
  var Game_Chocolat = $PS["Game.Chocolat"];
  var Game_Frog = $PS["Game.Frog"];
  var Lib_Random = $PS["Lib.Random"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];
  var Run = $PS["Run"];                
  var extractLocation = function (url) {
      return function (defaultValue) {
          return Data_Maybe.maybe(defaultValue)(function (i) {
              return Data_String_CodePoints.drop(i + 1 | 0)(url);
          })(Data_String_CodePoints.indexOf("#")(url));
      };
  };
  var _frog = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.frog;
      })(function (v) {
          return function (v1) {
              return {
                  frog: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  location: v.location
              };
          };
      })(dictStrong);
  };
  var _chocolat = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.chocolat;
      })(function (v) {
          return function (v1) {
              return {
                  chocolat: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  frog: v.frog,
                  location: v.location
              };
          };
      })(dictStrong);
  };
  var _baseball = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.baseball;
      })(function (v) {
          return function (v1) {
              return {
                  baseball: v1,
                  anim: v.anim,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  location: v.location
              };
          };
      })(dictStrong);
  };
  var sliceFn = function (state) {
      return function (fn) {
          if (state.location === "baseball") {
              return fn(Game_Baseball.cgame)(function (dictStrong) {
                  return _baseball(dictStrong);
              });
          };
          if (state.location === "chocolat") {
              return fn(Game_Chocolat.cgame)(function (dictStrong) {
                  return _chocolat(dictStrong);
              });
          };
          if (state.location === "frog") {
              return fn(Game_Frog.cgame)(function (dictStrong) {
                  return _frog(dictStrong);
              });
          };
          return fn(Game_Baseball.cgame)(function (dictStrong) {
              return _baseball(dictStrong);
          });
      };
  };
  var viewGame = function (st) {
      return sliceFn(st)(function (dictCGame) {
          return function (lens) {
              return Game.view(dictCGame)(function (dictStrong) {
                  return lens(dictStrong);
              })(Data_Lens_Getter.viewOn(st)(lens(Data_Lens_Internal_Forget.strongForget)));
          };
      });
  };
  var viewG = function (state) {
      return Pha_Html["div'"]([ Pha_Html.key(state.location), Pha_Html["class'"]("main-main-container")(true), Pha_Html["class'"]("valise")(state.location === "valise"), Pha_Html["class'"]("appear")(state.anim) ])([ Pha.whenN(state.location !== "valise")(function (v) {
          return Pha_Html.a([ Pha_Html["class'"]("main-minivalise-link")(true), Pha_Html.href("#valise") ])([ Pha_Html.svguse("#valise")([  ]) ]);
      }), viewGame(state) ]);
  };
  var main = function __do() {
      var v = $foreign.getLocationHref();
      var location = extractLocation(v)("valise");
      var v1 = Game.init(Game_Baseball.cgame)(Game_Baseball.state)();
      var v2 = Game.init(Game_Chocolat.cgame)(Game_Chocolat.state)();
      var v3 = Game.init(Game_Frog.cgame)(Game_Frog.state)();
      var state = {
          baseball: v1,
          chocolat: v2,
          frog: v3,
          location: location,
          anim: false
      };
      return Pha.app({
          state: state,
          view: viewG,
          node: "root",
          events: [  ],
          effects: function (ev) {
              return Data_Functor_Variant.match()()()({
                  delay: function (v4) {
                      return $foreign.setTimeout(v4.value0)(v4.value1);
                  },
                  rng: function (v4) {
                      return Control_Bind.bind(Effect.bindEffect)(Lib_Random.genSeed)(v4.value0);
                  },
                  event: function (v4) {
                      return v4.value0(ev);
                  }
              });
          },
          init: Control_Applicative.pure(Run.applicativeRun)(Data_Unit.unit)
      })();
  };
  exports["extractLocation"] = extractLocation;
  exports["_baseball"] = _baseball;
  exports["_chocolat"] = _chocolat;
  exports["_frog"] = _frog;
  exports["sliceFn"] = sliceFn;
  exports["viewG"] = viewG;
  exports["viewGame"] = viewGame;
  exports["main"] = main;
  exports["getLocationHref"] = $foreign.getLocationHref;
  exports["setTimeout"] = $foreign.setTimeout;
})(PS);
PS["Main"].main();