// Generated by purs bundle 0.13.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                       
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (i) {
        return function (xs) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var unsafeFreeze = (function () {
      var $13 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
      return function ($14) {
          return $13($14);
      };
  })();
  var thaw = $foreign.copyImpl;
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var v = thaw(xs)();
              var v1 = f(v)();
              return unsafeFreeze(v)();
          };
      };
  };                                                                           
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modify = function (i) {
      return function (f) {
          return function (xs) {
              return function __do() {
                  var v = peek(i)(xs)();
                  if (v instanceof Data_Maybe.Just) {
                      return $foreign.poke(i)(f(v.value0))(xs)();
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return false;
                  };
                  throw new Error("Failed pattern match at Data.Array.ST (line 195, column 3 - line 197, column 26): " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["withArray"] = withArray;
  exports["peek"] = peek;
  exports["modify"] = modify;
  exports["thaw"] = thaw;
  exports["unsafeFreeze"] = unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["ordInt"] = ordInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var modifyAtIndices = function (dictFoldable) {
      return function (is) {
          return function (f) {
              return function (xs) {
                  return Data_Array_ST.withArray(function (res) {
                      return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                          return Data_Array_ST.modify(i)(f)(res);
                      })(is);
                  })(xs)();
              };
          };
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["modifyAtIndices"] = modifyAtIndices;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["snoc"] = $foreign.snoc;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var init = adaptMaybe(Data_Array.init);
  var last = adaptMaybe(Data_Array.last);    
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeIndex = function (dictPartial) {
      return adaptAny(Data_Array.unsafeIndex(dictPartial));
  };
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["length"] = length;
  exports["head"] = head;
  exports["last"] = last;
  exports["init"] = init;
  exports["unsafeIndex"] = unsafeIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Const"] = $PS["Data.Const"] || {};
  var exports = $PS["Data.Const"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];                                          
  var Const = function (x) {
      return x;
  };
  var newtypeConst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Const);
  var functorConst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return m;
      };
  });
  exports["Const"] = Const;
  exports["newtypeConst"] = newtypeConst;
  exports["functorConst"] = functorConst;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.sin = Math.sin;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["sin"] = $foreign.sin;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Int.Bits"] = $PS["Data.Int.Bits"] || {};
  var exports = $PS["Data.Int.Bits"];
  var $foreign = $PS["Data.Int.Bits"];
  exports["xor"] = $foreign.xor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };                                 
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  exports["launchAff"] = launchAff;
  exports["delay"] = delay;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffectAff"] = monadEffectAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Lib.Core"] = $PS["Lib.Core"] || {};
  var exports = $PS["Lib.Core"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var tabulate = function (v) {
      return function (v1) {
          if (v === 0) {
              return [  ];
          };
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Array.range(0)(v - 1 | 0))(v1);
      };
  };
  var tabulate2 = function (n) {
      return function (m) {
          return function (f) {
              return tabulate(n * m | 0)(function (i) {
                  return f({
                      row: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(m),
                      col: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(m)
                  });
              });
          };
      };
  };
  var swap = function (i) {
      return function (j) {
          return function (array) {
              return Data_Maybe.fromMaybe(array)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(i))(function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(j))(function (v1) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.updateAt(i)(v1)(array))(Data_Array.updateAt(j)(v));
                  });
              }));
          };
      };
  };
  exports["tabulate"] = tabulate;
  exports["tabulate2"] = tabulate2;
  exports["swap"] = swap;
})(PS);
(function(exports) {
  exports.genSeed = Math.random;
})(PS["Lib.Random"] = PS["Lib.Random"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Lib.Random"] = $PS["Lib.Random"] || {};
  var exports = $PS["Lib.Random"];
  var $foreign = $PS["Lib.Random"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Lib_Core = $PS["Lib.Core"];
  var $$Math = $PS["Math"];                
  var Seed = function (x) {
      return x;
  };
  var Random = function (x) {
      return x;
  };
  var runRnd = function (v) {
      return function __do() {
          var v1 = $foreign.genSeed();
          return Data_Tuple.fst(v(v1));
      };
  };
  var nextSeed = function (v) {
      return Seed(($$Math.sin(v * 2819921.0) + 1.0) / 2.0);
  };
  var intFromSeed = function (v) {
      return function (max) {
          return Data_Int.floor(v * Data_Int.toNumber(max));
      };
  };
  var randomInt = function (n) {
      return function (seed) {
          return new Data_Tuple.Tuple(intFromSeed(seed)(n), nextSeed(seed));
      };
  };
  var functorRandom = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function (seed) {
              var v1 = v(seed);
              return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
          };
      };
  });
  var randomPick = function (t) {
      return Data_Functor.map(functorRandom)(Data_Array_NonEmpty.unsafeIndex()(t))(randomInt(Data_Array_NonEmpty.length(t)));
  };
  var monadRandom = new Control_Monad.Monad(function () {
      return applicativeRandom;
  }, function () {
      return bindRandom;
  });
  var bindRandom = new Control_Bind.Bind(function () {
      return applyRandom;
  }, function (v) {
      return function (f) {
          return function (seed) {
              var v1 = v(seed);
              var v2 = f(v1.value0);
              return v2(v1.value1);
          };
      };
  });
  var applyRandom = new Control_Apply.Apply(function () {
      return functorRandom;
  }, Control_Monad.ap(monadRandom));
  var applicativeRandom = new Control_Applicative.Applicative(function () {
      return applyRandom;
  }, function (x) {
      return Random(Data_Tuple.Tuple.create(x));
  });
  var randomInts$prime = function (n) {
      return function (fn) {
          return Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeRandom)(Lib_Core.tabulate(n)(function (i) {
              return randomInt(fn(i));
          }));
      };
  };
  var shuffle = function (array) {
      var n = Data_Array.length(array);
      return Control_Bind.bind(bindRandom)(randomInts$prime(n - 1 | 0)(function (x) {
          return n - x | 0;
      }))(function (v) {
          return Control_Applicative.pure(applicativeRandom)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(Lib_Core.swap))(array)(Data_Array.mapWithIndex(function (i) {
              return function (j) {
                  return new Data_Tuple.Tuple(i, i + j | 0);
              };
          })(v)));
      });
  };
  exports["Seed"] = Seed;
  exports["Random"] = Random;
  exports["intFromSeed"] = intFromSeed;
  exports["nextSeed"] = nextSeed;
  exports["randomInt"] = randomInt;
  exports["shuffle"] = shuffle;
  exports["randomPick"] = randomPick;
  exports["runRnd"] = runRnd;
  exports["monadRandom"] = monadRandom;
  exports["functorRandom"] = functorRandom;
  exports["applyRandom"] = applyRandom;
  exports["applicativeRandom"] = applicativeRandom;
  exports["bindRandom"] = bindRandom;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Optic.Getter"] = $PS["Optic.Getter"] || {};
  var exports = $PS["Optic.Getter"];
  var Data_Const = $PS["Data.Const"];
  var Data_Function = $PS["Data.Function"];
  var Data_Newtype = $PS["Data.Newtype"];                      
  var view = function (asa) {
      return function (s) {
          return Data_Newtype.unwrap(Data_Const.newtypeConst)(asa(Data_Const.Const)(s));
      };
  };
  var weiv = Data_Function.flip(view);
  exports["view"] = view;
  exports["weiv"] = weiv;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Optic.Lens"] = $PS["Optic.Lens"] || {};
  var exports = $PS["Optic.Lens"];
  var Data_Functor = $PS["Data.Functor"];                
  var lens = function (s2a) {
      return function (s2b2t) {
          return function (dictFunctor) {
              return function (a2fb) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(s2b2t(s))(a2fb(s2a(s)));
                  };
              };
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Optic.Setter"] = $PS["Optic.Setter"] || {};
  var exports = $PS["Optic.Setter"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var set = function (stab) {
      return function (b) {
          var $25 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
          var $26 = stab((function () {
              var $28 = Data_Function["const"](b);
              return function ($29) {
                  return Data_Identity.Identity($28($29));
              };
          })());
          return function ($27) {
              return $25($26($27));
          };
      };
  };
  var over = function (dictProfunctor) {
      return function (pstab) {
          return function (pab) {
              var $30 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
              var $31 = pstab(Data_Profunctor.rmap(dictProfunctor)(Data_Identity.Identity)(pab));
              return function ($32) {
                  return $30($31($32));
              };
          };
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS);
(function(exports) {
  const RECYCLED_NODE = 1
  const LAZY_NODE = 2
  const TEXT_NODE = 3
  const EMPTY_OBJ = {}
  const EMPTY_ARR = []
  const map = EMPTY_ARR.map
  const isArray = Array.isArray
  const defer = requestAnimationFrame || setTimeout

  const merge = function(a, b) {
    var out = {}

    for (var k in a) out[k] = a[k]
    for (var k in b) out[k] = b[k]

    return out
  }

  const batch = list =>
    list.reduce((out, item) =>
      out.concat(
        !item || item === true
          ? 0
          : typeof item[0] === "function"
          ? [item]
          : batch(item)
      )
    , EMPTY_ARR)

  const isSameAction = (a, b) =>
    isArray(a) && isArray(b) && a[0] === b[0] && typeof a[0] === "function"

  const shouldRestart = function(a, b) {
    if (a !== b) {
      for (var k in merge(a, b)) {
        if (a[k] !== b[k] && !isSameAction(a[k], b[k])) return true
        b[k] = a[k]
      }
    }
  } 

  const patchSubs = function(oldSubs, newSubs, dispatch) {
    for (var
          i = 0, oldSub, newSub, subs = [];
      i < oldSubs.length || i < newSubs.length;
      i++
    ) {
      oldSub = oldSubs[i]
      newSub = newSubs[i]
      subs.push(
        newSub
          ? !oldSub ||
            newSub[0] !== oldSub[0] ||
            shouldRestart(newSub[1], oldSub[1])
            ? [
                newSub[0],
                newSub[1],
                newSub[0](dispatch, newSub[1]),
                oldSub && oldSub[2]()
              ]
            : oldSub
          : oldSub && oldSub[2]()
      )
    }
    return subs
  }

  const patchProperty = function(node, key, oldValue, newValue, listener, isSvg) {
    if (key === "key") {
    } else if (key === "style") {
      for (var k in merge(oldValue, newValue)) {
        oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
        if (k[0] === "-") {
          node[key].setProperty(k, oldValue)
        } else {
          node[key][k] = oldValue
        }
      }
    } else if (key[0] === "o" && key[1] === "n") {
      if (
        !((node.actions || (node.actions = {}))[
          (key = key.slice(2).toLowerCase())
        ] = newValue)
      ) {
        node.removeEventListener(key, listener)
      } else if (!oldValue) {
        node.addEventListener(key, listener)
      }
    } else if (!isSvg && key !== "list" && key in node) {
      node[key] = newValue == null ? "" : newValue
    } else if (
      newValue == null ||
      newValue === false ||
      (key === "class" && !newValue)
    ) {
      node.removeAttribute(key)
    } else {
      node.setAttribute(key, newValue)
    }
  }

  const createNode = function(vnode, listener, isSvg) {
    var node =
      vnode.type === TEXT_NODE
        ? document.createTextNode(vnode.name)
        : (isSvg = isSvg || vnode.name === "svg")
        ? document.createElementNS("http://www.w3.org/2000/svg", vnode.name)
        : document.createElement(vnode.name)
    var props = vnode.props

    for (var k in props) {
      patchProperty(node, k, null, props[k], listener, isSvg)
    }

    for (var i = 0, len = vnode.children.length; i < len; i++) {
      node.appendChild(
        createNode(
          (vnode.children[i] = getVNode(vnode.children[i])),
          listener,
          isSvg
        )
      )
    }

    return (vnode.node = node)
  }

  const getKey = function(vnode) {
    return vnode == null ? null : vnode.key
  }

  const patch = function(parent, node, oldVNode, newVNode, listener, isSvg) {
    if (oldVNode === newVNode) {
    } else if (
      oldVNode != null &&
      oldVNode.type === TEXT_NODE &&
      newVNode.type === TEXT_NODE
    ) {
      if (oldVNode.name !== newVNode.name) node.nodeValue = newVNode.name
    } else if (oldVNode == null || oldVNode.name !== newVNode.name) {
      node = parent.insertBefore(
        createNode((newVNode = getVNode(newVNode)), listener, isSvg),
        node
      )
      if (oldVNode != null) {
        parent.removeChild(oldVNode.node)
      }
    } else {
      var tmpVKid
      var oldVKid

      var oldKey
      var newKey

      var oldVProps = oldVNode.props
      var newVProps = newVNode.props

      var oldVKids = oldVNode.children
      var newVKids = newVNode.children

      var oldHead = 0
      var newHead = 0
      var oldTail = oldVKids.length - 1
      var newTail = newVKids.length - 1

      isSvg = isSvg || newVNode.name === "svg"

      for (var i in merge(oldVProps, newVProps)) {
        if (
          (i === "value" || i === "selected" || i === "checked"
            ? node[i]
            : oldVProps[i]) !== newVProps[i]
        ) {
          patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg)
        }
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldHead])) == null ||
          oldKey !== getKey(newVKids[newHead])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldHead].node,
          oldVKids[oldHead],
          (newVKids[newHead] = getVNode(
            newVKids[newHead++],
            oldVKids[oldHead++]
          )),
          listener,
          isSvg
        )
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldTail])) == null ||
          oldKey !== getKey(newVKids[newTail])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldTail].node,
          oldVKids[oldTail],
          (newVKids[newTail] = getVNode(
            newVKids[newTail--],
            oldVKids[oldTail--]
          )),
          listener,
          isSvg
        )
      }

      if (oldHead > oldTail) {
        while (newHead <= newTail) {
          node.insertBefore(
            createNode(
              (newVKids[newHead] = getVNode(newVKids[newHead++])),
              listener,
              isSvg
            ),
            (oldVKid = oldVKids[oldHead]) && oldVKid.node
          )
        }
      } else if (newHead > newTail) {
        while (oldHead <= oldTail) {
          node.removeChild(oldVKids[oldHead++].node)
        }
      } else {
        for (var i = oldHead, keyed = {}, newKeyed = {}; i <= oldTail; i++) {
          if ((oldKey = oldVKids[i].key) != null) {
            keyed[oldKey] = oldVKids[i]
          }
        }

        while (newHead <= newTail) {
          oldKey = getKey((oldVKid = oldVKids[oldHead]))
          newKey = getKey(
            (newVKids[newHead] = getVNode(newVKids[newHead], oldVKid))
          )

          if (
            newKeyed[oldKey] ||
            (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))
          ) {
            if (oldKey == null) {
              node.removeChild(oldVKid.node)
            }
            oldHead++
            continue
          }

          if (newKey == null || oldVNode.type === RECYCLED_NODE) {
            if (oldKey == null) {
              patch(
                node,
                oldVKid && oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg
              )
              newHead++
            }
            oldHead++
          } else {
            if (oldKey === newKey) {
              patch(
                node,
                oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg
              )
              newKeyed[newKey] = true
              oldHead++
            } else {
              if ((tmpVKid = keyed[newKey]) != null) {
                patch(
                  node,
                  node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),
                  tmpVKid,
                  newVKids[newHead],
                  listener,
                  isSvg
                )
                newKeyed[newKey] = true
              } else {
                patch(
                  node,
                  oldVKid && oldVKid.node,
                  null,
                  newVKids[newHead],
                  listener,
                  isSvg
                )
              }
            }
            newHead++
          }
        }

        while (oldHead <= oldTail) {
          if (getKey((oldVKid = oldVKids[oldHead++])) == null) {
            node.removeChild(oldVKid.node)
          }
        }

        for (var i in keyed) {
          if (newKeyed[i] == null) {
            node.removeChild(keyed[i].node)
          }
        }
      }
    }

    return (newVNode.node = node)
  }

  const propsChanged = function(a, b) {
    for (var k in a) if (a[k] !== b[k]) return true
    for (var k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = function(newVNode, oldVNode) {
    return newVNode.type === LAZY_NODE
      ? ((!oldVNode || propsChanged(oldVNode.lazy, newVNode.lazy)) &&
          ((oldVNode = newVNode.lazy.view(newVNode.lazy)).lazy = newVNode.lazy),
        oldVNode)
      : newVNode
  }

  const createVNode = function(name, props, children, node, key, type) {
    return {
      name: name,
      props: props,
      children: children,
      node: node,
      type: type,
      key: key
    }
  }

  const createTextVNode = (value, node) =>
      createVNode(value, EMPTY_OBJ, EMPTY_ARR, node, null, TEXT_NODE);

  const recycleNode = node =>
    node.nodeType === TEXT_NODE
      ? createTextVNode(node.nodeValue, node)
      : createVNode(
          node.nodeName.toLowerCase(),
          EMPTY_OBJ,
          map.call(node.childNodes, recycleNode),
          node,
          null,
          RECYCLED_NODE
        )

  const Lazy = function(props) {
    return {
      lazy: props,
      type: LAZY_NODE
    }
  }

  const app = props => () => {
    let state = {}
    let lock = false
    const view = props.view;
    let node = document.getElementById(props.node);
    const subscriptions = props.subscriptions;
    let vdom = node && recycleNode(node)
    const subs = []

    const listener = function(event) {
      this.actions[event.type](setState)(state)();
    }

    const setState = newState => () => {
      if (state !== newState) {
        state = newState
        if (subscriptions) {
          subs = patchSubs(subs, batch([subscriptions(state)]), dispatch)
        }
        if (!lock) defer(render, (lock = true))
      }
      return state
    }

    const render = () => {
      lock = false
      node = patch(
        node.parentNode,
        node,
        vdom,
        vdom = view(state),
        listener
      )
    }

    setState(props.init)()
  }

  const h = isStyle => name => ps => children => {
      const style = {};
      const props = {style: style};
      const vdom = { name: name, children: children.filter(x => x), props: props, node: null };
      const n = ps.length;
      for (let i = 0; i < n; i++) {
          const obj = ps[i];
          const value0 = obj.value0;
          const value1 = obj.value1;
          if (value1 === undefined)
              vdom.key = value0;
          else if (typeof value1 === 'function')
              vdom.props["on"+value0] = value1;
          else if (typeof value1 === 'boolean') {
              if(!value1)
                  {}
              else if (props.class)  
                  props.class += ' ' + value0;
              else
                  props.class = value0;
          }
          else if (isStyle(obj))
              style[value0] = value1;
          else
              props[value0] = value1;
      }
      return vdom;
  }

  exports.emptyNode = null;
  exports.app = app;
  exports.hAux = h;
  exports.text = createTextVNode;
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Const = $PS["Data.Const"];
  var Data_Identity = $PS["Data.Identity"];
  var Effect = $PS["Effect"];
  var Lib_Random = $PS["Lib.Random"];
  var Optic_Getter = $PS["Optic.Getter"];
  var Optic_Setter = $PS["Optic.Setter"];                
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Class = (function () {
      function Class(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Class.create = function (value0) {
          return function (value1) {
              return new Class(value0, value1);
          };
      };
      return Class;
  })();
  var Style = (function () {
      function Style(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Style.create = function (value0) {
          return function (value1) {
              return new Style(value0, value1);
          };
      };
      return Style;
  })();
  var Event = (function () {
      function Event(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Event.create = function (value0) {
          return function (value1) {
              return new Event(value0, value1);
          };
      };
      return Event;
  })();
  var rndAction = function (fn) {
      return function (setState) {
          return function (st) {
              return Control_Bind.bind(Effect.bindEffect)(Lib_Random.runRnd(fn(st)))(setState);
          };
      };
  };
  var lensAction = function (lens) {
      return function (act) {
          return function (setState) {
              return function (st) {
                  return act(function (st$prime) {
                      return setState(Optic_Setter.set(lens(Data_Identity.functorIdentity))(st$prime)(st));
                  })(Optic_Getter.weiv(st)(lens(Data_Const.functorConst)));
              };
          };
      };
  };
  var isStyle = function (v) {
      if (v instanceof Style) {
          return true;
      };
      return false;
  };
  var h = $foreign.hAux(isStyle);
  var action = Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn);
  exports["Key"] = Key;
  exports["Attr"] = Attr;
  exports["Class"] = Class;
  exports["Style"] = Style;
  exports["Event"] = Event;
  exports["isStyle"] = isStyle;
  exports["h"] = h;
  exports["action"] = action;
  exports["rndAction"] = rndAction;
  exports["lensAction"] = lensAction;
  exports["text"] = $foreign.text;
  exports["emptyNode"] = $foreign.emptyNode;
  exports["app"] = $foreign.app;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Lib.Game"] = $PS["Lib.Game"] || {};
  var exports = $PS["Lib.Game"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Const = $PS["Data.Const"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Lib_Random = $PS["Lib.Random"];
  var Optic_Getter = $PS["Optic.Getter"];
  var Optic_Lens = $PS["Optic.Lens"];
  var Optic_Setter = $PS["Optic.Setter"];
  var Pha = $PS["Pha"];                
  var SoloMode = (function () {
      function SoloMode() {

      };
      SoloMode.value = new SoloMode();
      return SoloMode;
  })();
  var RandomMode = (function () {
      function RandomMode() {

      };
      RandomMode.value = new RandomMode();
      return RandomMode;
  })();
  var ExpertMode = (function () {
      function ExpertMode() {

      };
      ExpertMode.value = new ExpertMode();
      return ExpertMode;
  })();
  var DuelMode = (function () {
      function DuelMode() {

      };
      DuelMode.value = new DuelMode();
      return DuelMode;
  })();
  var Rules = (function () {
      function Rules() {

      };
      Rules.value = new Rules();
      return Rules;
  })();
  var NoDialog = (function () {
      function NoDialog() {

      };
      NoDialog.value = new NoDialog();
      return NoDialog;
  })();
  var ConfirmNewGame = (function () {
      function ConfirmNewGame(value0) {
          this.value0 = value0;
      };
      ConfirmNewGame.create = function (value0) {
          return new ConfirmNewGame(value0);
      };
      return ConfirmNewGame;
  })();
  var State = (function () {
      function State(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      State.create = function (value0) {
          return function (value1) {
              return new State(value0, value1);
          };
      };
      return State;
  })();
  var LensAction = function (_lensaction) {
      this["_lensaction"] = _lensaction;
  };
  var Game = function (canPlay, computerMove, initialPosition, isLevelFinished, play) {
      this.canPlay = canPlay;
      this.computerMove = computerMove;
      this.initialPosition = initialPosition;
      this.isLevelFinished = isLevelFinished;
      this.play = play;
  };
  var TwoPlayersGame = function (Game0, isLosingPosition, possibleMoves) {
      this.Game0 = Game0;
      this.isLosingPosition = isLosingPosition;
      this.possibleMoves = possibleMoves;
  };
  var possibleMoves = function (dict) {
      return dict.possibleMoves;
  };
  var play = function (dict) {
      return dict.play;
  };
  var lensactionrnd = new LensAction(function (lens) {
      return function (f) {
          return Pha.lensAction(function (dictFunctor) {
              return lens(dictFunctor);
          })(Pha.rndAction(f));
      };
  });
  var lensaction1 = new LensAction(function (lens) {
      return function (f) {
          return Pha.lensAction(function (dictFunctor) {
              return lens(dictFunctor);
          })(Pha.action(f));
      };
  });
  var isLosingPosition = function (dict) {
      return dict.isLosingPosition;
  };
  var isLevelFinished = function (dict) {
      return dict.isLevelFinished;
  };
  var initialPosition = function (dict) {
      return dict.initialPosition;
  };
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SoloMode && y instanceof SoloMode) {
              return true;
          };
          if (x instanceof RandomMode && y instanceof RandomMode) {
              return true;
          };
          if (x instanceof ExpertMode && y instanceof ExpertMode) {
              return true;
          };
          if (x instanceof DuelMode && y instanceof DuelMode) {
              return true;
          };
          return false;
      };
  });
  var defaultCoreState = function (p) {
      return {
          position: p,
          history: [  ],
          redoHistory: [  ],
          levelFinished: false,
          dialog: Rules.value,
          turn: 0,
          nbRows: 0,
          nbColumns: 0,
          mode: SoloMode.value,
          showWin: false
      };
  };
  var genState = function (p) {
      return function (f) {
          return function (ext) {
              return new State(f(defaultCoreState(p)), ext);
          };
      };
  };
  var computerMove = function (dict) {
      return dict.computerMove;
  };
  var canPlay = function (dict) {
      return dict.canPlay;
  };
  var _turn = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.turn;
      })(function (v) {
          return function (x) {
              return new State({
                  position: v.value0.position,
                  history: v.value0.history,
                  redoHistory: v.value0.redoHistory,
                  levelFinished: v.value0.levelFinished,
                  dialog: v.value0.dialog,
                  turn: x,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: v.value0.mode,
                  showWin: v.value0.showWin
              }, v.value1);
          };
      })(dictFunctor);
  };
  var _showWin = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.showWin;
      })(function (v) {
          return function (x) {
              return new State({
                  position: v.value0.position,
                  history: v.value0.history,
                  redoHistory: v.value0.redoHistory,
                  levelFinished: v.value0.levelFinished,
                  dialog: v.value0.dialog,
                  turn: v.value0.turn,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: v.value0.mode,
                  showWin: x
              }, v.value1);
          };
      })(dictFunctor);
  };
  var showVictory = function (setState) {
      return function (state) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(setState(Optic_Setter.set(_showWin(Data_Identity.functorIdentity))(true)(state))))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(1000.0))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(setState(state)))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  });
              });
          });
      };
  };
  var _redoHistory = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.redoHistory;
      })(function (v) {
          return function (x) {
              return new State({
                  position: v.value0.position,
                  history: v.value0.history,
                  redoHistory: x,
                  levelFinished: v.value0.levelFinished,
                  dialog: v.value0.dialog,
                  turn: v.value0.turn,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: v.value0.mode,
                  showWin: v.value0.showWin
              }, v.value1);
          };
      })(dictFunctor);
  };
  var _position = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.position;
      })(function (v) {
          return function (x) {
              return new State({
                  position: x,
                  history: v.value0.history,
                  redoHistory: v.value0.redoHistory,
                  levelFinished: v.value0.levelFinished,
                  dialog: v.value0.dialog,
                  turn: v.value0.turn,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: v.value0.mode,
                  showWin: v.value0.showWin
              }, v.value1);
          };
      })(dictFunctor);
  };
  var _mode = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.mode;
      })(function (v) {
          return function (x) {
              return new State({
                  position: v.value0.position,
                  history: v.value0.history,
                  redoHistory: v.value0.redoHistory,
                  levelFinished: v.value0.levelFinished,
                  dialog: v.value0.dialog,
                  turn: v.value0.turn,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: x,
                  showWin: v.value0.showWin
              }, v.value1);
          };
      })(dictFunctor);
  };
  var changeTurn = function (state) {
      var $98 = Data_Eq.eq(eqMode)(Optic_Getter.weiv(state)(_mode(Data_Const.functorConst)))(DuelMode.value);
      if ($98) {
          return Optic_Setter.over(Data_Profunctor.profunctorFn)(_turn(Data_Identity.functorIdentity))(function (x) {
              return 1 - x | 0;
          })(state);
      };
      return state;
  };
  var _levelFinished = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.levelFinished;
      })(function (v) {
          return function (x) {
              return new State({
                  position: v.value0.position,
                  history: v.value0.history,
                  redoHistory: v.value0.redoHistory,
                  levelFinished: x,
                  dialog: v.value0.dialog,
                  turn: v.value0.turn,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: v.value0.mode,
                  showWin: v.value0.showWin
              }, v.value1);
          };
      })(dictFunctor);
  };
  var _play = function (dictGame) {
      return function (move) {
          return function (state) {
              var $105 = canPlay(dictGame)(state)(move);
              if ($105) {
                  var state2 = Optic_Setter.over(Data_Profunctor.profunctorFn)(_turn(Data_Identity.functorIdentity))(function (v) {
                      return 1 - v | 0;
                  })(Optic_Setter.set(_position(Data_Identity.functorIdentity))(play(dictGame)(state)(move))(state));
                  var position = Optic_Getter.weiv(state)(_position(Data_Const.functorConst));
                  return Optic_Setter.set(_levelFinished(Data_Identity.functorIdentity))(isLevelFinished(dictGame)(state2))(state2);
              };
              return state;
          };
      };
  };
  var computerMove$prime = function (dictTwoPlayersGame) {
      return function (state) {
          var $106 = isLevelFinished(dictTwoPlayersGame.Game0())(state);
          if ($106) {
              return Data_Maybe.Nothing.value;
          };
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.fromArray(possibleMoves(dictTwoPlayersGame)(state)))(function (moves) {
              var bestMove = (function () {
                  var $107 = Data_Eq.eq(eqMode)(Optic_Getter.weiv(state)(_mode(Data_Const.functorConst)))(RandomMode.value);
                  if ($107) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Foldable.find(Data_Foldable.foldableArray)(function (move) {
                      return isLosingPosition(dictTwoPlayersGame)(_play(dictTwoPlayersGame.Game0())(move)(state));
                  })(Data_Array_NonEmpty.toArray(moves));
              })();
              return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(bestMove)(Control_Applicative.pure(Lib_Random.applicativeRandom)))(new Data_Maybe.Just(Lib_Random.randomPick(moves)));
          });
      };
  };
  var _lensaction = function (dict) {
      return dict["_lensaction"];
  };
  var _history = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.history;
      })(function (v) {
          return function (x) {
              return new State({
                  position: v.value0.position,
                  history: x,
                  redoHistory: v.value0.redoHistory,
                  levelFinished: v.value0.levelFinished,
                  dialog: v.value0.dialog,
                  turn: v.value0.turn,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: v.value0.mode,
                  showWin: v.value0.showWin
              }, v.value1);
          };
      })(dictFunctor);
  };
  var pushToHistory = function (state) {
      return Optic_Setter.set(_redoHistory(Data_Identity.functorIdentity))([  ])(Optic_Setter.over(Data_Profunctor.profunctorFn)(_history(Data_Identity.functorIdentity))(Data_Function.flip(Data_Array.snoc)(Optic_Getter.weiv(state)(_position(Data_Const.functorConst))))(state));
  };
  var _play$prime = function (dictGame) {
      return function (move) {
          return function (setState) {
              return function (state) {
                  return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.launchAff((function () {
                      var $114 = !canPlay(dictGame)(state)(move);
                      if ($114) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      };
                      var st2 = _play(dictGame)(move)(pushToHistory(state));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(setState(st2)))(function () {
                          var $115 = isLevelFinished(dictGame)(st2);
                          if ($115) {
                              return showVictory(setState)(st2);
                          };
                          var $116 = Data_Eq.eq(eqMode)(Optic_Getter.weiv(state)(_mode(Data_Const.functorConst)))(ExpertMode.value);
                          if ($116) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(1000.0))(function () {
                                  return Data_Function.flip(Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit)))(computerMove(dictGame)(st2))(function (rndmove) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Lib_Random.runRnd(rndmove)))(function (v) {
                                          var st3 = _play(dictGame)(v)(st2);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(setState(st3)))(function () {
                                              var $118 = isLevelFinished(dictGame)(st3);
                                              if ($118) {
                                                  return showVictory(setState)(st3);
                                              };
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                          });
                                      });
                                  });
                              });
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      });
                  })()));
              };
          };
      };
  };
  var redo = function (state) {
      return Data_Function.flip(Data_Maybe.maybe(state))(Data_Array_NonEmpty.fromArray(Optic_Getter.weiv(state)(_redoHistory(Data_Const.functorConst))))(function (hs) {
          return changeTurn(Optic_Setter.set(_position(Data_Identity.functorIdentity))(Data_Array_NonEmpty.last(hs))(Optic_Setter.set(_redoHistory(Data_Identity.functorIdentity))(Data_Array_NonEmpty.init(hs))(Optic_Setter.over(Data_Profunctor.profunctorFn)(_history(Data_Identity.functorIdentity))(Data_Function.flip(Data_Array.snoc)(Optic_Getter.weiv(state)(_position(Data_Const.functorConst))))(state))));
      });
  };
  var reset = function (state) {
      return Data_Function.flip(Data_Maybe.maybe(state))(Data_Array_NonEmpty.fromArray(Optic_Getter.weiv(state)(_history(Data_Const.functorConst))))(function (hs) {
          return Optic_Setter.set(_position(Data_Identity.functorIdentity))(Data_Array_NonEmpty.head(hs))(Optic_Setter.set(_history(Data_Identity.functorIdentity))([  ])(Optic_Setter.set(_redoHistory(Data_Identity.functorIdentity))([  ])(Optic_Setter.set(_turn(Data_Identity.functorIdentity))(0)(state))));
      });
  };
  var undo = function (state) {
      return Data_Function.flip(Data_Maybe.maybe(state))(Data_Array_NonEmpty.fromArray(Optic_Getter.weiv(state)(_history(Data_Const.functorConst))))(function (hs) {
          return changeTurn(Optic_Setter.set(_position(Data_Identity.functorIdentity))(Data_Array_NonEmpty.last(hs))(Optic_Setter.set(_history(Data_Identity.functorIdentity))(Data_Array_NonEmpty.init(hs))(Optic_Setter.over(Data_Profunctor.profunctorFn)(_redoHistory(Data_Identity.functorIdentity))(Data_Function.flip(Data_Array.snoc)(Optic_Getter.weiv(state)(_position(Data_Const.functorConst))))(state))));
      });
  };
  var _dialog = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value0.dialog;
      })(function (v) {
          return function (x) {
              return new State({
                  position: v.value0.position,
                  history: v.value0.history,
                  redoHistory: v.value0.redoHistory,
                  levelFinished: v.value0.levelFinished,
                  dialog: x,
                  turn: v.value0.turn,
                  nbRows: v.value0.nbRows,
                  nbColumns: v.value0.nbColumns,
                  mode: v.value0.mode,
                  showWin: v.value0.showWin
              }, v.value1);
          };
      })(dictFunctor);
  };
  var confirmNewGame = function (st) {
      return function (v) {
          return Optic_Setter.set(_dialog(Data_Identity.functorIdentity))(NoDialog.value)(st);
      };
  };
  var newGame = function (dictGame) {
      return function (f) {
          return function (state) {
              var state2 = f(state);
              return Control_Bind.bind(Lib_Random.bindRandom)(initialPosition(dictGame)(state2))(function (v) {
                  var state3 = Optic_Setter.set(_redoHistory(Data_Identity.functorIdentity))([  ])(Optic_Setter.set(_history(Data_Identity.functorIdentity))([  ])(Optic_Setter.set(_position(Data_Identity.functorIdentity))(v)(state2)));
                  var $126 = Data_Array["null"](Optic_Getter.weiv(state2)(_history(Data_Const.functorConst)));
                  if ($126) {
                      return Control_Applicative.pure(Lib_Random.applicativeRandom)(state3);
                  };
                  return Control_Applicative.pure(Lib_Random.applicativeRandom)(Optic_Setter.set(_dialog(Data_Identity.functorIdentity))(new ConfirmNewGame(state3))(state));
              });
          };
      };
  };
  var init = function (dictGame) {
      return newGame(dictGame)(Control_Category.identity(Control_Category.categoryFn));
  };
  var newGame$prime = function (dictGame) {
      return function (f) {
          return function (val) {
              return newGame(dictGame)(f(val));
          };
      };
  };
  exports["_lensaction"] = _lensaction;
  exports["canPlay"] = canPlay;
  exports["computerMove"] = computerMove;
  exports["initialPosition"] = initialPosition;
  exports["isLevelFinished"] = isLevelFinished;
  exports["isLosingPosition"] = isLosingPosition;
  exports["play"] = play;
  exports["possibleMoves"] = possibleMoves;
  exports["Rules"] = Rules;
  exports["NoDialog"] = NoDialog;
  exports["ConfirmNewGame"] = ConfirmNewGame;
  exports["SoloMode"] = SoloMode;
  exports["RandomMode"] = RandomMode;
  exports["ExpertMode"] = ExpertMode;
  exports["DuelMode"] = DuelMode;
  exports["State"] = State;
  exports["defaultCoreState"] = defaultCoreState;
  exports["genState"] = genState;
  exports["_position"] = _position;
  exports["_history"] = _history;
  exports["_redoHistory"] = _redoHistory;
  exports["_mode"] = _mode;
  exports["_turn"] = _turn;
  exports["_dialog"] = _dialog;
  exports["_levelFinished"] = _levelFinished;
  exports["_showWin"] = _showWin;
  exports["LensAction"] = LensAction;
  exports["Game"] = Game;
  exports["changeTurn"] = changeTurn;
  exports["undo"] = undo;
  exports["redo"] = redo;
  exports["reset"] = reset;
  exports["_play"] = _play;
  exports["pushToHistory"] = pushToHistory;
  exports["showVictory"] = showVictory;
  exports["playA"] = _play$prime;
  exports["newGame"] = newGame;
  exports["newGame'"] = newGame$prime;
  exports["init"] = init;
  exports["confirmNewGame"] = confirmNewGame;
  exports["TwoPlayersGame"] = TwoPlayersGame;
  exports["computerMove'"] = computerMove$prime;
  exports["eqMode"] = eqMode;
  exports["lensaction1"] = lensaction1;
  exports["lensactionrnd"] = lensactionrnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Game.Baseball.Model"] = $PS["Game.Baseball.Model"] || {};
  var exports = $PS["Game.Baseball.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Const = $PS["Data.Const"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Lib_Core = $PS["Lib.Core"];
  var Lib_Game = $PS["Lib.Game"];
  var Lib_Random = $PS["Lib.Random"];
  var Optic_Getter = $PS["Optic.Getter"];
  var Optic_Lens = $PS["Optic.Lens"];                    
  var Ext = (function () {
      function Ext(value0) {
          this.value0 = value0;
      };
      Ext.create = function (value0) {
          return new Ext(value0);
      };
      return Ext;
  })();
  var example = Lib_Game.genState([  ])(Control_Category.identity(Control_Category.categoryFn))(new Ext({
      nbBases: 5
  }));
  var _nbBases = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value1.value0.nbBases;
      })(function (v) {
          return function (x) {
              return new Lib_Game.State(v.value0, new Ext({
                  nbBases: x
              }));
          };
      })(dictFunctor);
  };
  var baseballGame = new Lib_Game.Game(function (state) {
      return function (i) {
          return Data_Maybe.fromMaybe(false)((function () {
              var position = Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst));
              var nbBases = Optic_Getter.weiv(state)(_nbBases(Data_Const.functorConst));
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(0))(function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(i))(function (v1) {
                      var diff = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2) - Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v1)(2) | 0;
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(diff)([ 1, nbBases - 1 | 0, -1 | 0, 1 - nbBases | 0 ]));
                  });
              });
          })());
      };
  }, function (state) {
      return Data_Maybe.Nothing.value;
  }, function (state) {
      return Lib_Random.shuffle(Data_Array.range(0)((2 * Optic_Getter.weiv(state)(_nbBases(Data_Const.functorConst)) | 0) - 1 | 0));
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Control_Category.identity(Control_Category.categoryFn))(Data_Array.mapWithIndex(function (i) {
          return function (j) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(2) === Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(j)(2);
          };
      })(Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst))));
  }, function (state) {
      return function (i) {
          return Lib_Core.swap(0)(i)(Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst)));
      };
  });
  exports["Ext"] = Ext;
  exports["_nbBases"] = _nbBases;
  exports["example"] = example;
  exports["baseballGame"] = baseballGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Game.Nim.Model"] = $PS["Game.Nim.Model"] || {};
  var exports = $PS["Game.Nim.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Const = $PS["Data.Const"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int_Bits = $PS["Data.Int.Bits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Lib_Core = $PS["Lib.Core"];
  var Lib_Game = $PS["Lib.Game"];
  var Lib_Random = $PS["Lib.Random"];
  var Optic_Getter = $PS["Optic.Getter"];
  var Optic_Lens = $PS["Optic.Lens"];
  var Optic_Setter = $PS["Optic.Setter"];                
  var Move = (function () {
      function Move(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Move.create = function (value0) {
          return function (value1) {
              return new Move(value0, value1);
          };
      };
      return Move;
  })();
  var Ext = (function () {
      function Ext(value0) {
          this.value0 = value0;
      };
      Ext.create = function (value0) {
          return new Ext(value0);
      };
      return Ext;
  })();
  var nimState = Lib_Game.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          levelFinished: v.levelFinished,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: v.nbRows,
          nbColumns: v.nbColumns,
          mode: Lib_Game.ExpertMode.value,
          showWin: v.showWin
      };
  })(new Ext({
      length: 10,
      nbPiles: 4
  }));
  var _nbPiles = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value1.value0.nbPiles;
      })(function (v) {
          return function (x) {
              return new Lib_Game.State(v.value0, new Ext({
                  nbPiles: x,
                  length: v.value1.value0.length
              }));
          };
      })(dictFunctor);
  };
  var _length = function (dictFunctor) {
      return Optic_Lens.lens(function (v) {
          return v.value1.value0.length;
      })(function (v) {
          return function (x) {
              return new Lib_Game.State(v.value0, new Ext({
                  nbPiles: v.value1.value0.nbPiles,
                  length: x
              }));
          };
      })(dictFunctor);
  };
  var nimGame2 = new Lib_Game.TwoPlayersGame(function () {
      return nimGame;
  }, (function () {
      var $63 = Data_Eq.eq(Data_Eq.eqInt)(0);
      var $64 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (t) {
          return Data_Int_Bits.xor((Data_Tuple.snd(t) - Data_Tuple.fst(t) | 0) - 1 | 0);
      })(0);
      var $65 = Optic_Getter.view(Lib_Game["_position"](Data_Const.functorConst));
      return function ($66) {
          return $63($64($65($66)));
      };
  })(), function (state) {
      return Data_Array.sortWith(Data_Ord.ordInt)(function (v) {
          return Data_Function.flip(Data_Maybe.maybe(0))(Data_Array.index(Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst)))(v.value0))(function (x) {
              var $38 = Optic_Getter.weiv(state)(Lib_Game["_turn"](Data_Const.functorConst)) === 0;
              if ($38) {
                  return Data_Tuple.fst(x) - v.value1 | 0;
              };
              return v.value1 - Data_Tuple.snd(x) | 0;
          });
      })(Data_Array.filter(Lib_Game.canPlay(nimGame)(state))(Lib_Core.tabulate2(Optic_Getter.weiv(state)(_nbPiles(Data_Const.functorConst)))(Optic_Getter.weiv(state)(_length(Data_Const.functorConst)))(function (v) {
          return new Move(v.row, v.col);
      })));
  });
  var nimGame = new Lib_Game.Game(function (state) {
      return function (v) {
          return Data_Function.flip(Data_Maybe.maybe(false))(Data_Array.index(Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst)))(v.value0))(function (v1) {
              return v.value1 !== v1.value0 && (v.value1 !== v1.value1 && (function () {
                  var $44 = Optic_Getter.weiv(state)(Lib_Game["_turn"](Data_Const.functorConst)) === 0;
                  if ($44) {
                      return v.value1 < v1.value1;
                  };
                  return v.value1 > v1.value0;
              })());
          });
      };
  }, Lib_Game["computerMove'"](nimGame2), function (state) {
      return Data_Traversable.sequence(Data_Traversable.traversableArray)(Lib_Random.applicativeRandom)(Data_Array.replicate(Optic_Getter.weiv(state)(_nbPiles(Data_Const.functorConst)))(Control_Bind.bind(Lib_Random.bindRandom)(Lib_Random.randomInt(5))(function (v) {
          return Control_Bind.bind(Lib_Random.bindRandom)(Lib_Random.randomInt(5))(function (v1) {
              return Control_Applicative.pure(Lib_Random.applicativeRandom)(new Data_Tuple.Tuple(v, v1 + 5 | 0));
          });
      })));
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return (v.value1 - v.value0 | 0) === 1 && v.value0 === (function () {
              var $52 = Optic_Getter.weiv(state)(Lib_Game["_turn"](Data_Const.functorConst)) === 1;
              if ($52) {
                  return Optic_Getter.weiv(state)(_length(Data_Const.functorConst)) - 2 | 0;
              };
              return 0;
          })();
      })(Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst)));
  }, function (state) {
      return function (v) {
          return Data_Array.modifyAtIndices(Data_Foldable.foldableArray)([ v.value0 ])(function (v1) {
              var $58 = Optic_Getter.weiv(state)(Lib_Game["_turn"](Data_Const.functorConst)) === 0;
              if ($58) {
                  return new Data_Tuple.Tuple(v.value1, v1.value1);
              };
              return new Data_Tuple.Tuple(v1.value0, v.value1);
          })(Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst)));
      };
  });
  var setNbPiles = Lib_Game["newGame'"](nimGame)(Optic_Setter.set(_nbPiles(Data_Identity.functorIdentity)));
  var setLength = Lib_Game["newGame'"](nimGame)(Optic_Setter.set(_length(Data_Identity.functorIdentity)));
  exports["Move"] = Move;
  exports["Ext"] = Ext;
  exports["nimState"] = nimState;
  exports["_length"] = _length;
  exports["_nbPiles"] = _nbPiles;
  exports["setNbPiles"] = setNbPiles;
  exports["setLength"] = setLength;
  exports["nimGame"] = nimGame;
  exports["nimGame2"] = nimGame2;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Pha.Html"] = $PS["Pha.Html"] || {};
  var exports = $PS["Pha.Html"];
  var Pha = $PS["Pha"];                
  var use = function (props) {
      return Pha.h("use")(props)([  ]);
  };
  var svg = Pha.h("svg");
  var style = Pha.Style.create;
  var span = Pha.h("span");
  var rect = function (props) {
      return Pha.h("rect")(props)([  ]);
  };
  var key = Pha.Key.create;
  var h2 = Pha.h("h2");
  var div$prime = Pha.h("div");
  var click = Pha.Event.create("click");
  var class$prime = Pha.Class.create;
  var button = Pha.h("button");
  var br = Pha.h("br")([  ])([  ]);
  var attr = Pha.Attr.create;
  var fill = attr("fill");
  var height = attr("height");
  var href = attr("href");          
  var viewBox = attr("viewBox");
  var width = attr("width");
  var x = attr("x");
  var y = attr("y");
  exports["key"] = key;
  exports["attr"] = attr;
  exports["class'"] = class$prime;
  exports["style"] = style;
  exports["click"] = click;
  exports["br"] = br;
  exports["button"] = button;
  exports["div'"] = div$prime;
  exports["span"] = span;
  exports["h2"] = h2;
  exports["width"] = width;
  exports["height"] = height;
  exports["href"] = href;
  exports["x"] = x;
  exports["y"] = y;
  exports["fill"] = fill;
  exports["viewBox"] = viewBox;
  exports["svg"] = svg;
  exports["rect"] = rect;
  exports["use"] = use;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["UI.Dialog"] = $PS["UI.Dialog"] || {};
  var exports = $PS["UI.Dialog"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];                
  var dialog = function (v) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-absolute ui-flex-center ui-dialog-container")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-head")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-title")(true) ])([ Pha.text(v.title) ]) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-body")(true) ])(children), Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-buttons")(true) ])([ Data_Maybe.maybe(Pha.emptyNode)(function (action) {
              return Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary")(true), Pha_Html.click(action) ])([ Pha.text("Annuler") ]);
          })(v.onCancel), Data_Maybe.maybe(Pha.emptyNode)(function (action) {
              return Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary")(true), Pha_Html.click(action) ])([ Pha.text("Ok") ]);
          })(v.onOk) ]) ]) ]);
      };
  };
  var card = function (title) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-card")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-head ui-flex-center")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-title")(true) ])([ Pha.text(title) ]) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-body")(true) ])(children) ]);
      };
  };
  exports["card"] = card;
  exports["dialog"] = dialog;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["UI.Icon"] = $PS["UI.Icon"] || {};
  var exports = $PS["UI.Icon"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];                
  var IconText = (function () {
      function IconText(value0) {
          this.value0 = value0;
      };
      IconText.create = function (value0) {
          return new IconText(value0);
      };
      return IconText;
  })();
  var IconSymbol = (function () {
      function IconSymbol(value0) {
          this.value0 = value0;
      };
      IconSymbol.create = function (value0) {
          return new IconSymbol(value0);
      };
      return IconSymbol;
  })();
  var IconNone = (function () {
      function IconNone() {

      };
      IconNone.value = new IconNone();
      return IconNone;
  })();
  var icongroup = function (title) {
      return function (children) {
          return Pha_Html["div'"]([  ])([ Pha_Html.h2([  ])([ Pha.text(title) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-icon-grid")(true) ])(children) ]);
      };
  };
  var defaultOptions = {
      icon: IconNone.value,
      selected: false,
      tooltip: Data_Maybe.Nothing.value,
      round: false,
      large: false,
      hidden: false,
      disabled: false
  };
  var iconbutton = function (optionFn) {
      return function (props) {
          var v = optionFn(defaultOptions);
          return Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-icon")(true), Pha_Html["class'"]("selected")(v.selected), Pha_Html["class'"]("round")(v.large), Pha_Html["class'"]("hidden")(v.hidden), Pha_Html["class'"]("disabled")(v.disabled) ])(props))([ (function () {
              if (v.icon instanceof IconSymbol) {
                  return Pha_Html.svg([ Pha_Html.attr("width")("100%"), Pha_Html.attr("heigh")("100%"), Pha_Html["class'"]("ui-icon-symbol")(true) ])([ Pha_Html.use([ Pha_Html.attr("href")(v.icon.value0) ]) ]);
              };
              if (v.icon instanceof IconText) {
                  return Pha_Html.span([ Pha_Html["class'"]("ui-icon-text")(true) ])([ Pha.text(v.icon.value0) ]);
              };
              if (v.icon instanceof IconNone) {
                  return Pha.emptyNode;
              };
              throw new Error("Failed pattern match at UI.Icon (line 41, column 9 - line 49, column 26): " + [ v.icon.constructor.name ]);
          })(), Data_Maybe.maybe(Pha.emptyNode)(function (t) {
              return Pha_Html.span([ Pha_Html["class'"]("ui-icon-tooltip")(true) ])([ Pha.text(t) ]);
          })(v.tooltip) ]);
      };
  };
  exports["IconText"] = IconText;
  exports["IconSymbol"] = IconSymbol;
  exports["IconNone"] = IconNone;
  exports["defaultOptions"] = defaultOptions;
  exports["iconbutton"] = iconbutton;
  exports["icongroup"] = icongroup;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["UI.Icons"] = $PS["UI.Icons"] || {};
  var exports = $PS["UI.Icons"];
  var Data_Array = $PS["Data.Array"];
  var Data_Const = $PS["Data.Const"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Lib_Game = $PS["Lib.Game"];
  var Optic_Getter = $PS["Optic.Getter"];
  var Optic_Setter = $PS["Optic.Setter"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];                
  var winPanel = function (state) {
      return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-absolute component-win-container")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("component-win")(true), Pha_Html["class'"]("visible")(Optic_Getter.weiv(state)(Lib_Game["_showWin"](Data_Const.functorConst))) ])([ Pha.text("GAGN\xc9") ]) ]);
  };
  var iconbutton = function (dictGame) {
      return function (state) {
          return function (optionFn) {
              return function (props) {
                  return UI_Icon.iconbutton(optionFn)(props);
              };
          };
      };
  };
  var icons2Players = function (dictGame) {
      return function (lens) {
          return function (state) {
              return UI_Icon.icongroup("Mode de jeu")([ iconbutton(dictGame)(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#school"),
                      selected: Data_Eq.eq(Lib_Game.eqMode)(Optic_Getter.weiv(state)(Lib_Game["_mode"](Data_Const.functorConst)))(Lib_Game.RandomMode.value),
                      tooltip: new Data_Maybe.Just("IA mode facile"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled
                  };
              })([ Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                  return lens(dictFunctor);
              })(Pha.action(Optic_Setter.set(Lib_Game["_mode"](Data_Identity.functorIdentity))(Lib_Game.RandomMode.value)))) ]), iconbutton(dictGame)(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#enstein"),
                      selected: Data_Eq.eq(Lib_Game.eqMode)(Optic_Getter.weiv(state)(Lib_Game["_mode"](Data_Const.functorConst)))(Lib_Game.ExpertMode.value),
                      tooltip: new Data_Maybe.Just("IA mode expert"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled
                  };
              })([ Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                  return lens(dictFunctor);
              })(Pha.action(Optic_Setter.set(Lib_Game["_mode"](Data_Identity.functorIdentity))(Lib_Game.ExpertMode.value)))) ]), iconbutton(dictGame)(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#duel"),
                      selected: Data_Eq.eq(Lib_Game.eqMode)(Optic_Getter.weiv(state)(Lib_Game["_mode"](Data_Const.functorConst)))(Lib_Game.DuelMode.value),
                      tooltip: new Data_Maybe.Just("Affronte un autre joueur"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled
                  };
              })([ Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                  return lens(dictFunctor);
              })(Pha.action(Optic_Setter.set(Lib_Game["_mode"](Data_Identity.functorIdentity))(Lib_Game.DuelMode.value)))) ]) ]);
          };
      };
  };
  var iredo = function (dictGame) {
      return function (lens) {
          return function (state) {
              return iconbutton(dictGame)(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#undo"),
                      selected: v.selected,
                      tooltip: v.tooltip,
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: Data_Array["null"](Optic_Getter.weiv(state)(Lib_Game["_history"](Data_Const.functorConst)))
                  };
              })([ Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                  return lens(dictFunctor);
              })(Pha.action(Lib_Game.redo))), Pha_Html.style("transform")("scaleX(-1)") ]);
          };
      };
  };
  var ireset = function (dictGame) {
      return function (lens) {
          return function (state) {
              return iconbutton(dictGame)(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#reset"),
                      selected: v.selected,
                      tooltip: v.tooltip,
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: Data_Array["null"](Optic_Getter.weiv(state)(Lib_Game["_history"](Data_Const.functorConst)))
                  };
              })([ Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                  return lens(dictFunctor);
              })(Pha.action(Lib_Game.reset))) ]);
          };
      };
  };
  var irules = function (dictGame) {
      return function (lens) {
          return function (state) {
              var selected = (function () {
                  var v = Optic_Getter.weiv(state)(Lib_Game["_dialog"](Data_Const.functorConst));
                  if (v instanceof Lib_Game.Rules) {
                      return true;
                  };
                  return false;
              })();
              return iconbutton(dictGame)(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#rules"),
                      selected: selected,
                      tooltip: v.tooltip,
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled
                  };
              })([ Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                  return lens(dictFunctor);
              })(Pha.action(Optic_Setter.set(Lib_Game["_dialog"](Data_Identity.functorIdentity))(Lib_Game.Rules.value)))) ]);
          };
      };
  };
  var iundo = function (dictGame) {
      return function (lens) {
          return function (state) {
              return iconbutton(dictGame)(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#undo"),
                      selected: v.selected,
                      tooltip: v.tooltip,
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: Data_Array["null"](Optic_Getter.weiv(state)(Lib_Game["_history"](Data_Const.functorConst)))
                  };
              })([ Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                  return lens(dictFunctor);
              })(Pha.action(Lib_Game.undo))) ]);
          };
      };
  };
  exports["iconbutton"] = iconbutton;
  exports["iundo"] = iundo;
  exports["iredo"] = iredo;
  exports["ireset"] = ireset;
  exports["irules"] = irules;
  exports["icons2Players"] = icons2Players;
  exports["winPanel"] = winPanel;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["UI.Template"] = $PS["UI.Template"] || {};
  var exports = $PS["UI.Template"];
  var Data_Const = $PS["Data.Const"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Lib_Game = $PS["Lib.Game"];
  var Optic_Getter = $PS["Optic.Getter"];
  var Optic_Setter = $PS["Optic.Setter"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Dialog = $PS["UI.Dialog"];
  var UI_Icons = $PS["UI.Icons"];                
  var template = function (dictGame) {
      return function (lens) {
          return function (elements) {
              return function (state) {
                  var dialog$prime = function (v) {
                      if (v instanceof Lib_Game.Rules) {
                          return UI_Dialog.dialog({
                              title: "R\xe8gles du jeu",
                              onCancel: Data_Maybe.Nothing.value,
                              onOk: new Data_Maybe.Just(Lib_Game["_lensaction"](Lib_Game.lensaction1)(function (dictFunctor) {
                                  return lens(dictFunctor);
                              })(Optic_Setter.set(Lib_Game["_dialog"](Data_Identity.functorIdentity))(Lib_Game.NoDialog.value)))
                          })(elements.rules);
                      };
                      if (v instanceof Lib_Game.ConfirmNewGame) {
                          return UI_Dialog.dialog({
                              title: "Nouvelle partie",
                              onCancel: new Data_Maybe.Just(Lib_Game["_lensaction"](Lib_Game.lensaction1)(function (dictFunctor) {
                                  return lens(dictFunctor);
                              })(Optic_Setter.set(Lib_Game["_dialog"](Data_Identity.functorIdentity))(Lib_Game.NoDialog.value))),
                              onOk: new Data_Maybe.Just(Lib_Game["_lensaction"](Lib_Game.lensaction1)(function (dictFunctor) {
                                  return lens(dictFunctor);
                              })(Lib_Game.confirmNewGame(v.value0)))
                          })([ Pha.text("blah blah blah blah") ]);
                      };
                      return Pha.emptyNode;
                  };
                  return Pha_Html["div'"]([  ])([ Pha_Html["div'"]([ Pha_Html["class'"]("main-container")(true) ])([ Pha_Html["div'"]([  ])([ elements.board, UI_Icons.winPanel(state) ]), elements.config ]), dialog$prime(Optic_Getter.weiv(state)(Lib_Game["_dialog"](Data_Const.functorConst))) ]);
              };
          };
      };
  };
  exports["template"] = template;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Game.Nim.View"] = $PS["Game.Nim.View"] || {};
  var exports = $PS["Game.Nim.View"];
  var Data_Array = $PS["Data.Array"];
  var Data_Const = $PS["Data.Const"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Lib_Core = $PS["Lib.Core"];
  var Lib_Game = $PS["Lib.Game"];
  var Optic_Getter = $PS["Optic.Getter"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Dialog = $PS["UI.Dialog"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var translate = function (x) {
      return function (y) {
          return "translate(" + (Data_Show.show(Data_Show.showInt)(x) + ("px," + (Data_Show.show(Data_Show.showInt)(y) + "px)")));
      };
  };
  var view = function (lens) {
      return function (state) {
          var nbPiles = Optic_Getter.weiv(state)(Game_Nim_Model["_nbPiles"](Data_Const.functorConst));
          var length = Optic_Getter.weiv(state)(Game_Nim_Model["_length"](Data_Const.functorConst));
          var elements = {
              config: UI_Dialog.card("Poker Nim")([ UI_Icon.icongroup("Nombre de rang\xe9es")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ 1, 2, 3, 4, 5 ])(function (i) {
                  return UI_Icons.iconbutton(Game_Nim_Model.nimGame)(state)(function (v) {
                      return {
                          icon: UI_Icon.IconText.create(Data_Show.show(Data_Show.showInt)(i)),
                          selected: nbPiles === i,
                          tooltip: v.tooltip,
                          round: v.round,
                          large: v.large,
                          hidden: v.hidden,
                          disabled: v.disabled
                      };
                  })([ Pha_Html.click(Lib_Game["_lensaction"](Lib_Game.lensactionrnd)(function (dictFunctor) {
                      return lens(dictFunctor);
                  })(Game_Nim_Model.setNbPiles(i))) ]);
              })), UI_Icon.icongroup("Taille des rang\xe9es")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ 10, 5 ])(function (i) {
                  return UI_Icons.iconbutton(Game_Nim_Model.nimGame)(state)(function (v) {
                      return {
                          icon: UI_Icon.IconText.create(Data_Show.show(Data_Show.showInt)(i)),
                          selected: length === i,
                          tooltip: v.tooltip,
                          round: v.round,
                          large: v.large,
                          hidden: v.hidden,
                          disabled: v.disabled
                      };
                  })([ Pha_Html.click(Lib_Game["_lensaction"](Lib_Game.lensactionrnd)(function (dictFunctor) {
                      return lens(dictFunctor);
                  })(Game_Nim_Model.setLength(i))) ]);
              })), UI_Icons.icons2Players(Game_Nim_Model.nimGame)(function (dictFunctor) {
                  return lens(dictFunctor);
              })(state), UI_Icon.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo(Game_Nim_Model.nimGame), UI_Icons.iredo(Game_Nim_Model.nimGame), UI_Icons.ireset(Game_Nim_Model.nimGame), UI_Icons.irules(Game_Nim_Model.nimGame) ])(function (x) {
                  return x(function (dictFunctor) {
                      return lens(dictFunctor);
                  })(state);
              })) ]),
              board: Pha_Html["div'"]([ Pha_Html["class'"]("ui-board nim-board")(true) ])([ Pha_Html.svg([ Pha_Html.viewBox("0 0 100 100"), Pha_Html.height("100%"), Pha_Html.width("100%") ])(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
                  return function (pile) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.rect([ Pha_Html.key("pile" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html.x((function () {
                          var $8 = length === 5;
                          if ($8) {
                              return "25";
                          };
                          return "0";
                      })()), Pha_Html.y(Data_Show.show(Data_Show.showInt)(7 + (20 * i | 0) | 0)), Pha_Html.height("10"), Pha_Html.width((function () {
                          var $9 = length === 5;
                          if ($9) {
                              return "50";
                          };
                          return "100";
                      })()), Pha_Html.fill("snow") ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Core.tabulate(length)(function (j) {
                          return Pha_Html.rect([ Pha_Html.key("base-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(j)))), Pha_Html.width("5"), Pha_Html.height("5"), Pha_Html.x("-2.5"), Pha_Html.y("-2.5"), Pha_Html.fill("gray"), Pha_Html.click(Pha.lensAction(function (dictFunctor) {
                              return lens(dictFunctor);
                          })(Lib_Game["playA"](Game_Nim_Model.nimGame)(new Game_Nim_Model.Move(i, j)))), Pha_Html.style("transform")(translate((function () {
                              var $10 = length === 5;
                              if ($10) {
                                  return 30;
                              };
                              return 5;
                          })() + (10 * j | 0) | 0)(12 + (20 * i | 0) | 0) + " rotate(45deg)"), Pha_Html.style("cursor")((function () {
                              var $11 = Lib_Game.canPlay(Game_Nim_Model.nimGame)(state)(new Game_Nim_Model.Move(i, j));
                              if ($11) {
                                  return "pointer";
                              };
                              return "not-allowed";
                          })()) ]);
                      }))(Data_Array.mapWithIndex(function (j) {
                          return function (peg) {
                              return Pha_Html.use([ Pha_Html.key("p-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(j)))), Pha_Html.href("#meeple"), Pha_Html.width("8"), Pha_Html.height("8"), Pha_Html["class'"]("nim-player")(true), Pha_Html.fill((function () {
                                  var $12 = j === 0;
                                  if ($12) {
                                      return "blue";
                                  };
                                  return "red";
                              })()), Pha_Html.style("transform")(translate((function () {
                                  var $13 = length === 5;
                                  if ($13) {
                                      return 26;
                                  };
                                  return 1;
                              })() + (10 * peg | 0) | 0)(8 + (20 * i | 0) | 0)) ]);
                          };
                      })([ Data_Tuple.fst(pile), Data_Tuple.snd(pile) ])));
                  };
              })(Optic_Getter.weiv(state)(Lib_Game["_position"](Data_Const.functorConst))))), Pha_Html.span([ Pha_Html["class'"]("nim-turn-message")(true) ])([ Pha.text((function () {
                  var $14 = Lib_Game.isLevelFinished(Game_Nim_Model.nimGame)(state);
                  if ($14) {
                      return "Partie finie";
                  };
                  var $15 = Optic_Getter.weiv(state)(Lib_Game["_turn"](Data_Const.functorConst)) === 0;
                  if ($15) {
                      return "Tour du joueur bleu";
                  };
                  return "Tour du second rouge";
              })()) ]) ]),
              rules: [ Pha.text("Essaie de bloquer ton adversaire"), Pha_Html.br, Pha.text("A chaque tour, tu peux d\xe9placer un de tes jetons vers la gauche ou vers la droite"), Pha_Html.br, Pha.text("d'autant de cases que tu veux mais tu ne peux pas sauter par dessus le jeton adversaire."), Pha_Html.br, Pha.text("Tu es oblig\xe9 de d\xe9placer un jeton d'au moins une case, tu ne peux pas passer ton tour."), Pha_Html.br, Pha.text("Tu gagnes la partie si ton adversaire n'a aucun mouvement possible.") ]
          };
          return UI_Template.template(Game_Nim_Model.nimGame)(function (dictFunctor) {
              return lens(dictFunctor);
          })(elements)(state);
      };
  };
  exports["translate"] = translate;
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Game_Nim_View = $PS["Game.Nim.View"];
  var Lib_Game = $PS["Lib.Game"];
  var Lib_Random = $PS["Lib.Random"];
  var Optic_Lens = $PS["Optic.Lens"];
  var Pha = $PS["Pha"];                
  var mylens = function (dictFunctor) {
      return Optic_Lens.lens(function (r) {
          return r.nim;
      })(function (r) {
          return function (x) {
              return {
                  nim: x,
                  baseball: r.baseball
              };
          };
      })(dictFunctor);
  };
  var main = function __do() {
      var v = Lib_Random.runRnd(Lib_Game.init(Game_Baseball_Model.baseballGame)(Game_Baseball_Model.example))();
      var v1 = Lib_Random.runRnd(Lib_Game.init(Game_Nim_Model.nimGame)(Game_Nim_Model.nimState))();
      var state = {
          baseball: v,
          nim: v1
      };
      return Pha.app({
          init: state,
          view: function (st) {
              return Game_Nim_View.view(function (dictFunctor) {
                  return mylens(dictFunctor);
              })(st.nim);
          },
          node: "root"
      })();
  };
  exports["mylens"] = mylens;
  exports["main"] = main;
})(PS);
PS["Main"].main();