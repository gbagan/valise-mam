// Generated by purs bundle 0.13.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];          
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (i) {
        return function (xs) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];                    
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var unsafeThaw = (function () {
      var $11 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
      return function ($12) {
          return $11($12);
      };
  })();
  var unsafeFreeze = (function () {
      var $13 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
      return function ($14) {
          return $13($14);
      };
  })();
  var thaw = $foreign.copyImpl;
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var v = thaw(xs)();
              var v1 = f(v)();
              return unsafeFreeze(v)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };                                                                           
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modify = function (i) {
      return function (f) {
          return function (xs) {
              return function __do() {
                  var v = peek(i)(xs)();
                  if (v instanceof Data_Maybe.Just) {
                      return $foreign.poke(i)(f(v.value0))(xs)();
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return false;
                  };
                  throw new Error("Failed pattern match at Data.Array.ST (line 195, column 3 - line 197, column 26): " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["withArray"] = withArray;
  exports["modify"] = modify;
  exports["push"] = push;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
  exports["all"] = all;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Functor = $PS["Data.Functor"];                  
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAtIndices = function (dictFoldable) {
      return function (us) {
          return function (xs) {
              return Data_Array_ST.withArray(function (res) {
                  return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                      return Data_Array_ST.poke(v.value0)(v.value1)(res);
                  })(us);
              })(xs)();
          };
      };
  };
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var takeEnd = function (n) {
      return function (xs) {
          return $foreign.drop($foreign.length(xs) - n | 0)(xs);
      };
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var modifyAtIndices = function (dictFoldable) {
      return function (is) {
          return function (f) {
              return function (xs) {
                  return Data_Array_ST.withArray(function (res) {
                      return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                          return Data_Array_ST.modify(i)(f)(res);
                      })(is);
                  })(xs)();
              };
          };
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var v1 = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v2) {
                      return function __do() {
                          var v3 = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $116 = (function (dictPartial) {
                                  var $118 = Data_Maybe.fromJust();
                                  return function ($119) {
                                      return $118(last($119));
                                  };
                              })();
                              return function ($117) {
                                  return Data_Tuple.snd($116($117));
                              };
                          })())(Data_Array_ST.unsafeFreeze(v1))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(v3)(v2.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v2)(v1)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(v1)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $123 = Data_Maybe.maybe([  ])(singleton);
          return function ($124) {
              return $123(f($124));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["updateAtIndices"] = updateAtIndices;
  exports["modifyAt"] = modifyAt;
  exports["modifyAtIndices"] = modifyAtIndices;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sortWith"] = sortWith;
  exports["takeEnd"] = takeEnd;
  exports["nub"] = nub;
  exports["zip"] = zip;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var init = adaptMaybe(Data_Array.init);
  var last = adaptMaybe(Data_Array.last);
  var tail = adaptMaybe(Data_Array.tail);    
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeIndex = function (dictPartial) {
      return adaptAny(Data_Array.unsafeIndex());
  };
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["length"] = length;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["unsafeIndex"] = unsafeIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["functorEither"] = functorEither;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";            

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  exports["floor"] = floor;
  exports["even"] = even;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Int.Bits"] = $PS["Data.Int.Bits"] || {};
  var exports = $PS["Data.Int.Bits"];
  var $foreign = $PS["Data.Int.Bits"];
  exports["xor"] = $foreign.xor;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["Strong"] = Strong;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  exports["newtypeForget"] = newtypeForget;
  exports["strongForget"] = strongForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Internal.Wander"] = $PS["Data.Lens.Internal.Wander"] || {};
  var exports = $PS["Data.Lens.Internal.Wander"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  };
  var wanderFunction = new Wander(function () {
      return Data_Profunctor_Choice.choiceFn;
  }, function () {
      return Data_Profunctor_Strong.strongFn;
  }, function (t) {
      return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
  });
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["wanderFunction"] = wanderFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var Index = function (ix) {
      this.ix = ix;
  };
  var ix = function (dict) {
      return dict.ix;
  }; 
  var indexArray = new Index(function (n) {
      return function (dictWander) {
          return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return function (coalg) {
                  return function (xs) {
                      return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(xs))((function () {
                          var $31 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (x) {
                              return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(n)(x)(xs));
                          });
                          return function ($32) {
                              return $31(coalg($32));
                          };
                      })())(Data_Array.index(xs)(n));
                  };
              };
          });
      };
  });
  exports["ix"] = ix;
  exports["indexArray"] = indexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Data_Function = $PS["Data.Function"];          
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                         
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
})(PS);
(function(exports) {
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };                                 
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  exports["launchAff"] = launchAff;
  exports["forkAff"] = forkAff;
  exports["delay"] = delay;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadEffectAff"] = monadEffectAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game"] = $PS["Game"] || {};
  var exports = $PS["Game"];
  var CGame = function (init, onKeyDown, view) {
      this.init = init;
      this.onKeyDown = onKeyDown;
      this.view = view;
  };
  var view = function (dict) {
      return dict.view;
  };
  var onKeyDown = function (dict) {
      return dict.onKeyDown;
  };
  var init = function (dict) {
      return dict.init;
  };
  exports["init"] = init;
  exports["onKeyDown"] = onKeyDown;
  exports["view"] = view;
  exports["CGame"] = CGame;
})(PS);
(function(exports) {
  exports.genSeed = Math.random;
})(PS["Lib.Random"] = PS["Lib.Random"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Lib.Util"] = $PS["Lib.Util"] || {};
  var exports = $PS["Lib.Util"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                
  var swap = function (i) {
      return function (j) {
          return function (array) {
              return Data_Maybe.fromMaybe(array)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(i))(function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(array)(j))(function (v1) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.updateAt(i)(v1)(array))(Data_Array.updateAt(j)(v));
                  });
              }));
          };
      };
  };
  var range$prime = function (n) {
      return function (m) {
          var $6 = n > m;
          if ($6) {
              return [  ];
          };
          return Data_Array.range(n)(m);
      };
  };
  var tabulate = function (v) {
      return function (v1) {
          if (v === 0) {
              return [  ];
          };
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(range$prime(0)(v - 1 | 0))(v1);
      };
  };
  var rangeStep = function (begin) {
      return function (end) {
          return function (step) {
              return tabulate(Data_Ord.max(Data_Ord.ordInt)(0)(1 + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(end - begin | 0)(step) | 0))(function (i) {
                  return begin + (i * step | 0) | 0;
              });
          };
      };
  };
  var tabulate2 = function (n) {
      return function (m) {
          return function (f) {
              return tabulate(n * m | 0)(function (i) {
                  return f(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(m))(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(m));
              });
          };
      };
  };
  var pairwise = function (list) {
      return Data_Maybe.maybe([  ])(Data_Array.zip(list))(Data_Array.tail(list));
  };
  var map3 = function (t1) {
      return function (t2) {
          return function (t3) {
              return function (fn) {
                  return Data_Array.zipWith(Data_Function.apply)(Data_Array.zipWith(Data_Function.apply)(Data_Array.mapWithIndex(fn)(t1))(t2))(t3);
              };
          };
      };
  };
  var map2 = function (t1) {
      return function (t2) {
          return function (fn) {
              return Data_Array.zipWith(Data_Function.apply)(Data_Array.mapWithIndex(fn)(t1))(t2);
          };
      };
  };
  var floatRange = function (begin) {
      return function (end) {
          return function (step) {
              return tabulate(Data_Ord.max(Data_Ord.ordInt)(0)(Data_Int.floor(1.0 + (end - begin) / step)))(function (i) {
                  return begin + Data_Int.toNumber(i) * step;
              });
          };
      };
  };
  var coords = function (cols) {
      return function (i) {
          return {
              row: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(cols),
              col: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(cols)
          };
      };
  };
  var dCoords = function (cols) {
      return function (x) {
          return function (y) {
              var q = coords(cols)(y);
              var p = coords(cols)(x);
              return {
                  row: p.row - q.row | 0,
                  col: p.col - q.col | 0
              };
          };
      };
  };
  exports["range'"] = range$prime;
  exports["tabulate"] = tabulate;
  exports["tabulate2"] = tabulate2;
  exports["map2"] = map2;
  exports["map3"] = map3;
  exports["rangeStep"] = rangeStep;
  exports["floatRange"] = floatRange;
  exports["pairwise"] = pairwise;
  exports["swap"] = swap;
  exports["coords"] = coords;
  exports["dCoords"] = dCoords;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Lib.Random"] = $PS["Lib.Random"] || {};
  var exports = $PS["Lib.Random"];
  var $foreign = $PS["Lib.Random"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];                
  var Seed = function (x) {
      return x;
  };
  var Random = function (x) {
      return x;
  };
  var runRnd = function (v) {
      return function __do() {
          var v1 = $foreign.genSeed();
          return Data_Tuple.fst(v(v1));
      };
  };
  var nextSeed = function (v) {
      return Seed(($$Math.sin(v * 2819921.0) + 1.0) / 2.0);
  };
  var intFromSeed = function (v) {
      return function (max) {
          return Data_Int.floor(v * Data_Int.toNumber(max));
      };
  };
  var randomInt = function (n) {
      return function (seed) {
          return new Data_Tuple.Tuple(intFromSeed(seed)(n), nextSeed(seed));
      };
  };
  var functorRandom = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function (seed) {
              var v1 = v(seed);
              return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
          };
      };
  });
  var randomBool = Data_Functor.mapFlipped(functorRandom)(randomInt(2))(Data_Eq.eq(Data_Eq.eqInt)(0));
  var randomPick = function (t) {
      return Data_Functor.map(functorRandom)(Data_Array_NonEmpty.unsafeIndex()(t))(randomInt(Data_Array_NonEmpty.length(t)));
  };
  var monadRandom = new Control_Monad.Monad(function () {
      return applicativeRandom;
  }, function () {
      return bindRandom;
  });
  var bindRandom = new Control_Bind.Bind(function () {
      return applyRandom;
  }, function (v) {
      return function (f) {
          return function (seed) {
              var v1 = v(seed);
              var v2 = f(v1.value0);
              return v2(v1.value1);
          };
      };
  });
  var applyRandom = new Control_Apply.Apply(function () {
      return functorRandom;
  }, Control_Monad.ap(monadRandom));
  var applicativeRandom = new Control_Applicative.Applicative(function () {
      return applyRandom;
  }, function (x) {
      return Random(Data_Tuple.Tuple.create(x));
  });
  var shuffle = function (array) {
      var n = Data_Array.length(array);
      return Control_Bind.bind(bindRandom)(Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeRandom)(Lib_Util.tabulate(n - 1 | 0)(function (x) {
          return randomInt(n - x | 0);
      })))(function (v) {
          return Control_Applicative.pure(applicativeRandom)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(Lib_Util.swap))(array)(Data_Array.mapWithIndex(function (i) {
              return function (j) {
                  return new Data_Tuple.Tuple(i, i + j | 0);
              };
          })(v)));
      });
  };
  exports["randomInt"] = randomInt;
  exports["randomBool"] = randomBool;
  exports["shuffle"] = shuffle;
  exports["randomPick"] = randomPick;
  exports["runRnd"] = runRnd;
  exports["functorRandom"] = functorRandom;
  exports["applicativeRandom"] = applicativeRandom;
  exports["bindRandom"] = bindRandom;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha.Action"] = $PS["Pha.Action"] || {};
  var exports = $PS["Pha.Action"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Lib_Random = $PS["Lib.Random"];                
  var Action = function (x) {
      return x;
  };
  var withPayload$prime = function (act) {
      return function (payloadFn) {
          return function (dispatch) {
              return function (e) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(payloadFn(e)))(function (v) {
                      var v1 = act(v);
                      return v1(dispatch)(e);
                  });
              };
          };
      };
  };
  var withPayload = function (act) {
      return function (payloadFn) {
          return function (dispatch) {
              return function (e) {
                  var v = act(payloadFn(e));
                  return v(dispatch)(e);
              };
          };
      };
  };
  var semigroupAction = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (dispatch) {
              return function (e) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(v(dispatch)(e))(function (v2) {
                      return v1(dispatch)(e);
                  });
              };
          };
      };
  });
  var semigroupMonoid = new Data_Monoid.Monoid(function () {
      return semigroupAction;
  }, function (dispatch) {
      return function (ev) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(Control_Category.identity(Control_Category.categoryFn)));
      };
  });
  var randomAction = function (fn) {
      return Action(function (dispatch) {
          return function (ev) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                  var v = dispatch(Control_Category.identity(Control_Category.categoryFn))();
                  var v1 = Lib_Random.runRnd(fn(v))();
                  return dispatch(Data_Function["const"](v1))();
              });
          };
      });
  };
  var onlyEffectAction = function (eff) {
      return function (dispatch) {
          return function (e) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(eff(e)))(function () {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(Control_Category.identity(Control_Category.categoryFn)));
              });
          };
      };
  };
  var lensAction = function (lens) {
      return function (v) {
          return function (dispatch) {
              return function (ev) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(v(function (fn) {
                      return Data_Functor.mapFlipped(Effect.functorEffect)(dispatch(Data_Lens_Setter.over(lens(Data_Profunctor_Strong.strongFn))(fn)))(Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget)));
                  })(ev))(function (v1) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(Control_Category.identity(Control_Category.categoryFn))))(function (v2) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(v1)(v2));
                      });
                  });
              };
          };
      };
  };
  var ifThenElseA = function (cond) {
      return function (v) {
          return function (v1) {
              return Action(function (dispatch) {
                  return function (ev) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(Control_Category.identity(Control_Category.categoryFn))))(function (v2) {
                          return (function () {
                              var $31 = cond(v2)(ev);
                              if ($31) {
                                  return v;
                              };
                              return v1;
                          })()(dispatch)(ev);
                      });
                  };
              });
          };
      };
  };
  var asyncAction = function (act) {
      return function (dispatch) {
          return function (e) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(Control_Category.identity(Control_Category.categoryFn))))(function (v) {
                  return act({
                      getState: Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(Control_Category.identity(Control_Category.categoryFn))),
                      setState: function (x) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(Data_Function["const"](x)));
                      },
                      updateState: function (fn) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(fn));
                      },
                      dispatch: function (v1) {
                          return v1(dispatch)(e);
                      }
                  })(v);
              });
          };
      };
  };
  var action = function (fn) {
      return Action(function (dispatch) {
          return function (e) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(dispatch(fn));
          };
      });
  };
  exports["action"] = action;
  exports["randomAction"] = randomAction;
  exports["asyncAction"] = asyncAction;
  exports["lensAction"] = lensAction;
  exports["ifThenElseA"] = ifThenElseA;
  exports["withPayload"] = withPayload;
  exports["withPayload'"] = withPayload$prime;
  exports["onlyEffectAction"] = onlyEffectAction;
  exports["semigroupAction"] = semigroupAction;
  exports["semigroupMonoid"] = semigroupMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Core"] = $PS["Game.Core"] || {};
  var exports = $PS["Game.Core"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Lib_Random = $PS["Lib.Random"];
  var Pha_Action = $PS["Pha.Action"];                
  var SizeLimit = (function () {
      function SizeLimit(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      SizeLimit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new SizeLimit(value0, value1, value2, value3);
                  };
              };
          };
      };
      return SizeLimit;
  })();
  var SoloMode = (function () {
      function SoloMode() {

      };
      SoloMode.value = new SoloMode();
      return SoloMode;
  })();
  var RandomMode = (function () {
      function RandomMode() {

      };
      RandomMode.value = new RandomMode();
      return RandomMode;
  })();
  var ExpertMode = (function () {
      function ExpertMode() {

      };
      ExpertMode.value = new ExpertMode();
      return ExpertMode;
  })();
  var DuelMode = (function () {
      function DuelMode() {

      };
      DuelMode.value = new DuelMode();
      return DuelMode;
  })();
  var Rules = (function () {
      function Rules() {

      };
      Rules.value = new Rules();
      return Rules;
  })();
  var NoDialog = (function () {
      function NoDialog() {

      };
      NoDialog.value = new NoDialog();
      return NoDialog;
  })();
  var ConfirmNewGame = (function () {
      function ConfirmNewGame(value0) {
          this.value0 = value0;
      };
      ConfirmNewGame.create = function (value0) {
          return new ConfirmNewGame(value0);
      };
      return ConfirmNewGame;
  })();
  var State = (function () {
      function State(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      State.create = function (value0) {
          return function (value1) {
              return new State(value0, value1);
          };
      };
      return State;
  })();
  var Game = function (canPlay, computerMove, initialPosition, isLevelFinished, onNewGame, play, sizeLimit) {
      this.canPlay = canPlay;
      this.computerMove = computerMove;
      this.initialPosition = initialPosition;
      this.isLevelFinished = isLevelFinished;
      this.onNewGame = onNewGame;
      this.play = play;
      this.sizeLimit = sizeLimit;
  };
  var TwoPlayersGame = function (Game0, isLosingPosition, possibleMoves) {
      this.Game0 = Game0;
      this.isLosingPosition = isLosingPosition;
      this.possibleMoves = possibleMoves;
  };
  var sizeLimit = function (dict) {
      return dict.sizeLimit;
  };
  var possibleMoves = function (dict) {
      return dict.possibleMoves;
  };
  var play = function (dict) {
      return dict.play;
  };
  var onNewGame = function (dict) {
      return dict.onNewGame;
  };
  var isLosingPosition = function (dict) {
      return dict.isLosingPosition;
  };
  var isLevelFinished = function (dict) {
      return dict.isLevelFinished;
  };
  var initialPosition = function (dict) {
      return dict.initialPosition;
  };
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SoloMode && y instanceof SoloMode) {
              return true;
          };
          if (x instanceof RandomMode && y instanceof RandomMode) {
              return true;
          };
          if (x instanceof ExpertMode && y instanceof ExpertMode) {
              return true;
          };
          if (x instanceof DuelMode && y instanceof DuelMode) {
              return true;
          };
          return false;
      };
  });
  var defaultSizeLimit = function (v) {
      return new SizeLimit(0, 0, 0, 0);
  };
  var defaultOnNewGame = Control_Applicative.pure(Lib_Random.applicativeRandom);
  var defaultCoreState = function (p) {
      return {
          position: p,
          history: [  ],
          redoHistory: [  ],
          dialog: Rules.value,
          turn: 0,
          nbRows: 0,
          nbColumns: 0,
          customSize: false,
          help: false,
          mode: SoloMode.value,
          locked: false,
          showWin: false,
          pointer: Data_Maybe.Nothing.value
      };
  };
  var genState = function (p) {
      return function (f) {
          return function (ext) {
              return new State(f(defaultCoreState(p)), ext);
          };
      };
  };
  var computerMove = function (dict) {
      return dict.computerMove;
  };
  var canPlay = function (dict) {
      return dict.canPlay;
  };
  var _core = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value0;
      })(function (v) {
          return function (x) {
              return new State(x, v.value1);
          };
      })(dictStrong);
  };
  var _customSize = function (dictStrong) {
      var $144 = _core(dictStrong);
      var $145 = Data_Lens_Lens.lens(function (v) {
          return v.customSize;
      })(function (v) {
          return function (v1) {
              return {
                  customSize: v1,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($146) {
          return $144($145($146));
      };
  };
  var _dialog = function (dictStrong) {
      var $147 = _core(dictStrong);
      var $148 = Data_Lens_Lens.lens(function (v) {
          return v.dialog;
      })(function (v) {
          return function (v1) {
              return {
                  dialog: v1,
                  customSize: v.customSize,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($149) {
          return $147($148($149));
      };
  };
  var confirmNewGameA = function (st) {
      return Pha_Action.action(function (v) {
          return Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(NoDialog.value)(st);
      });
  };
  var _help = function (dictStrong) {
      var $150 = _core(dictStrong);
      var $151 = Data_Lens_Lens.lens(function (v) {
          return v.help;
      })(function (v) {
          return function (v1) {
              return {
                  help: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($152) {
          return $150($151($152));
      };
  };
  var toggleHelpA = Pha_Action.action(Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
  var _history = function (dictStrong) {
      var $153 = _core(dictStrong);
      var $154 = Data_Lens_Lens.lens(function (v) {
          return v.history;
      })(function (v) {
          return function (v1) {
              return {
                  history: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($155) {
          return $153($154($155));
      };
  };
  var _locked = function (dictStrong) {
      var $156 = _core(dictStrong);
      var $157 = Data_Lens_Lens.lens(function (v) {
          return v.locked;
      })(function (v) {
          return function (v1) {
              return {
                  locked: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($158) {
          return $156($157($158));
      };
  };
  var lockAction = function (act) {
      return Pha_Action.asyncAction(function (v) {
          return function (state) {
              var $101 = Data_Lens_Getter.viewOn(state)(_locked(Data_Lens_Internal_Forget.strongForget));
              if ($101) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(state);
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(true)))(function (v1) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(v.dispatch(act))(function (v2) {
                      return v.updateState(Data_Lens_Setter.set(_locked(Data_Profunctor_Strong.strongFn))(false));
                  });
              });
          };
      });
  };
  var _mode = function (dictStrong) {
      var $159 = _core(dictStrong);
      var $160 = Data_Lens_Lens.lens(function (v) {
          return v.mode;
      })(function (v) {
          return function (v1) {
              return {
                  mode: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($161) {
          return $159($160($161));
      };
  };
  var _nbColumns = function (dictStrong) {
      var $162 = _core(dictStrong);
      var $163 = Data_Lens_Lens.lens(function (v) {
          return v.nbColumns;
      })(function (v) {
          return function (v1) {
              return {
                  nbColumns: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($164) {
          return $162($163($164));
      };
  };
  var _nbRows = function (dictStrong) {
      var $165 = _core(dictStrong);
      var $166 = Data_Lens_Lens.lens(function (v) {
          return v.nbRows;
      })(function (v) {
          return function (v1) {
              return {
                  nbRows: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($167) {
          return $165($166($167));
      };
  };
  var _pointer = function (dictStrong) {
      var $168 = _core(dictStrong);
      var $169 = Data_Lens_Lens.lens(function (v) {
          return v.pointer;
      })(function (v) {
          return function (v1) {
              return {
                  pointer: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($170) {
          return $168($169($170));
      };
  };
  var _position = function (dictStrong) {
      var $171 = _core(dictStrong);
      var $172 = Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (v1) {
              return {
                  position: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($173) {
          return $171($172($173));
      };
  };
  var _redoHistory = function (dictStrong) {
      var $174 = _core(dictStrong);
      var $175 = Data_Lens_Lens.lens(function (v) {
          return v.redoHistory;
      })(function (v) {
          return function (v1) {
              return {
                  redoHistory: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  showWin: v.showWin,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($176) {
          return $174($175($176));
      };
  };
  var newGameAux = function (dictGame) {
      return function (f) {
          return function (state) {
              var state2 = f(state);
              return Control_Bind.bind(Lib_Random.bindRandom)(onNewGame(dictGame)(state2))(function (v) {
                  return Control_Bind.bind(Lib_Random.bindRandom)(initialPosition(dictGame)(v))(function (v1) {
                      var state4 = Data_Lens_Setter.set(_help(Data_Profunctor_Strong.strongFn))(false)(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(v1)(v))));
                      var $107 = Data_Array["null"](Data_Lens_Getter.viewOn(state2)(_history(Data_Lens_Internal_Forget.strongForget))) || isLevelFinished(dictGame)(state);
                      if ($107) {
                          return Control_Applicative.pure(Lib_Random.applicativeRandom)(state4);
                      };
                      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_dialog(Data_Profunctor_Strong.strongFn))(new ConfirmNewGame(state4))(state));
                  });
              });
          };
      };
  };
  var init = function (dictGame) {
      var $177 = newGameAux(dictGame)(Control_Category.identity(Control_Category.categoryFn));
      return function ($178) {
          return Lib_Random.runRnd($177($178));
      };
  };
  var newGame = function (dictGame) {
      return function (f) {
          return Pha_Action.randomAction(newGameAux(dictGame)(f));
      };
  };
  var newGame$prime = function (dictGame) {
      return function (f) {
          return function (val) {
              return newGame(dictGame)(f(val));
          };
      };
  };
  var setModeA = function (dictGame) {
      return newGame$prime(dictGame)(Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn)));
  };
  var setGridSizeA = function (dictGame) {
      return function (nbRows) {
          return function (nbColumns) {
              return function (customSize) {
                  var setSize$prime = function (state) {
                      var v = sizeLimit(dictGame)(state);
                      var $109 = nbRows >= v.value0 && (nbRows <= v.value2 && (nbColumns >= v.value1 && nbColumns <= v.value3));
                      if ($109) {
                          return Data_Lens_Setter.set(_nbColumns(Data_Profunctor_Strong.strongFn))(nbColumns)(Data_Lens_Setter.set(_nbRows(Data_Profunctor_Strong.strongFn))(nbRows)(state));
                      };
                      return state;
                  };
                  return newGame(dictGame)((function () {
                      var $179 = Data_Lens_Setter.set(_customSize(Data_Profunctor_Strong.strongFn))(customSize);
                      return function ($180) {
                          return setSize$prime($179($180));
                      };
                  })());
              };
          };
      };
  };
  var pushToHistory = function (state) {
      return Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_Function.flip(Data_Array.snoc)(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state));
  };
  var _showWin = function (dictStrong) {
      var $181 = _core(dictStrong);
      var $182 = Data_Lens_Lens.lens(function (v) {
          return v.showWin;
      })(function (v) {
          return function (v1) {
              return {
                  showWin: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  turn: v.turn
              };
          };
      })(dictStrong);
      return function ($183) {
          return $181($182($183));
      };
  };
  var showVictory = Pha_Action.asyncAction(function (v) {
      return function (v1) {
          return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(true)))(function (v2) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(1000.0))(function () {
                  return v.updateState(Data_Lens_Setter.set(_showWin(Data_Profunctor_Strong.strongFn))(false));
              });
          });
      };
  });
  var _turn = function (dictStrong) {
      var $184 = _core(dictStrong);
      var $185 = Data_Lens_Lens.lens(function (v) {
          return v.turn;
      })(function (v) {
          return function (v1) {
              return {
                  turn: v1,
                  customSize: v.customSize,
                  dialog: v.dialog,
                  help: v.help,
                  history: v.history,
                  locked: v.locked,
                  mode: v.mode,
                  nbColumns: v.nbColumns,
                  nbRows: v.nbRows,
                  pointer: v.pointer,
                  position: v.position,
                  redoHistory: v.redoHistory,
                  showWin: v.showWin
              };
          };
      })(dictStrong);
      return function ($186) {
          return $184($185($186));
      };
  };
  var changeTurn = function (state) {
      var $116 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(DuelMode.value);
      if ($116) {
          return Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(function (x) {
              return 1 - x | 0;
          })(state);
      };
      return state;
  };
  var redoA = Pha_Action.action(function (state) {
      return Data_Maybe.maybe(state)(function (hs) {
          return changeTurn(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.last(hs))(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.init(hs))(Data_Lens_Setter.over(_history(Data_Profunctor_Strong.strongFn))(Data_Function.flip(Data_Array.snoc)(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state))));
      })(Data_Array_NonEmpty.fromArray(Data_Lens_Getter.viewOn(state)(_redoHistory(Data_Lens_Internal_Forget.strongForget))));
  });
  var undoA = Pha_Action.action(function (state) {
      return Data_Maybe.maybe(state)(function (hs) {
          return changeTurn(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.last(hs))(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.init(hs))(Data_Lens_Setter.over(_redoHistory(Data_Profunctor_Strong.strongFn))(Data_Function.flip(Data_Array.snoc)(Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget))))(state))));
      })(Data_Array_NonEmpty.fromArray(Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget))));
  });
  var playAux = function (dictGame) {
      return function (move) {
          return function (state) {
              var $117 = canPlay(dictGame)(state)(move);
              if ($117) {
                  var position = Data_Lens_Getter.viewOn(state)(_position(Data_Lens_Internal_Forget.strongForget));
                  return Data_Lens_Setter.over(_turn(Data_Profunctor_Strong.strongFn))(function (v) {
                      return 1 - v | 0;
                  })(Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(play(dictGame)(state)(move))(state));
              };
              return state;
          };
      };
  };
  var computerMove$prime = function (dictTwoPlayersGame) {
      return function (state) {
          var $118 = isLevelFinished(dictTwoPlayersGame.Game0())(state);
          if ($118) {
              return Data_Maybe.Nothing.value;
          };
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.fromArray(possibleMoves(dictTwoPlayersGame)(state)))(function (moves) {
              var bestMove = (function () {
                  var $119 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
                  if ($119) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Foldable.find(Data_Foldable.foldableArray)((function () {
                      var $187 = isLosingPosition(dictTwoPlayersGame);
                      var $188 = Data_Function.flip(playAux(dictTwoPlayersGame.Game0()))(state);
                      return function ($189) {
                          return $187($188($189));
                      };
                  })())(Data_Array_NonEmpty.toArray(moves));
              })();
              return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(bestMove)(Control_Applicative.pure(Lib_Random.applicativeRandom)))(new Data_Maybe.Just(Lib_Random.randomPick(moves)));
          });
      };
  };
  var computerPlay = function (dictGame) {
      return Pha_Action.asyncAction(function (v) {
          return function (state) {
              return Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(state))(function (rndmove) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Lib_Random.runRnd(rndmove)))(function (v1) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(playAux(dictGame)(v1)))(function (v2) {
                          var $123 = isLevelFinished(dictGame)(v2);
                          if ($123) {
                              return v.dispatch(showVictory);
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v2);
                      });
                  });
              })(computerMove(dictGame)(state));
          };
      });
  };
  var computerStartsA = function (dictGame) {
      return Data_Semigroup.append(Pha_Action.semigroupAction)(Pha_Action.action(pushToHistory))(computerPlay(dictGame));
  };
  var playA$prime = function (dictGame) {
      return function (optionFn) {
          return function (move) {
              return lockAction(Pha_Action.asyncAction(function (v) {
                  return function (state) {
                      var v1 = optionFn({
                          showWin: true
                      });
                      var $129 = !canPlay(dictGame)(state)(move);
                      if ($129) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(state);
                      };
                      return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState((function () {
                          var $190 = playAux(dictGame)(move);
                          return function ($191) {
                              return $190(pushToHistory($191));
                          };
                      })()))(function (v2) {
                          var $131 = v1.showWin && isLevelFinished(dictGame)(v2);
                          if ($131) {
                              return v.dispatch(showVictory);
                          };
                          var $132 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(ExpertMode.value) || Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(RandomMode.value);
                          if ($132) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(1000.0))(function () {
                                  return v.dispatch(computerPlay(dictGame));
                              });
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v2);
                      });
                  };
              }));
          };
      };
  };
  var playA = function (dictGame) {
      return playA$prime(dictGame)(Control_Category.identity(Control_Category.categoryFn));
  };
  var dropA = function (dictEq) {
      return function (dictGame) {
          return function (dragLens) {
              return function (to) {
                  return Pha_Action.asyncAction(function (v) {
                      return function (state) {
                          var v1 = Data_Lens_Getter.viewOn(state)(dragLens(Data_Lens_Internal_Forget.strongForget));
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(state);
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(Data_Lens_Setter.set(dragLens(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)))(function (v2) {
                                  var $139 = Data_Eq.notEq(dictEq)(v1.value0)(to);
                                  if ($139) {
                                      return v.dispatch(playA(dictGame)({
                                          from: v1.value0,
                                          to: to
                                      }));
                                  };
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(state);
                              });
                          };
                          throw new Error("Failed pattern match at Game.Core (line 276, column 5 - line 280, column 83): " + [ v1.constructor.name ]);
                      };
                  });
              };
          };
      };
  };
  var resetA = Pha_Action.action(function (state) {
      return Data_Maybe.maybe(state)(function (hs) {
          return Data_Lens_Setter.set(_position(Data_Profunctor_Strong.strongFn))(Data_Array_NonEmpty.head(hs))(Data_Lens_Setter.set(_history(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_redoHistory(Data_Profunctor_Strong.strongFn))([  ])(Data_Lens_Setter.set(_turn(Data_Profunctor_Strong.strongFn))(0)(state))));
      })(Data_Array_NonEmpty.fromArray(Data_Lens_Getter.viewOn(state)(_history(Data_Lens_Internal_Forget.strongForget))));
  });
  exports["canPlay"] = canPlay;
  exports["isLevelFinished"] = isLevelFinished;
  exports["possibleMoves"] = possibleMoves;
  exports["sizeLimit"] = sizeLimit;
  exports["Rules"] = Rules;
  exports["NoDialog"] = NoDialog;
  exports["ConfirmNewGame"] = ConfirmNewGame;
  exports["RandomMode"] = RandomMode;
  exports["ExpertMode"] = ExpertMode;
  exports["DuelMode"] = DuelMode;
  exports["State"] = State;
  exports["genState"] = genState;
  exports["_position"] = _position;
  exports["_history"] = _history;
  exports["_redoHistory"] = _redoHistory;
  exports["_mode"] = _mode;
  exports["_help"] = _help;
  exports["_turn"] = _turn;
  exports["_dialog"] = _dialog;
  exports["_nbRows"] = _nbRows;
  exports["_nbColumns"] = _nbColumns;
  exports["_customSize"] = _customSize;
  exports["_locked"] = _locked;
  exports["_showWin"] = _showWin;
  exports["_pointer"] = _pointer;
  exports["SizeLimit"] = SizeLimit;
  exports["Game"] = Game;
  exports["defaultSizeLimit"] = defaultSizeLimit;
  exports["defaultOnNewGame"] = defaultOnNewGame;
  exports["undoA"] = undoA;
  exports["redoA"] = redoA;
  exports["resetA"] = resetA;
  exports["toggleHelpA"] = toggleHelpA;
  exports["computerStartsA"] = computerStartsA;
  exports["playA'"] = playA$prime;
  exports["playA"] = playA;
  exports["lockAction"] = lockAction;
  exports["newGame"] = newGame;
  exports["newGame'"] = newGame$prime;
  exports["init"] = init;
  exports["setModeA"] = setModeA;
  exports["setGridSizeA"] = setGridSizeA;
  exports["confirmNewGameA"] = confirmNewGameA;
  exports["TwoPlayersGame"] = TwoPlayersGame;
  exports["computerMove'"] = computerMove$prime;
  exports["dropA"] = dropA;
  exports["eqMode"] = eqMode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Baseball.Model"] = $PS["Game.Baseball.Model"] || {};
  var exports = $PS["Game.Baseball.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      nbBases: 5,
      missingPeg: 0
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _missingPeg = function (dictStrong) {
      var $21 = _ext(dictStrong);
      var $22 = Data_Lens_Lens.lens(function (v) {
          return v.missingPeg;
      })(function (v) {
          return function (v1) {
              return {
                  missingPeg: v1,
                  nbBases: v.nbBases
              };
          };
      })(dictStrong);
      return function ($23) {
          return $21($22($23));
      };
  };
  var _nbBases = function (dictStrong) {
      var $24 = _ext(dictStrong);
      var $25 = Data_Lens_Lens.lens(function (v) {
          return v.nbBases;
      })(function (v) {
          return function (v1) {
              return {
                  nbBases: v1,
                  missingPeg: v.missingPeg
              };
          };
      })(dictStrong);
      return function ($26) {
          return $24($25($26));
      };
  };
  var baseballGame = new Game_Core.Game(function (state) {
      return function (i) {
          return Data_Maybe.fromMaybe(false)((function () {
              var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
              var nbBases = Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget));
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(Data_Lens_Getter.viewOn(state)(_missingPeg(Data_Lens_Internal_Forget.strongForget))))(function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(i))(function (v1) {
                      var diff = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2) - Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v1)(2) | 0;
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(diff)([ 1, nbBases - 1 | 0, -1 | 0, 1 - nbBases | 0 ]));
                  });
              });
          })());
      };
  }, Data_Function["const"](Data_Maybe.Nothing.value), function (state) {
      return Lib_Random.shuffle(Lib_Util["range'"](0)((2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0) - 1 | 0));
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Control_Category.identity(Control_Category.categoryFn))(Data_Array.mapWithIndex(function (i) {
          return function (j) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(2) === Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(j)(2);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  }, function (state) {
      return Data_Functor.mapFlipped(Lib_Random.functorRandom)(Lib_Random.randomInt(2 * Data_Lens_Getter.viewOn(state)(_nbBases(Data_Lens_Internal_Forget.strongForget)) | 0))(function (i) {
          return Data_Lens_Setter.set(_missingPeg(Data_Profunctor_Strong.strongFn))(i)(state);
      });
  }, function (state) {
      return function (i) {
          return Lib_Util.swap(Data_Lens_Getter.viewOn(state)(_missingPeg(Data_Lens_Internal_Forget.strongForget)))(i)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, Game_Core.defaultSizeLimit);
  var setNbBases = Game_Core["newGame'"](baseballGame)(Data_Lens_Setter.set(_nbBases(Data_Profunctor_Strong.strongFn)));
  exports["_nbBases"] = _nbBases;
  exports["_missingPeg"] = _missingPeg;
  exports["istate"] = istate;
  exports["setNbBases"] = setNbBases;
  exports["baseballGame"] = baseballGame;
})(PS);
(function(exports) {
  const RECYCLED_NODE = 1
  const LAZY_NODE = 2
  const TEXT_NODE = 3
  const EMPTY_OBJ = {}
  const EMPTY_ARR = []
  const map = EMPTY_ARR.map
  const defer = requestAnimationFrame || setTimeout

  const merge = function(a, b) {
    var out = {}

    for (var k in a) out[k] = a[k]
    for (var k in b) out[k] = b[k]

    return out
  }

  const patchProperty = function(node, key, oldValue, newValue, listener, isSvg) {
    if (key === "key") {
    } else if (key === "style") {
      for (var k in merge(oldValue, newValue)) {
        oldValue = newValue == null || newValue[k] == null ? "" : newValue[k]
        if (k[0] === "-") {
          node[key].setProperty(k, oldValue)
        } else {
          node[key][k] = oldValue
        }
      }
    } else if (key[0] === "o" && key[1] === "n") {
      if (
        !((node.actions || (node.actions = {}))[
          (key = key.slice(2).toLowerCase())
        ] = newValue)
      ) {
        node.removeEventListener(key, listener)
      } else if (!oldValue) {
        node.addEventListener(key, listener)
      }
    } else if (!isSvg && key !== "list" && key in node) {
      node[key] = newValue == null ? "" : newValue
    } else if (
      newValue == null ||
      newValue === false ||
      (key === "class" && !newValue)
    ) {
      node.removeAttribute(key)
    } else {
      node.setAttribute(key, newValue)
    }
  }

  const createNode = function(vnode, listener, isSvg) {
    var node =
      vnode.type === TEXT_NODE
        ? document.createTextNode(vnode.name)
        : (isSvg = isSvg || vnode.name === "svg")
        ? document.createElementNS("http://www.w3.org/2000/svg", vnode.name)
        : document.createElement(vnode.name)
    var props = vnode.props

    for (var k in props) {
      patchProperty(node, k, null, props[k], listener, isSvg)
    }

    for (var i = 0, len = vnode.children.length; i < len; i++) {
      node.appendChild(
        createNode(
          (vnode.children[i] = getVNode(vnode.children[i])),
          listener,
          isSvg
        )
      )
    }

    return (vnode.node = node)
  }

  const getKey = vnode => vnode == null ? null : vnode.key;

  const patch = function(parent, node, oldVNode, newVNode, listener, isSvg) {
    if (oldVNode === newVNode) {
    } else if (
      oldVNode != null &&
      oldVNode.type === TEXT_NODE &&
      newVNode.type === TEXT_NODE
    ) {
      if (oldVNode.name !== newVNode.name) node.nodeValue = newVNode.name
    } else if (oldVNode == null || oldVNode.name !== newVNode.name) {
      node = parent.insertBefore(
        createNode((newVNode = getVNode(newVNode)), listener, isSvg),
        node
      )
      if (oldVNode != null) {
        parent.removeChild(oldVNode.node)
      }
    } else {
      var tmpVKid
      var oldVKid

      var oldKey
      var newKey

      var oldVProps = oldVNode.props
      var newVProps = newVNode.props

      var oldVKids = oldVNode.children
      var newVKids = newVNode.children

      var oldHead = 0
      var newHead = 0
      var oldTail = oldVKids.length - 1
      var newTail = newVKids.length - 1

      isSvg = isSvg || newVNode.name === "svg"

      for (var i in merge(oldVProps, newVProps)) {
        if (
          (i === "value" || i === "selected" || i === "checked"
            ? node[i]
            : oldVProps[i]) !== newVProps[i]
        ) {
          patchProperty(node, i, oldVProps[i], newVProps[i], listener, isSvg)
        }
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldHead])) == null ||
          oldKey !== getKey(newVKids[newHead])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldHead].node,
          oldVKids[oldHead],
          (newVKids[newHead] = getVNode(
            newVKids[newHead++],
            oldVKids[oldHead++]
          )),
          listener,
          isSvg
        )
      }

      while (newHead <= newTail && oldHead <= oldTail) {
        if (
          (oldKey = getKey(oldVKids[oldTail])) == null ||
          oldKey !== getKey(newVKids[newTail])
        ) {
          break
        }

        patch(
          node,
          oldVKids[oldTail].node,
          oldVKids[oldTail],
          (newVKids[newTail] = getVNode(
            newVKids[newTail--],
            oldVKids[oldTail--]
          )),
          listener,
          isSvg
        )
      }

      if (oldHead > oldTail) {
        while (newHead <= newTail) {
          node.insertBefore(
            createNode(
              (newVKids[newHead] = getVNode(newVKids[newHead++])),
              listener,
              isSvg
            ),
            (oldVKid = oldVKids[oldHead]) && oldVKid.node
          )
        }
      } else if (newHead > newTail) {
        while (oldHead <= oldTail) {
          node.removeChild(oldVKids[oldHead++].node)
        }
      } else {
        for (var i = oldHead, keyed = {}, newKeyed = {}; i <= oldTail; i++) {
          if ((oldKey = oldVKids[i].key) != null) {
            keyed[oldKey] = oldVKids[i]
          }
        }

        while (newHead <= newTail) {
          oldKey = getKey((oldVKid = oldVKids[oldHead]))
          newKey = getKey(
            (newVKids[newHead] = getVNode(newVKids[newHead], oldVKid))
          )

          if (
            newKeyed[oldKey] ||
            (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))
          ) {
            if (oldKey == null) {
              node.removeChild(oldVKid.node)
            }
            oldHead++
            continue
          }

          if (newKey == null || oldVNode.type === RECYCLED_NODE) {
            if (oldKey == null) {
              patch(
                node,
                oldVKid && oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg
              )
              newHead++
            }
            oldHead++
          } else {
            if (oldKey === newKey) {
              patch(
                node,
                oldVKid.node,
                oldVKid,
                newVKids[newHead],
                listener,
                isSvg
              )
              newKeyed[newKey] = true
              oldHead++
            } else {
              if ((tmpVKid = keyed[newKey]) != null) {
                patch(
                  node,
                  node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),
                  tmpVKid,
                  newVKids[newHead],
                  listener,
                  isSvg
                )
                newKeyed[newKey] = true
              } else {
                patch(
                  node,
                  oldVKid && oldVKid.node,
                  null,
                  newVKids[newHead],
                  listener,
                  isSvg
                )
              }
            }
            newHead++
          }
        }

        while (oldHead <= oldTail) {
          if (getKey((oldVKid = oldVKids[oldHead++])) == null) {
            node.removeChild(oldVKid.node)
          }
        }

        for (var i in keyed) {
          if (newKeyed[i] == null) {
            node.removeChild(keyed[i].node)
          }
        }
      }
    }

    return (newVNode.node = node)
  }

  const propsChanged = function(a, b) {
    for (var k in a) if (a[k] !== b[k]) return true
    for (var k in b) if (a[k] !== b[k]) return true
  }

  const getVNode = function(newVNode, oldVNode) {
    return newVNode.type === LAZY_NODE
      ? ((!oldVNode || propsChanged(oldVNode.lazy, newVNode.lazy)) &&
          ((oldVNode = newVNode.lazy.view(newVNode.lazy)).lazy = newVNode.lazy),
        oldVNode)
      : newVNode
  }

  const createVNode = function(name, props, children, node, key, type) {
    return {
      name: name,
      props: props,
      children: children,
      node: node,
      type: type,
      key: key
    }
  }

  const createTextVNode = (value, node) =>
      createVNode(value, EMPTY_OBJ, EMPTY_ARR, node, null, TEXT_NODE);

  const recycleNode = node =>
    node.nodeType === TEXT_NODE
      ? createTextVNode(node.nodeValue, node)
      : createVNode(
          node.nodeName.toLowerCase(),
          EMPTY_OBJ,
          map.call(node.childNodes, recycleNode),
          node,
          null,
          RECYCLED_NODE
        )

  const appAux = props => () => {
    const {view, launchAff, events, init} = props
    let state = {};
    let lock = false
    let node = document.getElementById(props.node);
    let vdom = node && recycleNode(node);

    const listener = function(event) {
      launchAff(this.actions[event.type](dispatch)(event))();
    }

    const setState = newState => {
      if (state !== newState) {
        state = newState
        if (!lock) defer(render, (lock = true))
      }
      return state
    }

    const dispatch = fn => () => setState(fn(state));

    const rawEvent = (name, action) => {
       const listener = event => launchAff(action(dispatch)(event))();
       addEventListener (name, listener);
     }


    const render = () => {
      lock = false
      node = patch(
        node.parentNode,
        node,
        vdom,
        vdom = view(state),
        listener
      )
    }
    setState(props.state);
    for (let i = 0; i < events.length; i++) {
       rawEvent(events[i].value0, events[i].value1);
    }
    launchAff(init(dispatch)(undefined))();
  }

  const h = isStyle => name => ps => children => {
      const style = {};
      const props = {style};
      const vdom = { name, children: children.filter(x => x), props, node: null };
      const n = ps.length;
      for (let i = 0; i < n; i++) {
          const obj = ps[i];
          const value0 = obj.value0;
          const value1 = obj.value1;
          if (value1 === undefined)
              vdom.key = value0;
          else if (typeof value1 === 'function')
              vdom.props["on"+value0] = value1;
          else if (typeof value1 === 'boolean') {
              if(!value1)
                  {}
              else if (props.class)  
                  props.class += ' ' + value0;
              else
                  props.class = value0;
          }
          else if (isStyle(obj))
              style[value0] = value1;
          else
              props[value0] = value1;
      }
      return vdom;
  }

  exports.emptyNode = null;
  exports.appAux = appAux;
  exports.hAux = h;
  exports.text = createTextVNode;
})(PS["Pha"] = PS["Pha"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha"] = $PS["Pha"] || {};
  var exports = $PS["Pha"];
  var $foreign = $PS["Pha"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Class = (function () {
      function Class(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Class.create = function (value0) {
          return function (value1) {
              return new Class(value0, value1);
          };
      };
      return Class;
  })();
  var Style = (function () {
      function Style(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Style.create = function (value0) {
          return function (value1) {
              return new Style(value0, value1);
          };
      };
      return Style;
  })();
  var Event = (function () {
      function Event(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Event.create = function (value0) {
          return function (value1) {
              return new Event(value0, value1);
          };
      };
      return Event;
  })();
  var whenN = function (cond) {
      return function (vdom) {
          if (cond) {
              return vdom(Data_Unit.unit);
          };
          return $foreign.emptyNode;
      };
  };
  var maybeN = Data_Maybe.fromMaybe($foreign.emptyNode);
  var isStyle = function (v) {
      if (v instanceof Style) {
          return true;
      };
      return false;
  };
  var h = $foreign.hAux(isStyle);
  var app = function (v) {
      return $foreign.appAux({
          view: v.view,
          node: v.node,
          state: v.state,
          events: v.events,
          init: v.init,
          launchAff: Effect_Aff.launchAff
      });
  };
  exports["Key"] = Key;
  exports["Attr"] = Attr;
  exports["Class"] = Class;
  exports["Style"] = Style;
  exports["Event"] = Event;
  exports["h"] = h;
  exports["whenN"] = whenN;
  exports["maybeN"] = maybeN;
  exports["app"] = app;
  exports["text"] = $foreign.text;
  exports["emptyNode"] = $foreign.emptyNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha.Html"] = $PS["Pha.Html"] || {};
  var exports = $PS["Pha.Html"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];                
  var translate = function (x1) {
      return function (y1) {
          return "translate(" + (Data_Show.show(Data_Show.showNumber)(x1) + ("px," + (Data_Show.show(Data_Show.showNumber)(y1) + "px)")));
      };
  };
  var svg = Pha.h("svg");
  var style = Pha.Style.create;
  var span = Pha.h("span");
  var rgbColor = function (r) {
      return function (g$prime) {
          return function (b) {
              return "rgb(" + (Data_Show.show(Data_Show.showInt)(r) + ("," + (Data_Show.show(Data_Show.showInt)(g$prime) + ("," + (Data_Show.show(Data_Show.showInt)(b) + ")")))));
          };
      };
  };
  var pointerup = Pha.Event.create("pointerup");
  var pointermove = Pha.Event.create("pointermove");
  var pointerleave = Pha.Event.create("pointerleave");
  var pointerenter = Pha.Event.create("pointerenter");
  var pointerdown = Pha.Event.create("pointerdown");
  var p = Pha.h("p");                       
  var key = Pha.Key.create;
  var h2 = Pha.h("h2");
  var g = Pha.h("g");
  var div$prime = Pha.h("div");
  var contextmenu = Pha.Event.create("contextmenu");
  var click = Pha.Event.create("click");
  var class$prime = Pha.Class.create;
  var button = Pha.h("button");
  var br = Pha.h("br")([  ])([  ]);
  var attr = Pha.Attr.create;
  var circle = function (cx) {
      return function (cy) {
          return function (r) {
              return function (props) {
                  return Pha.h("circle")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("cx")(Data_Show.show(Data_Show.showNumber)(cx)), attr("cy")(Data_Show.show(Data_Show.showNumber)(cy)), attr("r")(Data_Show.show(Data_Show.showNumber)(r)) ])(props))([  ]);
              };
          };
      };
  };
  var disabled = function (b) {
      return attr("disabled")((function () {
          if (b) {
              return "true";
          };
          return "";
      })());
  };
  var fill = attr("fill");
  var height = attr("height");
  var href = attr("href");
  var line = function (x1) {
      return function (y1) {
          return function (x2) {
              return function (y2) {
                  return function (props) {
                      return Pha.h("line")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x1")(Data_Show.show(Data_Show.showNumber)(x1)), attr("y1")(Data_Show.show(Data_Show.showNumber)(y1)), attr("x2")(Data_Show.show(Data_Show.showNumber)(x2)), attr("y2")(Data_Show.show(Data_Show.showNumber)(y2)) ])(props))([  ]);
                  };
              };
          };
      };
  };
  var path = function (d) {
      return function (props) {
          return Pha.h("path")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("d")(d) ])(props))([  ]);
      };
  };
  var rect = function (x$prime) {
      return function (y$prime) {
          return function (w) {
              return function (h$prime) {
                  return function (props) {
                      return Pha.h("rect")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x")(Data_Show.show(Data_Show.showNumber)(x$prime)), attr("y")(Data_Show.show(Data_Show.showNumber)(y$prime)), attr("width")(Data_Show.show(Data_Show.showNumber)(w)), attr("height")(Data_Show.show(Data_Show.showNumber)(h$prime)) ])(props))([  ]);
                  };
              };
          };
      };
  };
  var stroke = attr("stroke");
  var strokeDasharray = attr("stroke-dasharray");
  var strokeWidth = attr("stroke-width");
  var text$prime = function (x1) {
      return function (y1) {
          return function (t) {
              return function (props) {
                  return Pha.h("text")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x")(Data_Show.show(Data_Show.showNumber)(x1)), attr("y")(Data_Show.show(Data_Show.showNumber)(y1)) ])(props))([ Pha.text(t) ]);
              };
          };
      };
  };
  var transform = attr("transform");
  var use = function (x1) {
      return function (y1) {
          return function (w) {
              return function (h$prime) {
                  return function (href$prime) {
                      return function (props) {
                          return Pha.h("use")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ attr("x")(Data_Show.show(Data_Show.showNumber)(x1)), attr("y")(Data_Show.show(Data_Show.showNumber)(y1)), attr("width")(Data_Show.show(Data_Show.showNumber)(w)), attr("height")(Data_Show.show(Data_Show.showNumber)(h$prime)), attr("href")(href$prime) ])(props))([  ]);
                      };
                  };
              };
          };
      };
  };
  var viewBox = attr("viewBox");
  var width = attr("width");
  var svguse = function (symbol) {
      return function (props) {
          return svg(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ width("100%"), height("100%") ])(props))([ Pha.h("use")([ attr("href")(symbol) ])([  ]) ]);
      };
  };                
  var a = Pha.h("a");
  exports["key"] = key;
  exports["attr"] = attr;
  exports["class'"] = class$prime;
  exports["style"] = style;
  exports["click"] = click;
  exports["contextmenu"] = contextmenu;
  exports["pointermove"] = pointermove;
  exports["pointerup"] = pointerup;
  exports["pointerdown"] = pointerdown;
  exports["pointerenter"] = pointerenter;
  exports["pointerleave"] = pointerleave;
  exports["br"] = br;
  exports["button"] = button;
  exports["div'"] = div$prime;
  exports["span"] = span;
  exports["h2"] = h2;
  exports["p"] = p;
  exports["a"] = a;
  exports["disabled"] = disabled;
  exports["width"] = width;
  exports["height"] = height;
  exports["href"] = href;
  exports["stroke"] = stroke;
  exports["fill"] = fill;
  exports["viewBox"] = viewBox;
  exports["transform"] = transform;
  exports["strokeWidth"] = strokeWidth;
  exports["strokeDasharray"] = strokeDasharray;
  exports["g"] = g;
  exports["svg"] = svg;
  exports["rect"] = rect;
  exports["path"] = path;
  exports["line"] = line;
  exports["circle"] = circle;
  exports["use"] = use;
  exports["text'"] = text$prime;
  exports["translate"] = translate;
  exports["svguse"] = svguse;
  exports["rgbColor"] = rgbColor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Icon"] = $PS["UI.Icon"] || {};
  var exports = $PS["UI.Icon"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];                
  var IconText = (function () {
      function IconText(value0) {
          this.value0 = value0;
      };
      IconText.create = function (value0) {
          return new IconText(value0);
      };
      return IconText;
  })();
  var IconSymbol = (function () {
      function IconSymbol(value0) {
          this.value0 = value0;
      };
      IconSymbol.create = function (value0) {
          return new IconSymbol(value0);
      };
      return IconSymbol;
  })();
  var IconNone = (function () {
      function IconNone() {

      };
      IconNone.value = new IconNone();
      return IconNone;
  })();
  var defaultOptions = {
      icon: IconNone.value,
      selected: false,
      tooltip: Data_Maybe.Nothing.value,
      round: false,
      large: false,
      hidden: false,
      disabled: false,
      style: [  ]
  };
  var iconbutton = function (optionFn) {
      return function (props) {
          var v = optionFn(defaultOptions);
          return Pha_Html.button(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-icon")(true), Pha_Html["class'"]("selected")(v.selected), Pha_Html["class'"]("round")(v.large), Pha_Html["class'"]("hidden")(v.hidden), Pha_Html.disabled(v.disabled) ])(props))([ (function () {
              if (v.icon instanceof IconSymbol) {
                  return Pha_Html.svguse(v.icon.value0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-icon-symbol")(true) ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.style)(Data_Tuple.uncurry(Pha_Html.style))));
              };
              if (v.icon instanceof IconText) {
                  return Pha_Html.span([ Pha_Html["class'"]("ui-icon-text")(true) ])([ Pha.text(v.icon.value0) ]);
              };
              if (v.icon instanceof IconNone) {
                  return Pha.emptyNode;
              };
              throw new Error("Failed pattern match at UI.Icon (line 43, column 9 - line 46, column 34): " + [ v.icon.constructor.name ]);
          })(), Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.tooltip)(function (t) {
              return Pha_Html.span([ Pha_Html["class'"]("ui-icon-tooltip")(true) ])([ Pha.text(t) ]);
          })) ]);
      };
  };
  exports["IconText"] = IconText;
  exports["IconSymbol"] = IconSymbol;
  exports["iconbutton"] = iconbutton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Icons"] = $PS["UI.Icons"] || {};
  var exports = $PS["UI.Icons"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];                
  var icongroup = function (title) {
      return function (children) {
          return Pha_Html["div'"]([  ])([ Pha_Html.h2([  ])([ Pha.text(title) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-icon-grid")(true) ])(children) ]);
      };
  };
  var iconbutton = function (state) {
      return function (optionFn) {
          return function (props) {
              return UI_Icon.iconbutton(function (opts) {
                  var opts2 = optionFn(opts);
                  return {
                      icon: opts2.icon,
                      selected: opts2.selected,
                      tooltip: opts2.tooltip,
                      round: opts2.round,
                      large: opts2.large,
                      hidden: opts2.hidden,
                      disabled: opts2.disabled || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget)),
                      style: opts2.style
                  };
              })(props);
          };
      };
  };
  var icons2Players = function (dictGame) {
      return function (lens) {
          return function (state) {
              return icongroup("Mode de jeu")([ iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#school"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.RandomMode.value),
                      tooltip: new Data_Maybe.Just("IA mode facile"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.setModeA(dictGame)(Game_Core.RandomMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#enstein"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.ExpertMode.value),
                      tooltip: new Data_Maybe.Just("IA mode expert"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.setModeA(dictGame)(Game_Core.ExpertMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#duel"),
                      selected: Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                      tooltip: new Data_Maybe.Just("Affronte un autre joueur"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.setModeA(dictGame)(Game_Core.DuelMode.value))) ]), iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconText("2P\u21e8"),
                      selected: v.selected,
                      tooltip: new Data_Maybe.Just("L'IA commence"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: !Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))) || Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value),
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Core.computerStartsA(dictGame))) ]) ]);
          };
      };
  };
  var ihelp = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#help"),
                  selected: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)),
                  tooltip: new Data_Maybe.Just("Aide"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.toggleHelpA)) ]);
      };
  };
  var iredo = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#undo"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Rejoue le coup annul\xe9"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_redoHistory"](Data_Lens_Internal_Forget.strongForget))),
                  style: [ new Data_Tuple.Tuple("transform", "scaleX(-1)") ]
              };
          })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.redoA)) ]);
      };
  };
  var ireset = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#reset"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Recommence la partie"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))),
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.resetA)) ]);
      };
  };
  var irules = function (lens) {
      return function (state) {
          var selected = (function () {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget));
              if (v instanceof Game_Core.Rules) {
                  return true;
              };
              return false;
          })();
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#rules"),
                  selected: selected,
                  tooltip: new Data_Maybe.Just("R\xe8gles"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.Rules.value)))) ]);
      };
  };
  var iundo = function (lens) {
      return function (state) {
          return iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#undo"),
                  selected: v.selected,
                  tooltip: new Data_Maybe.Just("Annule le dernier coup effectu\xe9"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_history"](Data_Lens_Internal_Forget.strongForget))),
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Core.undoA)) ]);
      };
  };
  var iconSizesGroup = function (dictGame) {
      return function (lens) {
          return function (state) {
              return function (sizeList) {
                  return function (customSize) {
                      var csize = Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget));
                      var crows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
                      var ccols = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
                      return icongroup("Dimensions de la grille")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(sizeList)(function (v) {
                          return iconbutton(state)(function (v1) {
                              return {
                                  icon: UI_Icon.IconText.create(Data_Show.show(Data_Show.showInt)(v.value0) + ("x" + Data_Show.show(Data_Show.showInt)(v.value1))),
                                  selected: v.value0 === crows && (v.value1 === ccols && !csize),
                                  tooltip: v1.tooltip,
                                  round: v1.round,
                                  large: v1.large,
                                  hidden: v1.hidden,
                                  disabled: v1.disabled,
                                  style: v1.style
                              };
                          })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Core.setGridSizeA(dictGame)(v.value0)(v.value1)(false))) ]);
                      }))((function () {
                          if (customSize) {
                              return [ iconbutton(state)(function (v) {
                                  return {
                                      icon: new UI_Icon.IconText("NxM"),
                                      selected: csize,
                                      tooltip: new Data_Maybe.Just("Taille personnalis\xe9e"),
                                      round: v.round,
                                      large: v.large,
                                      hidden: v.hidden,
                                      disabled: v.disabled,
                                      style: v.style
                                  };
                              })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_customSize"](Data_Profunctor_Strong.strongFn))(true)))) ]) ];
                          };
                          return [  ];
                      })()));
                  };
              };
          };
      };
  };
  var iconSelectGroupM = function (dictShow) {
      return function (dictEq) {
          return function (lens) {
              return function (state) {
                  return function (title) {
                      return function (values) {
                          return function (selected) {
                              return function (action) {
                                  return function (optionFn) {
                                      return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                          return iconbutton(state)((function () {
                                              var $40 = optionFn(val);
                                              return function ($41) {
                                                  return $40((function (v) {
                                                      return {
                                                          icon: UI_Icon.IconText.create(Data_Show.show(dictShow)(val)),
                                                          selected: Data_Foldable.elem(Data_Foldable.foldableArray)(dictEq)(val)(selected),
                                                          tooltip: v.tooltip,
                                                          round: v.round,
                                                          large: v.large,
                                                          hidden: v.hidden,
                                                          disabled: v.disabled,
                                                          style: v.style
                                                      };
                                                  })($41));
                                              };
                                          })())([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                                              return lens(dictStrong);
                                          })(action(val))) ]);
                                      }));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var iconSelectGroup = function (dictShow) {
      return function (dictEq) {
          return function (lens) {
              return function (state) {
                  return function (title) {
                      return function (values) {
                          return function (selected) {
                              return function (action) {
                                  return function (optionFn) {
                                      return icongroup(title)(Data_Functor.mapFlipped(Data_Functor.functorArray)(values)(function (val) {
                                          return iconbutton(state)((function () {
                                              var $42 = optionFn(val);
                                              return function ($43) {
                                                  return $42((function (v) {
                                                      return {
                                                          icon: UI_Icon.IconText.create(Data_Show.show(dictShow)(val)),
                                                          selected: Data_Eq.eq(dictEq)(val)(selected),
                                                          tooltip: v.tooltip,
                                                          round: v.round,
                                                          large: v.large,
                                                          hidden: v.hidden,
                                                          disabled: v.disabled,
                                                          style: v.style
                                                      };
                                                  })($43));
                                              };
                                          })())([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                                              return lens(dictStrong);
                                          })(action(val))) ]);
                                      }));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["iconbutton"] = iconbutton;
  exports["icongroup"] = icongroup;
  exports["iundo"] = iundo;
  exports["iredo"] = iredo;
  exports["ireset"] = ireset;
  exports["ihelp"] = ihelp;
  exports["irules"] = irules;
  exports["iconSelectGroup"] = iconSelectGroup;
  exports["iconSelectGroupM"] = iconSelectGroupM;
  exports["iconSizesGroup"] = iconSizesGroup;
  exports["icons2Players"] = icons2Players;
})(PS);
(function(exports) {
  exports.relativePointerPositionAux = nothing => just => e => () => {
      const rect = e.currentTarget.getBoundingClientRect();
      if (!rect) return nothing;
      return e.clientX >= rect.left && e.clientX < rect.left + rect.width && e.clientY >= rect.top && e.clientY < rect.top + rect.height ?
      just ({
          left: e.clientX - rect.left,
          top: e.clientY - rect.top,
          width: rect.width,
          height: rect.height,
      }) : nothing;
  };

  exports.releasePointerCapture = ev => () => ev && ev.target && ev.pointerId != null &&
                          ev.target.releasePointerCapture && ev.target.releasePointerCapture(ev.pointerId);
})(PS["UI.Template"] = PS["UI.Template"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Dialog"] = $PS["UI.Dialog"] || {};
  var exports = $PS["UI.Dialog"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];                
  var dialog = function (v) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-absolute ui-flex-center ui-dialog-container")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-head")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-title")(true) ])([ Pha.text(v.title) ]) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-body")(true) ])(children), Pha_Html["div'"]([ Pha_Html["class'"]("ui-dialog-buttons")(true) ])(Data_Array.catMaybes([ Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.onCancel)(function (action) {
              return Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary")(true), Pha_Html.click(action) ])([ Pha.text("Annuler") ]);
          }), Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.onOk)(function (action) {
              return Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary")(true), Pha_Html.click(action) ])([ Pha.text("Ok") ]);
          }) ])) ]) ]);
      };
  };
  exports["dialog"] = dialog;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.IncDecGrid"] = $PS["UI.IncDecGrid"] || {};
  var exports = $PS["UI.IncDecGrid"];
  var Data_Show = $PS["Data.Show"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];                
  var incDecGrid = function (v) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-incdecgrid")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("flex")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-incdecgrid-container")(true) ])(children), Pha.whenN(v.showRowButtons)(function (v1) {
              return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-incdecgrid-rows")(true) ])([ UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#plus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v2.disabled,
                      style: v2.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows + 1 | 0)(v.nbColumns)) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-incdecgrid-text")(true) ])([ Pha_Html.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbRows)) ]) ]), UI_Icon.iconbutton(function (v2) {
                  return {
                      icon: new UI_Icon.IconSymbol("#minus"),
                      selected: v2.selected,
                      tooltip: v2.tooltip,
                      round: true,
                      large: v2.large,
                      hidden: !v.customSize,
                      disabled: v2.disabled,
                      style: v2.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows - 1 | 0)(v.nbColumns)) ]) ]);
          }) ]), Pha.whenN(v.showColButtons)(function (v1) {
              return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-incdecgrid-cols")(true) ])([ UI_Icon.iconbutton(function (x) {
                  return {
                      icon: new UI_Icon.IconSymbol("#minus"),
                      selected: x.selected,
                      tooltip: x.tooltip,
                      round: true,
                      large: x.large,
                      hidden: !v.customSize,
                      disabled: x.disabled,
                      style: x.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows)(v.nbColumns - 1 | 0)) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-incdecgrid-text")(true) ])([ Pha_Html.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(v.nbColumns)) ]) ]), UI_Icon.iconbutton(function (x) {
                  return {
                      icon: new UI_Icon.IconSymbol("#plus"),
                      selected: x.selected,
                      tooltip: x.tooltip,
                      round: true,
                      large: x.large,
                      hidden: !v.customSize,
                      disabled: x.disabled,
                      style: x.style
                  };
              })([ Pha_Html.click(v.onResize(v.nbRows)(v.nbColumns + 1 | 0)) ]) ]);
          }) ]);
      };
  };
  exports["incDecGrid"] = incDecGrid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["UI.Template"] = $PS["UI.Template"] || {};
  var exports = $PS["UI.Template"];
  var $foreign = $PS["UI.Template"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Dialog = $PS["UI.Dialog"];
  var UI_IncDecGrid = $PS["UI.IncDecGrid"];                
  var winTitleFor2Players = function (state) {
      var $26 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
      if ($26) {
          return "Le " + ((function () {
              var $27 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 1;
              if ($27) {
                  return "premier";
              };
              return "second";
          })() + " joueur gagne");
      };
      var $28 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 1;
      if ($28) {
          return "Tu as gagn\xe9";
      };
      return "L'IA gagne";
  };
  var winPanel = function (title) {
      return function (state) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center ui-absolute component-win-container")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("component-win")(true), Pha_Html["class'"]("visible")(Data_Lens_Getter.viewOn(state)(Game_Core["_showWin"](Data_Lens_Internal_Forget.strongForget))) ])([ Pha.text(title) ]) ]);
      };
  };
  var turnMessage = function (dictGame) {
      return function (state) {
          var $29 = Game_Core.isLevelFinished(dictGame)(state);
          if ($29) {
              return "Partie finie";
          };
          var $30 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 0;
          if ($30) {
              return "Tour du premier joueur";
          };
          var $31 = Data_Eq.eq(Game_Core.eqMode)(Data_Lens_Getter.viewOn(state)(Game_Core["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Core.DuelMode.value);
          if ($31) {
              return "Tour du second joueur";
          };
          return "Tour de l'IA";
      };
  };
  var template = function (dictGame) {
      return function (lens) {
          return function (v) {
              return function (state) {
                  var dialog$prime = function (v1) {
                      if (v1 instanceof Game_Core.Rules) {
                          return UI_Dialog.dialog({
                              title: "R\xe8gles du jeu",
                              onCancel: Data_Maybe.Nothing.value,
                              onOk: Data_Maybe.Just.create(Pha_Action.lensAction(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.NoDialog.value))))
                          })(v.rules);
                      };
                      if (v1 instanceof Game_Core.ConfirmNewGame) {
                          return UI_Dialog.dialog({
                              title: "Nouvelle partie",
                              onCancel: Data_Maybe.Just.create(Pha_Action.lensAction(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_dialog"](Data_Profunctor_Strong.strongFn))(Game_Core.NoDialog.value)))),
                              onOk: new Data_Maybe.Just(Pha_Action.lensAction(function (dictStrong) {
                                  return lens(dictStrong);
                              })(Game_Core.confirmNewGameA(v1.value0)))
                          })([ Pha.text("Tu es sur le point de cr\xe9er une nouvelle partie. Ta partie en cours sera perdue. Es-tu s\xfbr(e)?") ]);
                      };
                      return Pha.emptyNode;
                  };
                  return Pha_Html["div'"]([  ])([ Pha_Html["div'"]([ Pha_Html["class'"]("main-container")(true) ])([ Pha_Html["div'"]([  ])([ v.board, winPanel(v.winTitle)(state) ]), v.config ]), dialog$prime(Data_Lens_Getter.viewOn(state)(Game_Core["_dialog"](Data_Lens_Internal_Forget.strongForget))) ]);
              };
          };
      };
  };
  var svgCursorStyle = function (v) {
      return [ Pha_Html.style("transform")("translate(" + (Data_Show.show(Data_Show.showNumber)((100.0 * v.left) / v.width) + ("%," + (Data_Show.show(Data_Show.showNumber)((100.0 * v.top) / v.height) + "%")))) ];
  };
  var setPointerPositionA = function (a) {
      return Pha_Action.action(Data_Lens_Setter.set(Game_Core["_pointer"](Data_Profunctor_Strong.strongFn))(a));
  };
  var releasePointerCaptureA = Pha_Action.onlyEffectAction($foreign.releasePointerCapture);
  var relativePointerPosition = $foreign.relativePointerPositionAux(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var trackPointer = function (lens) {
      var move = Pha_Action["withPayload'"](setPointerPositionA)(relativePointerPosition);
      var leave = Pha_Action.action(Data_Lens_Setter.set(Game_Core["_pointer"](Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value));
      return [ Pha_Html.attr("touch-action")("none"), Pha_Html["class'"]("ui-touch-action-none")(true), Pha_Html.pointermove(Pha_Action.lensAction(function (dictStrong) {
          return lens(dictStrong);
      })(move)), Pha_Html.pointerleave(Pha_Action.lensAction(function (dictStrong) {
          return lens(dictStrong);
      })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_pointer"](Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)))), Pha_Html.pointerdown(Pha_Action.lensAction(function (dictStrong) {
          return lens(dictStrong);
      })(move)) ];
  };
  var incDecGrid = function (dictGame) {
      return function (lens) {
          return function (state) {
              var v = Game_Core.sizeLimit(dictGame)(state);
              return UI_IncDecGrid.incDecGrid({
                  nbRows: Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)),
                  nbColumns: Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
                  showRowButtons: v.value0 < v.value2,
                  showColButtons: v.value1 < v.value3,
                  customSize: Data_Lens_Getter.viewOn(state)(Game_Core["_customSize"](Data_Lens_Internal_Forget.strongForget)),
                  onResize: function (x) {
                      return function (y) {
                          return Pha_Action.lensAction(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Core.setGridSizeA(dictGame)(x)(y)(true));
                      };
                  }
              });
          };
      };
  };
  var gridStyle = function (rows) {
      return function (columns) {
          return function (limit) {
              var m = Data_Int.toNumber(Data_Ord.max(Data_Ord.ordInt)(limit)(Data_Ord.max(Data_Ord.ordInt)(rows)(columns)));
              return [ Pha_Html.style("height")(Data_Show.show(Data_Show.showNumber)((Data_Int.toNumber(rows) / m) * 100.0) + "%"), Pha_Html.style("width")(Data_Show.show(Data_Show.showNumber)((Data_Int.toNumber(columns) / m) * 100.0) + "%") ];
          };
      };
  };
  var dndItemProps = function (dictEq) {
      return function (dictGame) {
          return function (lens) {
              return function (dragLens) {
                  return function (draggable) {
                      return function (droppable) {
                          return function (id) {
                              return function (state) {
                                  var draggedItem = Data_Lens_Getter.viewOn(state)(dragLens(Data_Lens_Internal_Forget.strongForget));
                                  var dragged = draggable && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(draggedItem)(new Data_Maybe.Just(id));
                                  var candrop = droppable && Data_Maybe.maybe(false)(function (x) {
                                      return Game_Core.canPlay(dictGame)(state)({
                                          from: x,
                                          to: id
                                      });
                                  })(draggedItem);
                                  return [ Pha_Html["class'"]("dragged")(dragged), Pha_Html["class'"]("candrop")(candrop), Pha_Html.pointerdown((function () {
                                      if (draggable) {
                                          return Pha_Action.lensAction(function (dictStrong) {
                                              return lens(dictStrong);
                                          })(Data_Semigroup.append(Pha_Action.semigroupAction)(Pha_Action.action(Data_Lens_Setter.set(dragLens(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(id))))(releasePointerCaptureA));
                                      };
                                      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
                                  })()), Pha_Html.pointerup(Pha_Action.lensAction(function (dictStrong) {
                                      return lens(dictStrong);
                                  })((function () {
                                      if (candrop) {
                                          return Game_Core.dropA(dictEq)(dictGame)(function (dictStrong) {
                                              return dragLens(dictStrong);
                                          })(id);
                                      };
                                      return Pha_Action.action(Data_Lens_Setter.set(dragLens(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value));
                                  })())) ];
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var dndBoardProps = function (dictEq) {
      return function (dictGame) {
          return function (lens) {
              return function (dragLens) {
                  var move = Pha_Action["withPayload'"](setPointerPositionA)(relativePointerPosition);
                  var leave = Pha_Action.action((function () {
                      var $59 = Data_Lens_Setter.set(Game_Core["_pointer"](Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value);
                      var $60 = Data_Lens_Setter.set(dragLens(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value);
                      return function ($61) {
                          return $59($60($61));
                      };
                  })());
                  return [ Pha_Html.attr("touch-action")("none"), Pha_Html["class'"]("ui-touch-action-none")(true), Pha_Html.pointermove(Pha_Action.lensAction(function (dictStrong) {
                      return lens(dictStrong);
                  })(move)), Pha_Html.pointerup(Pha_Action.lensAction(function (dictStrong) {
                      return lens(dictStrong);
                  })(Pha_Action.action(Data_Lens_Setter.set(dragLens(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)))), Pha_Html.pointerleave(Pha_Action.lensAction(function (dictStrong) {
                      return lens(dictStrong);
                  })(leave)), Pha_Html.pointerdown(Pha_Action.lensAction(function (dictStrong) {
                      return lens(dictStrong);
                  })(move)) ];
              };
          };
      };
  };
  var cursorStyle = function (v) {
      return function (rows) {
          return function (columns) {
              return function (size) {
                  return [ Pha_Html.style("left")(Data_Show.show(Data_Show.showNumber)(v.left) + "px"), Pha_Html.style("top")(Data_Show.show(Data_Show.showNumber)(v.top) + "px"), Pha_Html.style("width")(Data_Show.show(Data_Show.showNumber)(size / Data_Int.toNumber(columns)) + "%"), Pha_Html.style("height")(Data_Show.show(Data_Show.showNumber)(size / Data_Int.toNumber(rows)) + "%") ];
              };
          };
      };
  };
  var card = function (title) {
      return function (children) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-card")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-head ui-flex-center")(true) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-title")(true) ])([ Pha.text(title) ]) ]), Pha_Html["div'"]([ Pha_Html["class'"]("ui-card-body")(true) ])(children) ]);
      };
  };
  exports["card"] = card;
  exports["gridStyle"] = gridStyle;
  exports["incDecGrid"] = incDecGrid;
  exports["template"] = template;
  exports["cursorStyle"] = cursorStyle;
  exports["svgCursorStyle"] = svgCursorStyle;
  exports["trackPointer"] = trackPointer;
  exports["dndBoardProps"] = dndBoardProps;
  exports["dndItemProps"] = dndItemProps;
  exports["turnMessage"] = turnMessage;
  exports["winTitleFor2Players"] = winTitleFor2Players;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Baseball.View"] = $PS["Game.Baseball.View"] || {};
  var exports = $PS["Game.Baseball.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var translatePeg = function (position) {
      return function (nbBases) {
          var mid = Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var x = 42.0 + 35.0 * $$Math.cos((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases)) + 10.0 * Data_Int.toNumber(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(position)(2));
          var y = 46.0 + 35.0 * $$Math.sin((mid * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Html.translate(x)(y);
      };
  };
  var transformBase = function (i) {
      return function (nbBases) {
          var y = 50.0 + 35.0 * $$Math.sin((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          var x = 50.0 + 35.0 * $$Math.cos((Data_Int.toNumber(i) * 2.0 * $$Math.pi) / Data_Int.toNumber(nbBases));
          return Pha_Html.translate(x)(y) + " rotate(45deg)";
      };
  };
  var colors = [ "blue", "red", "green", "magenta", "orange", "black", "cyan", "gray" ];
  var dupColors = Control_Bind.bind(Control_Bind.bindArray)(colors)(function (x) {
      return [ x, x ];
  });
  var view = function (lens) {
      return function (state) {
          var rules = [ Pha.text("blah blah blah blah") ];
          var nbBases = Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_nbBases"](Data_Lens_Internal_Forget.strongForget));
          var levelFinished = Game_Core.isLevelFinished(Game_Baseball_Model.baseballGame)(state);
          var config = UI_Template.card("Baseball multicolore")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Nombres de bases")([ 4, 5, 6, 7, 8 ])(nbBases)(Game_Baseball_Model.setNbBases)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = Pha_Html["div'"]([ Pha_Html["class'"]("ui-board baseball-board")(true) ])([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html.viewBox("0 0 100 100") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.mapWithIndex(function (i) {
              return function (color) {
                  return Pha_Html.rect(-10.0)(-10.0)(20.0)(20.0)([ Pha_Html.key("b" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html["class'"]("baseball-base")(true), Pha_Html.stroke(color), Pha_Html.style("transform")(transformBase(i)(nbBases)) ]);
              };
          })(Data_Array.take(nbBases)(colors)))(Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(dupColors)(function (peg) {
              return function (pos) {
                  return function (color) {
                      return Pha.whenN(peg !== Data_Lens_Getter.viewOn(state)(Game_Baseball_Model["_missingPeg"](Data_Lens_Internal_Forget.strongForget)))(function (v) {
                          return Pha_Html.g([ Pha_Html["class'"]("baseball-player")(true), Pha_Html.style("transform")(translatePeg(pos)(nbBases)), Pha_Html.key("p" + Data_Show.show(Data_Show.showInt)(peg)) ])([ Pha_Html.use(0.0)(0.0)(7.0)(7.0)("#meeple")([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Core.playA(Game_Baseball_Model.baseballGame)(peg))), Pha_Html.fill(color), Pha_Html.style("animation")((function () {
                              if (levelFinished) {
                                  return "baseballHola 4s linear " + (Data_Show.show(Data_Show.showInt)(1000 + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(2000 * peg | 0)(nbBases) | 0) + "ms infinite");
                              };
                              return "none";
                          })()), Pha_Html.style("cursor")((function () {
                              var $6 = Game_Core.canPlay(Game_Baseball_Model.baseballGame)(state)(peg);
                              if ($6) {
                                  return "pointer";
                              };
                              return "not-allowed";
                          })()) ]) ]);
                      });
                  };
              };
          }))) ]);
          return UI_Template.template(Game_Baseball_Model.baseballGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "GAGN\xc9"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Baseball"] = $PS["Game.Baseball"] || {};
  var exports = $PS["Game.Baseball"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Baseball_Model = $PS["Game.Baseball.Model"];
  var Game_Baseball_View = $PS["Game.Baseball.View"];
  var Game_Core = $PS["Game.Core"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Baseball_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Baseball_Model.baseballGame)(v));
  }, function (v) {
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  }, function (lens) {
      return function (v) {
          return Game_Baseball_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Chocolat.Model"] = $PS["Game.Chocolat.Model"] || {};
  var exports = $PS["Game.Chocolat.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];                
  var CornerMode = (function () {
      function CornerMode() {

      };
      CornerMode.value = new CornerMode();
      return CornerMode;
  })();
  var BorderMode = (function () {
      function BorderMode() {

      };
      BorderMode.value = new BorderMode();
      return BorderMode;
  })();
  var StandardMode = (function () {
      function StandardMode() {

      };
      StandardMode.value = new StandardMode();
      return StandardMode;
  })();
  var FromLeft = (function () {
      function FromLeft(value0) {
          this.value0 = value0;
      };
      FromLeft.create = function (value0) {
          return new FromLeft(value0);
      };
      return FromLeft;
  })();
  var FromRight = (function () {
      function FromRight(value0) {
          this.value0 = value0;
      };
      FromRight.create = function (value0) {
          return new FromRight(value0);
      };
      return FromRight;
  })();
  var FromTop = (function () {
      function FromTop(value0) {
          this.value0 = value0;
      };
      FromTop.create = function (value0) {
          return new FromTop(value0);
      };
      return FromTop;
  })();
  var FromBottom = (function () {
      function FromBottom(value0) {
          this.value0 = value0;
      };
      FromBottom.create = function (value0) {
          return new FromBottom(value0);
      };
      return FromBottom;
  })();
  var showSoapMode = new Data_Show.Show(function (v) {
      return "";
  });
  var istate = Game_Core.genState({
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
  })(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 6,
          nbColumns: 7,
          customSize: v.customSize,
          mode: Game_Core.RandomMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      soap: {
          row: 0,
          col: 0
      },
      soapMode: CornerMode.value
  });
  var eqSoapMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof CornerMode && y instanceof CornerMode) {
              return true;
          };
          if (x instanceof BorderMode && y instanceof BorderMode) {
              return true;
          };
          if (x instanceof StandardMode && y instanceof StandardMode) {
              return true;
          };
          return false;
      };
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _soap = function (dictStrong) {
      var $71 = _ext(dictStrong);
      var $72 = Data_Lens_Lens.lens(function (v) {
          return v.soap;
      })(function (v) {
          return function (v1) {
              return {
                  soap: v1,
                  soapMode: v.soapMode
              };
          };
      })(dictStrong);
      return function ($73) {
          return $71($72($73));
      };
  };
  var _soapMode = function (dictStrong) {
      var $74 = _ext(dictStrong);
      var $75 = Data_Lens_Lens.lens(function (v) {
          return v.soapMode;
      })(function (v) {
          return function (v1) {
              return {
                  soapMode: v1,
                  soap: v.soap
              };
          };
      })(dictStrong);
      return function ($76) {
          return $74($75($76));
      };
  };
  var chocolat2Game = new Game_Core.TwoPlayersGame(function () {
      return chocolatGame;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return ((v1.col - v.left | 0) ^ ((v.right - v1.col | 0) - 1 | 0) ^ (v1.row - v.top | 0) ^ ((v.bottom - v1.row | 0) - 1 | 0)) === 0;
  }, function (st) {
      var v = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var v1 = Data_Lens_Getter.viewOn(st)(_soap(Data_Lens_Internal_Forget.strongForget));
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.left + 1 | 0)(v1.col))(FromLeft.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.col + 1 | 0)(v.right - 1 | 0))(FromRight.create))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v.top + 1 | 0)(v1.row))(FromTop.create))(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util["range'"](v1.row + 1 | 0)(v.bottom - 1 | 0))(FromBottom.create))));
  });
  var chocolatGame = new Game_Core.Game(function (v) {
      return function (v1) {
          return true;
      };
  }, Game_Core["computerMove'"](chocolat2Game), function (st) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)({
          left: 0,
          right: Data_Lens_Getter.viewOn(st)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)),
          top: 0,
          bottom: Data_Lens_Getter.viewOn(st)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))
      });
  }, (function () {
      var $77 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($78) {
          return (function (v) {
              return v.left === (v.right - 1 | 0) && v.top === (v.bottom - 1 | 0);
          })($77($78));
      };
  })(), function (state) {
      return Control_Bind.bind(Lib_Random.bindRandom)((function () {
          var $62 = Data_Eq.eq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(StandardMode.value);
          if ($62) {
              return Lib_Random.randomInt(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          };
          return Control_Applicative.pure(Lib_Random.applicativeRandom)(0);
      })())(function (v) {
          return Control_Bind.bind(Lib_Random.bindRandom)((function () {
              var $64 = Data_Eq.notEq(eqSoapMode)(Data_Lens_Getter.viewOn(state)(_soapMode(Data_Lens_Internal_Forget.strongForget)))(CornerMode.value);
              if ($64) {
                  return Lib_Random.randomInt(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)));
              };
              return Control_Applicative.pure(Lib_Random.applicativeRandom)(0);
          })())(function (v1) {
              return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_soap(Data_Profunctor_Strong.strongFn))({
                  row: v,
                  col: v1
              })(state));
          });
      });
  }, function (st) {
      var p = Data_Lens_Getter.viewOn(st)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function (v) {
          if (v instanceof FromLeft) {
              return {
                  left: v.value0,
                  top: p.top,
                  right: p.right,
                  bottom: p.bottom
              };
          };
          if (v instanceof FromTop) {
              return {
                  left: p.left,
                  top: v.value0,
                  right: p.right,
                  bottom: p.bottom
              };
          };
          if (v instanceof FromRight) {
              return {
                  left: p.left,
                  top: p.top,
                  right: v.value0,
                  bottom: p.bottom
              };
          };
          if (v instanceof FromBottom) {
              return {
                  left: p.left,
                  top: p.top,
                  right: p.right,
                  bottom: v.value0
              };
          };
          throw new Error("Failed pattern match at Game.Chocolat.Model (line 38, column 15 - line 42, column 42): " + [ v.constructor.name ]);
      };
  }, Data_Function["const"](new Game_Core.SizeLimit(4, 4, 10, 10)));
  var setSoapModeA = Game_Core["newGame'"](chocolatGame)(Data_Lens_Setter.set(_soapMode(Data_Profunctor_Strong.strongFn)));
  exports["FromLeft"] = FromLeft;
  exports["FromRight"] = FromRight;
  exports["FromTop"] = FromTop;
  exports["FromBottom"] = FromBottom;
  exports["CornerMode"] = CornerMode;
  exports["BorderMode"] = BorderMode;
  exports["StandardMode"] = StandardMode;
  exports["_soap"] = _soap;
  exports["_soapMode"] = _soapMode;
  exports["istate"] = istate;
  exports["setSoapModeA"] = setSoapModeA;
  exports["eqSoapMode"] = eqSoapMode;
  exports["showSoapMode"] = showSoapMode;
  exports["chocolatGame"] = chocolatGame;
  exports["chocolat2Game"] = chocolat2Game;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Chocolat.View"] = $PS["Game.Chocolat.View"] || {};
  var exports = $PS["Game.Chocolat.View"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var inside = function (state) {
      return function (row) {
          return function (col) {
              var v = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
              return col >= v.left && (col <= (v.right - 1 | 0) && (row >= v.top && row <= (v.bottom - 1 | 0)));
          };
      };
  };
  var view = function (lens) {
      return function (state) {
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var pos = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var v = Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soap"](Data_Lens_Internal_Forget.strongForget));
          var rules = [ Pha.text("A chaque tour de ce jeu, tu peux d\xe9placer une pile de jetons vers une case adjacente"), Pha_Html.br, Pha.text("qui contient au moins autant de jetons"), Pha_Html.br, Pha.text("Le but est de finir la partie avec le moins de cases contenant des piles de jetons.") ];
          var cutter = function (row) {
              return function (col) {
                  return function (move) {
                      return Pha_Html.circle(50.0 * Data_Int.toNumber(col))(50.0 * Data_Int.toNumber(row))(7.0)([ Pha_Html.key("c" + Data_Show.show(Data_Show.showInt)((row * (columns + 1 | 0) | 0) + col | 0)), Pha_Html["class'"]("chocolat-cutter")(true), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                          return lens(dictStrong);
                      })(Game_Core.playA(Game_Chocolat_Model.chocolatGame)(move))) ]);
                  };
              };
          };
          var grid = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(3))([ Pha_Html["class'"]("ui-board")(true) ]))([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html.viewBox("-7 -7 " + (Data_Show.show(Data_Show.showInt)((50 * columns | 0) + 14 | 0) + (" " + Data_Show.show(Data_Show.showInt)((50 * rows | 0) + 14 | 0)))) ])(Data_Array.concat([ Lib_Util.tabulate2(rows)(columns)(function (row) {
              return function (col) {
                  return Pha_Html.rect(50.0 * Data_Int.toNumber(col) + 7.0)(50.0 * Data_Int.toNumber(row) + 7.0)(36.0)(36.0)([ Pha_Html.key("choc" + Data_Show.show(Data_Show.showInt)((row * columns | 0) + col | 0)), Pha_Html["class'"]("chocolat-square")(true), Pha_Html["class'"]("soap")(row === v.row && col === v.col), Pha_Html["class'"]("hidden")(!inside(state)(row)(col)) ]);
              };
          }), [ Pha_Html.use(50.0 * Data_Int.toNumber(v.col) + 12.0)(50.0 * Data_Int.toNumber(v.row) + 12.0)(26.0)(26.0)("#skull")([ Pha_Html.key("skull"), Pha_Html.fill("#20AF20") ]) ], Control_Bind.bind(Control_Bind.bindArray)(Game_Core.possibleMoves(Game_Chocolat_Model.chocolat2Game)(state))(function (v1) {
              if (v1 instanceof Game_Chocolat_Model.FromLeft) {
                  return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromLeft(v1.value0)) ];
              };
              if (v1 instanceof Game_Chocolat_Model.FromRight) {
                  return [ cutter(pos.top)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)), cutter(pos.bottom)(v1.value0)(new Game_Chocolat_Model.FromRight(v1.value0)) ];
              };
              if (v1 instanceof Game_Chocolat_Model.FromTop) {
                  return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromTop(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromTop(v1.value0)) ];
              };
              if (v1 instanceof Game_Chocolat_Model.FromBottom) {
                  return [ cutter(v1.value0)(pos.left)(new Game_Chocolat_Model.FromBottom(v1.value0)), cutter(v1.value0)(pos.right)(new Game_Chocolat_Model.FromBottom(v1.value0)) ];
              };
              throw new Error("Failed pattern match at Game.Chocolat.View (line 59, column 41 - line 63, column 106): " + [ v1.constructor.name ]);
          }) ])) ]);
          var config = UI_Template.card("Barre de chocolat")([ UI_Icons.iconSizesGroup(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ new Data_Tuple.Tuple(6, 7) ])(true), UI_Icons.iconSelectGroup(Game_Chocolat_Model.showSoapMode)(Game_Chocolat_Model.eqSoapMode)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Emplacement du savon")([ Game_Chocolat_Model.CornerMode.value, Game_Chocolat_Model.BorderMode.value, Game_Chocolat_Model.StandardMode.value ])(Data_Lens_Getter.viewOn(state)(Game_Chocolat_Model["_soapMode"](Data_Lens_Internal_Forget.strongForget)))(Game_Chocolat_Model.setSoapModeA)(function (mode) {
              return function (opt) {
                  if (mode instanceof Game_Chocolat_Model.CornerMode) {
                      return {
                          icon: new UI_Icon.IconSymbol("#choc-mode0"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Dans le coin"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (mode instanceof Game_Chocolat_Model.BorderMode) {
                      return {
                          icon: new UI_Icon.IconSymbol("#choc-mode1"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Sur un bord"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (mode instanceof Game_Chocolat_Model.StandardMode) {
                      return {
                          icon: new UI_Icon.IconSymbol("#choc-mode2"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("N'importe o\xf9"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  throw new Error("Failed pattern match at Game.Chocolat.View (line 28, column 58 - line 31, column 100): " + [ mode.constructor.name ]);
              };
          }), UI_Icons.icons2Players(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = UI_Template.incDecGrid(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Chocolat_Model.chocolatGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "todo"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Chocolat"] = $PS["Game.Chocolat"] || {};
  var exports = $PS["Game.Chocolat"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Chocolat_Model = $PS["Game.Chocolat.Model"];
  var Game_Chocolat_View = $PS["Game.Chocolat.View"];
  var Game_Core = $PS["Game.Core"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Chocolat_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Chocolat_Model.chocolatGame)(v));
  }, function (v) {
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  }, function (lens) {
      return function (v) {
          return Game_Chocolat_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Lib.KonamiCode"] = $PS["Lib.KonamiCode"] || {};
  var exports = $PS["Lib.KonamiCode"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Pha_Action = $PS["Pha.Action"];                
  var codeSequence = "ArrowUp ArrowUp ArrowDown ArrowDown ArrowLeft ArrowRight ArrowLeft ArrowRight b a";
  var konamiCode = function (lens) {
      return function (onActivation) {
          return function (key) {
              return Pha_Action.asyncAction(function (v) {
                  return function (state) {
                      var seq = Data_Array.takeEnd(10)(Data_Function.flip(Data_Array.snoc)(key)(Data_Lens_Getter.viewOn(state)(lens(Data_Lens_Internal_Forget.strongForget))));
                      return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(Data_Lens_Setter.set(lens(Data_Profunctor_Strong.strongFn))(seq)))(function (v1) {
                          var $4 = Data_String_Common.joinWith(" ")(seq) === codeSequence;
                          if ($4) {
                              return v.dispatch(onActivation);
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1);
                      });
                  };
              });
          };
      };
  };
  exports["konamiCode"] = konamiCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Frog.Model"] = $PS["Game.Frog.Model"] || {};
  var exports = $PS["Game.Frog.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Game_Core = $PS["Game.Core"];
  var Lib_KonamiCode = $PS["Lib.KonamiCode"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];
  var winningPositions = function (size) {
      return function (moves) {
          var t = Lib_Util.tabulate(size)(function (i) {
              return Data_Lazy.defer(function (v) {
                  return i === 0 || Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (m) {
                      return Data_Maybe.maybe(false)((function () {
                          var $30 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                          return function ($31) {
                              return $30(Data_Lazy.force($31));
                          };
                      })())(Data_Array.index(t)(i - m | 0));
                  })(moves);
              });
          });
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(t)(Data_Lazy.force);
      };
  };
  var istate = Game_Core.genState(20)(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 20,
          nbColumns: v.nbColumns,
          customSize: v.customSize,
          mode: Game_Core.ExpertMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      moves: [ 1, 2, 3 ],
      winning: [  ],
      marked: [  ],
      keySequence: [  ]
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _keySequence = function (dictStrong) {
      var $32 = _ext(dictStrong);
      var $33 = Data_Lens_Lens.lens(function (v) {
          return v.keySequence;
      })(function (v) {
          return function (v1) {
              return {
                  keySequence: v1,
                  marked: v.marked,
                  moves: v.moves,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($34) {
          return $32($33($34));
      };
  };
  var _marked = function (dictStrong) {
      var $35 = _ext(dictStrong);
      var $36 = Data_Lens_Lens.lens(function (v) {
          return v.marked;
      })(function (v) {
          return function (v1) {
              return {
                  marked: v1,
                  keySequence: v.keySequence,
                  moves: v.moves,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($37) {
          return $35($36($37));
      };
  };
  var markA = function (i) {
      return Pha_Action.action(Data_Lens_Setter.over((function () {
          var $38 = _marked(Data_Profunctor_Strong.strongFn);
          var $39 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(i)(Data_Lens_Internal_Wander.wanderFunction);
          return function ($40) {
              return $38($39($40));
          };
      })())(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
  };
  var _moves = function (dictStrong) {
      var $41 = _ext(dictStrong);
      var $42 = Data_Lens_Lens.lens(function (v) {
          return v.moves;
      })(function (v) {
          return function (v1) {
              return {
                  moves: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  winning: v.winning
              };
          };
      })(dictStrong);
      return function ($43) {
          return $41($42($43));
      };
  };
  var _winning = function (dictStrong) {
      var $44 = _ext(dictStrong);
      var $45 = Data_Lens_Lens.lens(function (v) {
          return v.winning;
      })(function (v) {
          return function (v1) {
              return {
                  winning: v1,
                  keySequence: v.keySequence,
                  marked: v.marked,
                  moves: v.moves
              };
          };
      })(dictStrong);
      return function ($46) {
          return $44($45($46));
      };
  };
  var frogGame2 = new Game_Core.TwoPlayersGame(function () {
      return frogGame;
  }, function (state) {
      return Data_Maybe.fromMaybe(true)(Data_Array.index(Data_Lens_Getter.viewOn(state)(_winning(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  }, function (state) {
      return Data_Array.filter(Game_Core.canPlay(frogGame)(state))(Data_Array.range(0)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget))));
  });
  var frogGame = new Game_Core.Game(function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var moves = Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget));
          var maximum = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Ord.max(Data_Ord.ordInt))(0)(moves);
          return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(position - v | 0)(moves) || position > 0 && (v === 0 && position <= maximum);
      };
  }, Game_Core["computerMove'"](frogGame2), function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
  }, function (state) {
      return Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)) === 0;
  }, function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_marked(Data_Profunctor_Strong.strongFn))(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(false))(Data_Lens_Setter.set(_winning(Data_Profunctor_Strong.strongFn))(winningPositions(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(Data_Lens_Getter.viewOn(state)(_moves(Data_Lens_Internal_Forget.strongForget))))(state)));
  }, function (state) {
      return function (v) {
          return v;
      };
  }, function (v) {
      return new Game_Core.SizeLimit(5, 0, 30, 0);
  });
  var reachableArray = function (state) {
      return Lib_Util.tabulate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(Game_Core.canPlay(frogGame)(state));
  };
  var selectMoveA = (function () {
      var _selectMove = function (move) {
          return function (moves) {
              var moves2 = Data_Array.filter(function (m) {
                  return (m === move) !== Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(m)(moves);
              })(Data_Array.range(1)(5));
              var $29 = Data_Array["null"](moves2);
              if ($29) {
                  return moves;
              };
              return moves2;
          };
      };
      return Game_Core["newGame'"](frogGame)((function () {
          var $47 = Data_Lens_Setter.over(_moves(Data_Profunctor_Strong.strongFn));
          return function ($48) {
              return $47(_selectMove($48));
          };
      })());
  })();
  var onKeyDown = Lib_KonamiCode.konamiCode(function (dictStrong) {
      return _keySequence(dictStrong);
  })(Pha_Action.action(function (st) {
      return Data_Lens_Setter.set(_marked(Data_Profunctor_Strong.strongFn))(Data_Lens_Getter.viewOn(st)(_winning(Data_Lens_Internal_Forget.strongForget)))(st);
  }));
  exports["_moves"] = _moves;
  exports["_marked"] = _marked;
  exports["istate"] = istate;
  exports["selectMoveA"] = selectMoveA;
  exports["reachableArray"] = reachableArray;
  exports["markA"] = markA;
  exports["onKeyDown"] = onKeyDown;
  exports["frogGame"] = frogGame;
})(PS);
(function(exports) {
  exports.shiftKey = e => !!e.shiftKey;
  exports.unsafeToMaybeAux = nothing => just => x => x === null || x === undefined ? nothing :  just(x);
  exports.unsafeKey = e => e && e.key;
  exports.preventDefault = e => () => e && e.preventDefault && e.preventDefault()
})(PS["Pha.Event"] = PS["Pha.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Pha.Event"] = $PS["Pha.Event"] || {};
  var exports = $PS["Pha.Event"];
  var $foreign = $PS["Pha.Event"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Pha_Action = $PS["Pha.Action"];                
  var unsafeToMaybe = $foreign.unsafeToMaybeAux(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var preventDefaultA = Pha_Action.onlyEffectAction($foreign.preventDefault);
  var key = function ($1) {
      return unsafeToMaybe($foreign.unsafeKey($1));
  };
  exports["key"] = key;
  exports["preventDefaultA"] = preventDefaultA;
  exports["shiftKey"] = $foreign.shiftKey;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Frog.View"] = $PS["Game.Frog.View"] || {};
  var exports = $PS["Game.Frog.View"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Event = $PS["Pha.Event"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var spiralPointsPolar = function (n) {
      return Data_Array.reverse(Lib_Util.tabulate(n + 1 | 0)(function (i) {
          var theta = $$Math.sqrt((function () {
              var $13 = i === n;
              if ($13) {
                  return 21.0;
              };
              return (Data_Int.toNumber(i) * 20.0) / Data_Int.toNumber(n);
          })()) * 1.36 * $$Math.pi;
          var radius = (61.0 * theta) / (2.0 * $$Math.pi);
          return {
              theta: theta,
              radius: radius
          };
      }));
  };
  var polarToCartesian = function (v) {
      return {
          x: v.radius * $$Math.cos(v.theta),
          y: v.radius * $$Math.sin(v.theta)
      };
  };
  var spiralPoints = function (n) {
      return Data_Functor.mapFlipped(Data_Functor.functorArray)(spiralPointsPolar(n))(polarToCartesian);
  };
  var lineIntersection = function (m1) {
      return function (b1) {
          return function (m2) {
              return function (b2) {
                  var x = (b2 - b1) / (m1 - m2);
                  return {
                      x: x,
                      y: m1 * x + b1
                  };
              };
          };
      };
  };
  var spiral = function (center) {
      return function (startRadius) {
          return function (radiusStep) {
              return function (startTheta) {
                  return function (endTheta) {
                      return function (thetaStep) {
                          return Data_String_Common.joinWith(" ")(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
                              return function (v) {
                                  var v1 = lineIntersection(v.value0.slope)(v.value0.intercept)(v.value1.slope)(v.value1.intercept);
                                  var p = [ "Q", Data_Show.show(Data_Show.showNumber)(v1.x + center.x), Data_Show.show(Data_Show.showNumber)(v1.y + center.y), Data_Show.show(Data_Show.showNumber)(v.value1.point.x), Data_Show.show(Data_Show.showNumber)(v.value1.point.y) ];
                                  var $19 = i === 0;
                                  if ($19) {
                                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "M", Data_Show.show(Data_Show.showNumber)(v.value0.point.x), Data_Show.show(Data_Show.showNumber)(v.value0.point.y) ])(p);
                                  };
                                  return p;
                              };
                          })(Lib_Util.pairwise(Data_Functor.mapFlipped(Data_Functor.functorArray)(Lib_Util.floatRange(startTheta)(endTheta)(thetaStep))(function (theta) {
                              var b = radiusStep / (2.0 * $$Math.pi);
                              var r = startRadius + b * theta;
                              var point = {
                                  x: center.x + r * $$Math.cos(theta),
                                  y: center.y + r * $$Math.sin(theta)
                              };
                              var slope = (b * $$Math.sin(theta) + r * $$Math.cos(theta)) / (b * $$Math.cos(theta) - r * $$Math.sin(theta));
                              var intercept = -(slope * r * $$Math.cos(theta) - r * $$Math.sin(theta));
                              return {
                                  point: point,
                                  slope: slope,
                                  intercept: intercept
                              };
                          })))));
                      };
                  };
              };
          };
      };
  };
  var spiralPath = spiral({
      x: 0.0,
      y: 0.0
  })(0.0)(61.0)(0.0)((37.0 / 6.0) * $$Math.pi)($$Math.pi / 6.0);
  var lily = function (i) {
      return function (x) {
          return function (y) {
              return function (reachable) {
                  return function (hidden) {
                      return (function () {
                          var $24 = i === 0;
                          if ($24) {
                              return Pha_Html.use(x - 30.0)(y - 45.0)(80.0)(80.0);
                          };
                          return Pha_Html.use(x - 24.0)(y - 24.0)(48.0)(48.0);
                      })()("#lily")([ Pha_Html["class'"]("frog-lily")(true), Pha_Html["class'"]("reachable")(reachable), Pha_Html["class'"]("hidden")(hidden) ]);
                  };
              };
          };
      };
  };
  var view = function (lens) {
      return function (state) {
          var winTitle = UI_Template.winTitleFor2Players(state);
          var spoints = spiralPoints(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          var rules = [ Pha.text("Jeu de la grenouille"), Pha_Html.br, Pha.text("R\xe8gles pas encore d\xe9finies") ];
          var reachable = Game_Frog_Model.reachableArray(state);
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var pointsPolar = spiralPointsPolar(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)));
          var grid = Pha_Html["div'"]([ Pha_Html["class'"]("ui-board frog-board")(true) ])([ Pha_Html.svg([ Pha_Html.viewBox("-190 -200 400 400"), Pha_Html.height("100%"), Pha_Html.width("100%") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.path(spiralPath)([ Pha_Html.fill("none"), Pha_Html.stroke("black"), Pha_Html.strokeWidth("3") ]), Pha_Html.line(153.0)(9.0)(207.0)(20.0)([ Pha_Html.stroke("black"), Pha_Html.strokeDasharray("5"), Pha_Html.strokeWidth("6") ]), Pha_Html.line(153.0)(7.0)(153.0)(39.0)([ Pha_Html.stroke("black"), Pha_Html.strokeWidth("3") ]), Pha_Html.line(207.0)(18.0)(207.0)(50.0)([ Pha_Html.stroke("black"), Pha_Html.strokeWidth("3") ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.map2(spoints)(reachable)(function (i) {
              return function (v) {
                  return function (reach) {
                      return Pha_Html.g([ Pha_Html.key("lily" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                          return lens(dictStrong);
                      })(Pha_Action.ifThenElseA(Data_Function["const"](Pha_Event.shiftKey))(Game_Frog_Model.markA(i))(Game_Core.playA(Game_Frog_Model.frogGame)(i)))) ])([ lily(i)(v.x)(v.y)(false)(false), lily(i)(v.x)(v.y)(true)(!reach), Pha_Html["text'"](v.x)(v.y)((function () {
                          var $26 = Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget));
                          if ($26) {
                              return Data_Show.show(Data_Show.showInt)(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) - i | 0);
                          };
                          return "";
                      })())([ Pha_Html["class'"]("frog-index")(true) ]) ]);
                  };
              };
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.map2(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_marked"](Data_Lens_Internal_Forget.strongForget)))(spoints)(function (i) {
              return function (mark) {
                  return function (v) {
                      return Pha.whenN(mark && i !== position)(function (v1) {
                          return Pha_Html.use(v.x - 20.0)(v.y - 20.0)(32.0)(32.0)("#frog2")([ Pha_Html.key("reach" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html["class'"]("frog-frog marked")(true) ]);
                      });
                  };
              };
          }))([ (function () {
              var v = Data_Maybe.fromMaybe({
                  radius: 0.0,
                  theta: 0.0
              })(Data_Array.index(pointsPolar)(position));
              return Pha_Html.g([ Pha_Html.key("frog"), Pha_Html["class'"]("frog-frog-container")(true), Pha_Html.style("transform")(Pha_Html.translate(v.radius)(0.0) + (" rotate(" + (Data_Show.show(Data_Show.showNumber)((v.theta * 180.0) / $$Math.pi) + "deg)"))), Pha_Html.style("transform-origin")(Data_Show.show(Data_Show.showNumber)(-v.radius) + "px 0") ])([ Pha_Html.g([ Pha_Html["class'"]("frog-frog-container")(true), Pha_Html.style("transform")("rotate(" + (Data_Show.show(Data_Show.showNumber)((-v.theta * 180.0) / $$Math.pi) + "deg)")) ])([ Pha_Html.use(-20.0)(-20.0)(40.0)(40.0)("#frog2")([ Pha_Html["class'"]("frog-frog")(true), Pha_Html["class'"]("goal")(position === 0) ]) ]) ]);
          })() ])))), Pha_Html.span([  ])([ Pha.text(UI_Template.turnMessage(Game_Frog_Model.frogGame)(state)) ]) ]);
          var config = UI_Template.card("La grenouille")([ UI_Icons.iconSelectGroupM(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("D\xe9placements autoris\xe9s")([ 1, 2, 3, 4, 5 ])(Data_Lens_Getter.viewOn(state)(Game_Frog_Model["_moves"](Data_Lens_Internal_Forget.strongForget)))(Game_Frog_Model.selectMoveA)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icons2Players(Game_Frog_Model.frogGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp, UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = UI_Template.incDecGrid(Game_Frog_Model.frogGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Frog_Model.frogGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: winTitle
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Frog"] = $PS["Game.Frog"] || {};
  var exports = $PS["Game.Frog"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Frog_Model = $PS["Game.Frog.Model"];
  var Game_Frog_View = $PS["Game.Frog.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Frog_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Frog_Model.frogGame)(v));
  }, function (a) {
      return Pha_Action.lensAction(function (dictStrong) {
          return is(dictStrong.Profunctor0());
      })(Game_Frog_Model.onKeyDown(a));
  }, function (lens) {
      return function (v) {
          return Game_Frog_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Jetons.Model"] = $PS["Game.Jetons.Model"] || {};
  var exports = $PS["Game.Jetons.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var jetonsGame = new Game_Core.Game(function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var v1 = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v.from)(v.to);
          return Data_Maybe.fromMaybe(false)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (pfrom) {
              return function (pto) {
                  return pfrom > 0 && (pfrom <= pto && ((v1.row * v1.row | 0) + (v1.col * v1.col | 0) | 0) === 1);
              };
          })(Data_Array.index(position)(v.from)))(Data_Array.index(position)(v.to)));
      };
  }, function (v) {
      return Data_Maybe.Nothing.value;
  }, function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(1));
  }, function (state) {
      var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (i) {
          var z = Data_Maybe.fromMaybe(0)(Data_Array.index(position)(i + columns | 0));
          var y = (function () {
              var $22 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i + 1 | 0)(columns) === 0;
              if ($22) {
                  return 0;
              };
              return Data_Maybe.fromMaybe(0)(Data_Array.index(position)(i + 1 | 0));
          })();
          var x = Data_Maybe.fromMaybe(0)(Data_Array.index(position)(i));
          return (x * (y + z | 0) | 0) === 0;
      })(Lib_Util["range'"](0)(Data_Array.length(position) - 1 | 0));
  }, Game_Core.defaultOnNewGame, function (state) {
      return function (v) {
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          return Data_Maybe.fromMaybe(position)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v.from))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.updateAt(v.from)(0)(position))(Data_Array.modifyAt(v.to)(Data_Semiring.add(Data_Semiring.semiringInt)(v1)));
          }));
      };
  }, function (v) {
      return new Game_Core.SizeLimit(1, 2, 6, 12);
  });
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 4,
          nbColumns: 4,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      dragged: Data_Maybe.Nothing.value
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _dragged = function (dictStrong) {
      var $34 = _ext(dictStrong);
      var $35 = Data_Lens_Lens.lens(function (v) {
          return v.dragged;
      })(function (v) {
          return function (v1) {
              return {
                  dragged: v1
              };
          };
      })(dictStrong);
      return function ($36) {
          return $34($35($36));
      };
  };
  exports["istate"] = istate;
  exports["_dragged"] = _dragged;
  exports["jetonsGame"] = jetonsGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Jetons.View"] = $PS["Game.Jetons.View"] || {};
  var exports = $PS["Game.Jetons.View"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Jetons_Model = $PS["Game.Jetons.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var view = function (lens) {
      return function (state) {
          var rules = [ Pha.text("A chaque tour de ce jeu, tu peux d\xe9placer une pile de jetons vers une case adjacente"), Pha_Html.br, Pha.text("qui contient au moins autant de jetons"), Pha_Html.br, Pha.text("Le but est de finir la partie avec le moins de cases contenant des piles de jetons.") ];
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var nbNonEmptyCells = Data_Array.length(Data_Array.filter(function (v) {
              return v > 0;
          })(position));
          var s = (function () {
              var $12 = nbNonEmptyCells > 1;
              if ($12) {
                  return "s";
              };
              return "";
          })();
          var winTitle = Data_Show.show(Data_Show.showInt)(nbNonEmptyCells) + (" case" + (s + (" restante" + s)));
          var config = UI_Template.card("Jeu des jetons")([ UI_Icons.iconSizesGroup(Game_Jetons_Model.jetonsGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ new Data_Tuple.Tuple(2, 2), new Data_Tuple.Tuple(4, 4), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(6, 6) ])(true), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var cursor = function (pp) {
              return function (v) {
                  return Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-cursor jetons-cursor")(true) ])(UI_Template.cursorStyle(pp)(rows)(columns)(60.0)))([  ]);
              };
          };
          var piece = function (i) {
              return function (val) {
                  return function (props) {
                      var v = Lib_Util.coords(columns)(i);
                      return Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.key(Data_Show.show(Data_Show.showInt)(i)), Pha_Html["class'"]("jetons-peg")(true), Pha_Html["class'"]("small")(columns >= 8), Pha_Html.style("background-color")(Pha_Html.rgbColor(255)(Data_Int.floor(255.0 * (1.0 - $$Math.sqrt(Data_Int.toNumber(val) / Data_Int.toNumber(rows * columns | 0)))))(0)), Pha_Html.style("left")(Data_Show.show(Data_Show.showNumber)((15.0 + Data_Int.toNumber(v.col) * 100.0) / Data_Int.toNumber(columns)) + "%"), Pha_Html.style("top")(Data_Show.show(Data_Show.showNumber)((15.0 + Data_Int.toNumber(v.row) * 100.0) / Data_Int.toNumber(rows)) + "%"), Pha_Html.style("width")(Data_Show.show(Data_Show.showNumber)(70.0 / Data_Int.toNumber(columns)) + "%"), Pha_Html.style("height")(Data_Show.show(Data_Show.showNumber)(70.0 / Data_Int.toNumber(rows)) + "%"), Pha_Html.style("box-shadow")(Data_Show.show(Data_Show.showInt)(val * 2 | 0) + ("px " + (Data_Show.show(Data_Show.showInt)(val * 2 | 0) + "px 5px 0px #656565"))) ])(props))([ Pha_Html.span([  ])([ Pha.text(Data_Show.show(Data_Show.showInt)(val)) ]) ]);
                  };
              };
          };
          var board = UI_Template.incDecGrid(Game_Jetons_Model.jetonsGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-board")(true) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.dndBoardProps(Data_Eq.eqInt)(Game_Jetons_Model.jetonsGame)(function (dictStrong) {
              return lens(dictStrong);
          })(function (dictStrong) {
              return Game_Jetons_Model["_dragged"](dictStrong);
          }))(UI_Template.gridStyle(rows)(columns)(3))))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.mapWithIndex(function (i) {
              return function (val) {
                  return Pha.whenN(val !== 0)(function (v) {
                      return piece(i)(val)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.key(Data_Show.show(Data_Show.showInt)(i)) ])(UI_Template.dndItemProps(Data_Eq.eqInt)(Game_Jetons_Model.jetonsGame)(function (dictStrong) {
                          return lens(dictStrong);
                      })(function (dictStrong) {
                          return Game_Jetons_Model["_dragged"](dictStrong);
                      })(true)(true)(i)(state)));
                  });
              };
          })(position))([ Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Getter.viewOn(state)(Game_Jetons_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)))) ])) ]);
          return UI_Template.template(Game_Jetons_Model.jetonsGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: winTitle
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Jetons"] = $PS["Game.Jetons"] || {};
  var exports = $PS["Game.Jetons"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Jetons_Model = $PS["Game.Jetons.Model"];
  var Game_Jetons_View = $PS["Game.Jetons.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Jetons_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Jetons_Model.jetonsGame)(v));
  }, function (v) {
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  }, function (lens) {
      return function (v) {
          return Game_Jetons_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Nim.Model"] = $PS["Game.Nim.Model"] || {};
  var exports = $PS["Game.Nim.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = $PS["Data.Int.Bits"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];                
  var Move = (function () {
      function Move(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Move.create = function (value0) {
          return function (value1) {
              return new Move(value0, value1);
          };
      };
      return Move;
  })();
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: v.nbRows,
          nbColumns: v.nbColumns,
          customSize: v.customSize,
          mode: Game_Core.ExpertMode.value,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      length: 10,
      nbPiles: 4
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _length = function (dictStrong) {
      var $53 = _ext(dictStrong);
      var $54 = Data_Lens_Lens.lens(function (v) {
          return v.length;
      })(function (v) {
          return function (v1) {
              return {
                  length: v1,
                  nbPiles: v.nbPiles
              };
          };
      })(dictStrong);
      return function ($55) {
          return $53($54($55));
      };
  };
  var _nbPiles = function (dictStrong) {
      var $56 = _ext(dictStrong);
      var $57 = Data_Lens_Lens.lens(function (v) {
          return v.nbPiles;
      })(function (v) {
          return function (v1) {
              return {
                  nbPiles: v1,
                  length: v.length
              };
          };
      })(dictStrong);
      return function ($58) {
          return $56($57($58));
      };
  };
  var nimGame2 = new Game_Core.TwoPlayersGame(function () {
      return nimGame;
  }, (function () {
      var $59 = Data_Eq.eq(Data_Eq.eqInt)(0);
      var $60 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (t) {
          return Data_Int_Bits.xor((Data_Tuple.snd(t) - Data_Tuple.fst(t) | 0) - 1 | 0);
      })(0);
      var $61 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($62) {
          return $59($60($61($62)));
      };
  })(), function (state) {
      return Data_Array.sortWith(Data_Ord.ordInt)(function (v) {
          return Data_Maybe.maybe(0)(function (x) {
              var $27 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 0;
              if ($27) {
                  return Data_Tuple.fst(x) - v.value1 | 0;
              };
              return v.value1 - Data_Tuple.snd(x) | 0;
          })(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v.value0));
      })(Data_Array.filter(Game_Core.canPlay(nimGame)(state))(Lib_Util.tabulate2(Data_Lens_Getter.viewOn(state)(_nbPiles(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)))(Move.create)));
  });
  var nimGame = new Game_Core.Game(function (state) {
      return function (v) {
          return Data_Maybe.maybe(false)(function (v1) {
              return v.value1 !== v1.value0 && (v.value1 !== v1.value1 && (function () {
                  var $33 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 0;
                  if ($33) {
                      return v.value1 < v1.value1;
                  };
                  return v.value1 > v1.value0;
              })());
          })(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v.value0));
      };
  }, Game_Core["computerMove'"](nimGame2), function (state) {
      return Data_Traversable.sequence(Data_Traversable.traversableArray)(Lib_Random.applicativeRandom)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(_nbPiles(Data_Lens_Internal_Forget.strongForget)))((function () {
          var $38 = Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)) === 5;
          if ($38) {
              return Control_Applicative.pure(Lib_Random.applicativeRandom)(new Data_Tuple.Tuple(0, 4));
          };
          return Control_Bind.bind(Lib_Random.bindRandom)(Lib_Random.randomInt(5))(function (v) {
              return Control_Bind.bind(Lib_Random.bindRandom)(Lib_Random.randomInt(5))(function (v1) {
                  return Control_Applicative.pure(Lib_Random.applicativeRandom)(new Data_Tuple.Tuple(v, v1 + 5 | 0));
              });
          });
      })()));
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return (v.value1 - v.value0 | 0) === 1 && v.value0 === (function () {
              var $42 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 1;
              if ($42) {
                  return Data_Lens_Getter.viewOn(state)(_length(Data_Lens_Internal_Forget.strongForget)) - 2 | 0;
              };
              return 0;
          })();
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  }, Game_Core.defaultOnNewGame, function (state) {
      return function (v) {
          return Data_Lens_Setter.over(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction))(function (v1) {
              var $48 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 0;
              if ($48) {
                  return new Data_Tuple.Tuple(v.value1, v1.value1);
              };
              return new Data_Tuple.Tuple(v1.value0, v.value1);
          })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, Game_Core.defaultSizeLimit);
  var setLengthA = Game_Core["newGame'"](nimGame)(Data_Lens_Setter.set(_length(Data_Profunctor_Strong.strongFn)));
  var setNbPilesA = Game_Core["newGame'"](nimGame)(Data_Lens_Setter.set(_nbPiles(Data_Profunctor_Strong.strongFn)));
  exports["Move"] = Move;
  exports["istate"] = istate;
  exports["_length"] = _length;
  exports["_nbPiles"] = _nbPiles;
  exports["setNbPilesA"] = setNbPilesA;
  exports["setLengthA"] = setLengthA;
  exports["nimGame"] = nimGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Nim.View"] = $PS["Game.Nim.View"] || {};
  var exports = $PS["Game.Nim.View"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var view = function (lens) {
      return function (state) {
          var winTitle = "Les " + ((function () {
              var $6 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 1;
              if ($6) {
                  return "bleu";
              };
              return "rouge";
          })() + "s gagnent");
          var rules = [ Pha.text("Essaie de bloquer ton adversaire"), Pha_Html.br, Pha.text("A chaque tour, tu peux d\xe9placer un de tes jetons vers la gauche ou vers la droite"), Pha_Html.br, Pha.text("d'autant de cases que tu veux mais tu ne peux pas sauter par dessus le jeton adversaire."), Pha_Html.br, Pha.text("Tu es oblig\xe9 de d\xe9placer un jeton d'au moins une case, tu ne peux pas passer ton tour."), Pha_Html.br, Pha.text("Tu gagnes la partie si ton adversaire n'a aucun mouvement possible.") ];
          var nbPiles = Data_Lens_Getter.viewOn(state)(Game_Nim_Model["_nbPiles"](Data_Lens_Internal_Forget.strongForget));
          var length = Data_Lens_Getter.viewOn(state)(Game_Nim_Model["_length"](Data_Lens_Internal_Forget.strongForget));
          var config = UI_Template.card("Poker Nim")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Nombre de rang\xe9es")([ 1, 2, 3, 4, 5 ])(nbPiles)(Game_Nim_Model.setNbPilesA)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Taille des rang\xe9es")([ 10, 5 ])(length)(Game_Nim_Model.setLengthA)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icons2Players(Game_Nim_Model.nimGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = Pha_Html["div'"]([ Pha_Html["class'"]("ui-board nim-board")(true) ])([ Pha_Html.svg([ Pha_Html.viewBox("0 0 100 100"), Pha_Html.height("100%"), Pha_Html.width("100%") ])(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
              return function (pile) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.rect((function () {
                      var $7 = length === 5;
                      if ($7) {
                          return 25.0;
                      };
                      return 0.0;
                  })())(Data_Int.toNumber(10 + (19 * i | 0) | 0))((function () {
                      var $8 = length === 5;
                      if ($8) {
                          return 50.0;
                      };
                      return 100.0;
                  })())(10.0)([ Pha_Html.key("pile" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html.fill("snow") ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.tabulate(length)(function (j) {
                      return Pha_Html.rect(-2.5)(-2.5)(5.0)(5.0)([ Pha_Html.key("base-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(j)))), Pha_Html.fill("gray"), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                          return lens(dictStrong);
                      })(Game_Core.playA(Game_Nim_Model.nimGame)(new Game_Nim_Model.Move(i, j)))), Pha_Html.style("transform")(Pha_Html.translate(Data_Int.toNumber((function () {
                          var $9 = length === 5;
                          if ($9) {
                              return 30;
                          };
                          return 5;
                      })() + (10 * j | 0) | 0))(Data_Int.toNumber(15 + (19 * i | 0) | 0)) + " rotate(45deg)"), Pha_Html.style("cursor")((function () {
                          var $10 = Game_Core.canPlay(Game_Nim_Model.nimGame)(state)(new Game_Nim_Model.Move(i, j));
                          if ($10) {
                              return "pointer";
                          };
                          return "not-allowed";
                      })()) ]);
                  }))(Data_Array.mapWithIndex(function (j) {
                      return function (peg) {
                          return Pha_Html.use(0.0)(0.0)(8.0)(8.0)("#meeple")([ Pha_Html.key("p-" + (Data_Show.show(Data_Show.showInt)(i) + ("-" + Data_Show.show(Data_Show.showInt)(j)))), Pha_Html["class'"]("nim-player")(true), Pha_Html.fill((function () {
                              var $11 = j === 0;
                              if ($11) {
                                  return "blue";
                              };
                              return "red";
                          })()), Pha_Html.style("transform")(Pha_Html.translate(Data_Int.toNumber((function () {
                              var $12 = length === 5;
                              if ($12) {
                                  return 26;
                              };
                              return 1;
                          })() + (10 * peg | 0) | 0))(Data_Int.toNumber(11 + (19 * i | 0) | 0))) ]);
                      };
                  })([ Data_Tuple.fst(pile), Data_Tuple.snd(pile) ])));
              };
          })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))))), Pha_Html.span([ Pha_Html["class'"]("nim-turn-message")(true) ])([ Pha.text((function () {
              var $13 = Game_Core.isLevelFinished(Game_Nim_Model.nimGame)(state);
              if ($13) {
                  return "Partie finie";
              };
              var $14 = Data_Lens_Getter.viewOn(state)(Game_Core["_turn"](Data_Lens_Internal_Forget.strongForget)) === 0;
              if ($14) {
                  return "Tour du joueur bleu";
              };
              return "Tour du joueur rouge";
          })()) ]) ]);
          return UI_Template.template(Game_Nim_Model.nimGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: winTitle
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Nim"] = $PS["Game.Nim"] || {};
  var exports = $PS["Game.Nim"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Nim_Model = $PS["Game.Nim.Model"];
  var Game_Nim_View = $PS["Game.Nim.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Nim_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Nim_Model.nimGame)(v));
  }, function (v) {
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  }, function (lens) {
      return function (v) {
          return Game_Nim_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Noirblanc.Model"] = $PS["Game.Noirblanc.Model"] || {};
  var exports = $PS["Game.Noirblanc.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Game_Core = $PS["Game.Core"];
  var Lib_KonamiCode = $PS["Lib.KonamiCode"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];
  var sizes = [ new Data_Tuple.Tuple(3, 3), new Data_Tuple.Tuple(4, 4), new Data_Tuple.Tuple(2, 10), new Data_Tuple.Tuple(3, 10), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(8, 8), new Data_Tuple.Tuple(8, 8) ];
  var istate = Game_Core.genState({
      light: [  ],
      played: [  ]
  })(Control_Category.identity(Control_Category.categoryFn))({
      level: 0,
      mode2: 0,
      maxLevels: [ 0, 1, 1, 0 ],
      keySequence: [  ]
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _keySequence = function (dictStrong) {
      var $60 = _ext(dictStrong);
      var $61 = Data_Lens_Lens.lens(function (v) {
          return v.keySequence;
      })(function (v) {
          return function (v1) {
              return {
                  keySequence: v1,
                  level: v.level,
                  maxLevels: v.maxLevels,
                  mode2: v.mode2
              };
          };
      })(dictStrong);
      return function ($62) {
          return $60($61($62));
      };
  };
  var _level = function (dictStrong) {
      var $63 = _ext(dictStrong);
      var $64 = Data_Lens_Lens.lens(function (v) {
          return v.level;
      })(function (v) {
          return function (v1) {
              return {
                  level: v1,
                  keySequence: v.keySequence,
                  maxLevels: v.maxLevels,
                  mode2: v.mode2
              };
          };
      })(dictStrong);
      return function ($65) {
          return $63($64($65));
      };
  };
  var _maxLevels = function (dictStrong) {
      var $66 = _ext(dictStrong);
      var $67 = Data_Lens_Lens.lens(function (v) {
          return v.maxLevels;
      })(function (v) {
          return function (v1) {
              return {
                  maxLevels: v1,
                  keySequence: v.keySequence,
                  level: v.level,
                  mode2: v.mode2
              };
          };
      })(dictStrong);
      return function ($68) {
          return $66($67($68));
      };
  };
  var onKeyDown = Lib_KonamiCode.konamiCode(function (dictStrong) {
      return _keySequence(dictStrong);
  })(Pha_Action.action(Data_Lens_Setter.set(_maxLevels(Data_Profunctor_Strong.strongFn))([ 6, 6, 6, 6 ])));
  var _mode2 = function (dictStrong) {
      var $69 = _ext(dictStrong);
      var $70 = Data_Lens_Lens.lens(function (v) {
          return v.mode2;
      })(function (v) {
          return function (v1) {
              return {
                  mode2: v1,
                  keySequence: v.keySequence,
                  level: v.level,
                  maxLevels: v.maxLevels
              };
          };
      })(dictStrong);
      return function ($71) {
          return $69($70($71));
      };
  };
  var neighbor = function (state) {
      return function (index1) {
          return function (index2) {
              var mode = Data_Lens_Getter.viewOn(state)(_mode2(Data_Lens_Internal_Forget.strongForget));
              var v = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(index1)(index2);
              return ((v.row * v.row | 0) + (v.col * v.col | 0) | 0) === 1 || (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(mode)(3) === 0 && index1 === index2 || mode >= 2 && (index1 !== index2 && (v.row * v.col | 0) === 0));
          };
      };
  };
  var toggleCell = function (state) {
      return function (index) {
          return Data_Array.mapWithIndex(function (i) {
              return function (color) {
                  return color !== neighbor(state)(index)(i);
              };
          });
      };
  };
  var genRandomBoard = function (state) {
      var size = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0;
      return Control_Bind.bind(Lib_Random.bindRandom)(Lib_Random.randomInt(size + 1 | 0))(function (v) {
          return Control_Bind.bind(Lib_Random.bindRandom)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Lib_Random.applicativeRandom)(Data_Array.replicate(v)(Lib_Random.randomInt(size))))(function (v1) {
              return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Foldable.foldr(Data_Foldable.foldableArray)(toggleCell(state))(Data_Array.replicate(size)(true))(v1));
          });
      });
  };
  var noirblancGame = new Game_Core.Game(function (v) {
      return function (v1) {
          return true;
      };
  }, function (v) {
      return Data_Maybe.Nothing.value;
  }, function (state) {
      var size = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0;
      return Control_Bind.bind(Lib_Random.bindRandom)((function () {
          var $45 = Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget)) >= 6;
          if ($45) {
              return genRandomBoard(state);
          };
          return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Array.replicate(size)(true));
      })())(function (v) {
          return Control_Applicative.pure(Lib_Random.applicativeRandom)({
              light: v,
              played: Data_Array.replicate(size)(false)
          });
      });
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))((Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))).light);
  }, function (state) {
      var v = Data_Maybe.fromMaybe(new Data_Tuple.Tuple(8, 8))(Data_Array.index(sizes)(Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget))));
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(v.value1)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(v.value0)(state)));
  }, function (state) {
      return function (index) {
          var v = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          return {
              light: toggleCell(state)(index)(v.light),
              played: Data_Array.modifyAtIndices(Data_Foldable.foldableArray)([ index ])(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(v.played)
          };
      };
  }, function (v) {
      return new Game_Core.SizeLimit(3, 3, 10, 10);
  });
  var afterPlay = Pha_Action.asyncAction(function (v) {
      return function (state) {
          var mode = Data_Lens_Getter.viewOn(state)(_mode2(Data_Lens_Internal_Forget.strongForget));
          var $54 = Game_Core.isLevelFinished(noirblancGame)(state);
          if ($54) {
              var nextLevel = (function () {
                  var $55 = Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget)) >= 4;
                  if ($55) {
                      return 6;
                  };
                  return Data_Lens_Getter.viewOn(state)(_level(Data_Lens_Internal_Forget.strongForget)) + (function () {
                      var $56 = mode === 0 || mode === 3;
                      if ($56) {
                          return 1;
                      };
                      return 2;
                  })() | 0;
              })();
              return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(Data_Lens_Setter.set((function () {
                  var $72 = _maxLevels(Data_Profunctor_Strong.strongFn);
                  var $73 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(mode)(Data_Lens_Internal_Wander.wanderFunction);
                  return function ($74) {
                      return $72($73($74));
                  };
              })())(nextLevel)))(function (v1) {
                  return v.dispatch(Game_Core.newGame(noirblancGame)(Data_Lens_Setter.over(_level(Data_Profunctor_Strong.strongFn))(function (lvl) {
                      return Data_Ord.min(Data_Ord.ordInt)(lvl + 1 | 0)(6);
                  })));
              });
          };
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(state);
      };
  });
  var play2A = function (i) {
      return Data_Semigroup.append(Pha_Action.semigroupAction)(Game_Core.playA(noirblancGame)(i))(afterPlay);
  };
  var selectLevelA = Game_Core["newGame'"](noirblancGame)(Data_Lens_Setter.set(_level(Data_Profunctor_Strong.strongFn)));
  var selectModeA = function (mode) {
      return Game_Core.newGame(noirblancGame)((function () {
          var $75 = Data_Lens_Setter.set(_mode2(Data_Profunctor_Strong.strongFn))(mode);
          var $76 = Data_Lens_Setter.set(_level(Data_Profunctor_Strong.strongFn))(0);
          return function ($77) {
              return $75($76($77));
          };
      })());
  };
  exports["istate"] = istate;
  exports["_mode2"] = _mode2;
  exports["_level"] = _level;
  exports["_maxLevels"] = _maxLevels;
  exports["selectModeA"] = selectModeA;
  exports["selectLevelA"] = selectLevelA;
  exports["onKeyDown"] = onKeyDown;
  exports["play2A"] = play2A;
  exports["noirblancGame"] = noirblancGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Noirblanc.View"] = $PS["Game.Noirblanc.View"] || {};
  var exports = $PS["Game.Noirblanc.View"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var square = function (light) {
      return function (cross) {
          return function (props) {
              return Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("noirblanc-square")(true) ])(props))([ Pha_Html["div'"]([ Pha_Html["class'"]("noirblanc-square-inner")(true), Pha_Html["class'"]("blanc")(light) ])([ Pha_Html["div'"]([ Pha_Html["class'"]("noirblanc-square-blanc")(true) ])((function () {
                  if (cross) {
                      return [ Pha_Html.svguse("#cross")([ Pha_Html["class'"]("ui-absolute noirblanc-cross")(true) ]) ];
                  };
                  return [  ];
              })()), Pha_Html["div'"]([ Pha_Html["class'"]("noirblanc-square-noir")(true) ])((function () {
                  if (cross) {
                      return [ Pha_Html.svguse("#cross")([ Pha_Html["class'"]("ui-absolute noirblanc-cross")(true) ]) ];
                  };
                  return [  ];
              })()) ]) ]);
          };
      };
  };
  var levelOptions = function (v) {
      return function (v1) {
          return function (opt) {
              if (v1) {
                  return {
                      icon: new UI_Icon.IconSymbol("#locked"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Difficult\xe9 non d\xe9bloqu\xe9e"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: true,
                      style: opt.style
                  };
              };
              if (v === 0) {
                  return {
                      icon: new UI_Icon.IconText("3x3"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 1) {
                  return {
                      icon: new UI_Icon.IconText("4x4"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 2) {
                  return {
                      icon: new UI_Icon.IconText("2x10"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 3) {
                  return {
                      icon: new UI_Icon.IconText("3x10"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 4) {
                  return {
                      icon: new UI_Icon.IconText("5x5"),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              if (v === 5) {
                  return {
                      icon: new UI_Icon.IconText("NxM"),
                      selected: opt.selected,
                      tooltip: new Data_Maybe.Just("Dimensions personnalis\xe9es"),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
              return {
                  icon: new UI_Icon.IconSymbol("#lo-rand"),
                  selected: opt.selected,
                  tooltip: new Data_Maybe.Just("Grille al\xe9atoire"),
                  round: opt.round,
                  large: opt.large,
                  hidden: opt.hidden,
                  disabled: opt.disabled,
                  style: opt.style
              };
          };
      };
  };
  var view = function (lens) {
      return function (state) {
          var rules = [ Pha.text("blablahblah") ];
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var config = UI_Template.card("Tout noir tout blanc")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Mode jeu")([ 0, 1, 2, 3 ])(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_mode2"](Data_Lens_Internal_Forget.strongForget)))(Game_Noirblanc_Model.selectModeA)(function (i) {
              return function (opt) {
                  return {
                      icon: UI_Icon.IconSymbol.create("#lo-mode" + Data_Show.show(Data_Show.showInt)(i + 1 | 0)),
                      selected: opt.selected,
                      tooltip: opt.tooltip,
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
          }), UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Difficult\xe9")([ 0, 1, 2, 3, 4, 5, 6 ])(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_level"](Data_Lens_Internal_Forget.strongForget)))(Game_Noirblanc_Model.selectLevelA)(function (i) {
              return levelOptions(i)(Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Ord.ordInt))(new Data_Maybe.Just(i))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_maxLevels"](Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(state)(Game_Noirblanc_Model["_mode2"](Data_Lens_Internal_Forget.strongForget)))));
          }), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var grid = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-board")(true) ])(UI_Template.gridStyle(rows)(columns)(4)))(Lib_Util.map2(position.light)(position.played)(function (index) {
              return function (light) {
                  return function (played) {
                      var v = Lib_Util.coords(columns)(index);
                      return square(light)(Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && played)([ Pha_Html.key(Data_Show.show(Data_Show.showInt)(index)), Pha_Html.style("height")(Data_Show.show(Data_Show.showNumber)(86.0 / Data_Int.toNumber(rows)) + "%"), Pha_Html.style("width")(Data_Show.show(Data_Show.showNumber)(86.0 / Data_Int.toNumber(columns)) + "%"), Pha_Html.style("left")(Data_Show.show(Data_Show.showNumber)((100.0 * Data_Int.toNumber(v.col) + 7.0) / Data_Int.toNumber(columns)) + "%"), Pha_Html.style("top")(Data_Show.show(Data_Show.showNumber)((100.0 * Data_Int.toNumber(v.row) + 7.0) / Data_Int.toNumber(rows)) + "%"), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                          return lens(dictStrong);
                      })(Game_Noirblanc_Model.play2A(index))) ]);
                  };
              };
          }));
          var board = UI_Template.incDecGrid(Game_Noirblanc_Model.noirblancGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Noirblanc_Model.noirblancGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "GAGN\xc9"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Noirblanc"] = $PS["Game.Noirblanc"] || {};
  var exports = $PS["Game.Noirblanc"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Noirblanc_Model = $PS["Game.Noirblanc.Model"];
  var Game_Noirblanc_View = $PS["Game.Noirblanc.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Noirblanc_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Noirblanc_Model.noirblancGame)(v));
  }, function (a) {
      return Pha_Action.lensAction(function (dictStrong) {
          return is(dictStrong.Profunctor0());
      })(Game_Noirblanc_Model.onKeyDown(a));
  }, function (lens) {
      return function (v) {
          return Game_Noirblanc_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Paths.Model"] = $PS["Game.Paths.Model"] || {};
  var exports = $PS["Game.Paths.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];                
  var Mode1 = (function () {
      function Mode1() {

      };
      Mode1.value = new Mode1();
      return Mode1;
  })();
  var Mode2 = (function () {
      function Mode2() {

      };
      Mode2.value = new Mode2();
      return Mode2;
  })();
  var showMode = new Data_Show.Show(function (v) {
      return "mode";
  });
  var pathBetween = function (columns) {
      return function (u) {
          return function (v) {
              var v1 = Lib_Util.dCoords(columns)(u)(v);
              var $28 = v1.row === 0;
              if ($28) {
                  return new Data_Maybe.Just((function () {
                      var $29 = u < v;
                      if ($29) {
                          return Lib_Util.rangeStep(u + 1 | 0)(v)(1);
                      };
                      return Lib_Util.rangeStep(u - 1 | 0)(v)(-1 | 0);
                  })());
              };
              var $30 = v1.col === 0;
              if ($30) {
                  return new Data_Maybe.Just((function () {
                      var $31 = u < v;
                      if ($31) {
                          return Lib_Util.rangeStep(u + columns | 0)(v)(columns);
                      };
                      return Lib_Util.rangeStep(u - columns | 0)(v)(-columns | 0);
                  })());
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 4,
          nbColumns: 6,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      exit: Data_Maybe.Nothing.value,
      "mode'": Mode1.value
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Mode1 && y instanceof Mode1) {
              return true;
          };
          if (x instanceof Mode2 && y instanceof Mode2) {
              return true;
          };
          return false;
      };
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _mode = function (dictStrong) {
      var $53 = _ext(dictStrong);
      var $54 = Data_Lens_Lens.lens(function (v) {
          return v["mode'"];
      })(function (v) {
          return function (v1) {
              return {
                  "mode'": v1,
                  exit: v.exit
              };
          };
      })(dictStrong);
      return function ($55) {
          return $53($54($55));
      };
  };
  var _exit = function (dictStrong) {
      var $56 = _ext(dictStrong);
      var $57 = Data_Lens_Lens.lens(function (v) {
          return v.exit;
      })(function (v) {
          return function (v1) {
              return {
                  exit: v1,
                  "mode'": v["mode'"]
              };
          };
      })(dictStrong);
      return function ($58) {
          return $56($57($58));
      };
  };
  var isValidPath = function (state) {
      return function (path) {
          return Data_Maybe.fromMaybe(true)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Lens_Getter.viewOn(state)(_exit(Data_Lens_Internal_Forget.strongForget)))(function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.fromArray(path))(function (v1) {
                  var path2 = Data_Array_NonEmpty.init(v1);
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.fromArray(path2))(function (v2) {
                      var path3 = Data_Array_NonEmpty.tail(v2);
                      var begin = Data_Array_NonEmpty.head(v1);
                      var end = Data_Array_NonEmpty.last(v1);
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.length(Data_Array.nub(Data_Ord.ordInt)(path2)) === Data_Array.length(path2) && (!Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v)(path3) && (!Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(end)(path3) && (begin !== end || Data_Array.length(path) === ((Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0) + (function () {
                          var $45 = begin === v;
                          if ($45) {
                              return 1;
                          };
                          return 0;
                      })() | 0) && end === v))));
                  });
              });
          }));
      };
  };
  var pathGame = new Game_Core.Game(function (state) {
      return function (v) {
          var v1 = Data_Array_NonEmpty.fromArray(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
          if (v1 instanceof Data_Maybe.Nothing) {
              return Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(Mode2.value);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Data_Maybe.maybe(false)(function (p) {
                  return !Data_Array["null"](p) && isValidPath(state)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(p));
              })(pathBetween(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(Data_Array_NonEmpty.last(v1.value0))(v));
          };
          throw new Error("Failed pattern match at Game.Paths.Model (line 57, column 9 - line 61, column 78): " + [ v1.constructor.name ]);
      };
  }, function (v) {
      return Data_Maybe.Nothing.value;
  }, (function () {
      var $59 = Control_Applicative.pure(Lib_Random.applicativeRandom);
      var $60 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($61) {
          return $59($60($61));
      };
  })(), function (state) {
      return Data_Array.length(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))) === ((Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) | 0) + (function () {
          var $48 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Lens_Getter.viewOn(state)(_exit(Data_Lens_Internal_Forget.strongForget)))(Data_Array.head(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
          if ($48) {
              return 1;
          };
          return 0;
      })() | 0);
  }, function (state) {
      var $49 = Data_Eq.eq(eqMode)(Data_Lens_Getter.viewOn(state)(_mode(Data_Lens_Internal_Forget.strongForget)))(Mode1.value);
      if ($49) {
          return Data_Functor.mapFlipped(Lib_Random.functorRandom)(Lib_Random.randomInt(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0))(function (begin) {
              return Data_Lens_Setter.set(_exit(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(begin))(Data_Lens_Setter.set(Game_Core["_position"](Data_Profunctor_Strong.strongFn))([ begin ])(state));
          });
      };
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_exit(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(Game_Core["_position"](Data_Profunctor_Strong.strongFn))([  ])(state)));
  }, function (state) {
      return function (v) {
          var path = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var $50 = Data_Array["null"](path);
          if ($50) {
              return [ v ];
          };
          return Data_Maybe.fromMaybe([  ])(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.last(path))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(pathBetween(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v1)(v))(function (v2) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(path)(v2));
              });
          }));
      };
  }, function (v) {
      return new Game_Core.SizeLimit(2, 2, 9, 9);
  });
  var selectModeA = Game_Core["newGame'"](pathGame)(Data_Lens_Setter.set(_mode(Data_Profunctor_Strong.strongFn)));
  var selectVertexA = function (v) {
      return Pha_Action.ifThenElseA(function (state) {
          return function (v1) {
              return Data_Array["null"](Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
          };
      })(Pha_Action.action(Data_Lens_Setter.set(Game_Core["_position"](Data_Profunctor_Strong.strongFn))([ v ])))(Pha_Action.ifThenElseA(function (state) {
          return function (v1) {
              return Data_Maybe.isNothing(Data_Lens_Getter.viewOn(state)(_exit(Data_Lens_Internal_Forget.strongForget)));
          };
      })(Pha_Action.action(Data_Lens_Setter.set(_exit(Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(v))))(Game_Core.playA(pathGame)(v)));
  };
  exports["Mode1"] = Mode1;
  exports["Mode2"] = Mode2;
  exports["istate"] = istate;
  exports["_exit"] = _exit;
  exports["_mode"] = _mode;
  exports["selectVertexA"] = selectVertexA;
  exports["selectModeA"] = selectModeA;
  exports["eqMode"] = eqMode;
  exports["showMode"] = showMode;
  exports["pathGame"] = pathGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Paths.View"] = $PS["Game.Paths.View"] || {};
  var exports = $PS["Game.Paths.View"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Paths_Model = $PS["Game.Paths.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var square = function (v) {
      return function (props) {
          return Pha_Html.g(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("paths-darken")(v.darken) ])(props))([ Pha_Html.use(v.x)(v.y)(100.0)(100.0)("#paths-background")([  ]), Pha.whenN(v.door)(function (v1) {
              return Pha_Html.use(v.x)(v.y)(100.0)(100.0)("#paths-door")([  ]);
          }), Pha_Html.use(v.x)(v.y)(100.0)(100.0)("#paths-trap")([ Pha_Html["class'"]("paths-trap")(true), Pha_Html["class'"]("visible")(v.trap && !v.door) ]) ]);
      };
  };
  var heroCursor = function (pp) {
      return Pha_Html.use(-40.0)(-40.0)(80.0)(80.0)(" #meeplehat")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.key("chero"), Pha_Html.attr("opacity")("0.6"), Pha_Html.attr("pointer-events")("none") ])(UI_Template.svgCursorStyle(pp)));
  };
  var doorCursor = function (pp) {
      return Pha_Html.use(-50.0)(-50.0)(100.0)(100.0)(" #paths-door")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.key("cdoor"), Pha_Html.attr("opacity")("0.6"), Pha_Html.attr("pointer-events")("none") ])(UI_Template.svgCursorStyle(pp)));
  };
  var view = function (lens) {
      return function (state) {
          var rules = [ Pha_Html.p([  ])([ Pha.text("Apr\xe8s de moultes p\xe9rip\xe9ties dans le temple maudit de Berge, le professeur Hamilton Jones se retrouve dans la derni\xe8re salle"), Pha_Html.br, Pha.text("Pour sortir de celle-ci, il doit s'enfuir par une porte au dessous de lui."), Pha_Html.br, Pha.text("Celle ci ne peut \xeatre ouverte qu'en marchant sur chacune des dalles dans la salle.") ]), Pha_Html.p([  ])([ Pha.text("Malheusement, ces dalles sont pi\xe9g\xe9es, le pi\xe8ge se d\xe9clenchant peu de temps apr\xe8s avoir march\xe9 dessus."), Pha_Html.br, Pha.text("Donc, Hamilton ne peut pas remarcher sur une dalle sur laquelle il a d\xe9j\xe0 \xe9t\xe9."), Pha_Html.br, Pha.text("N'ayant plus l'aisance de sa jeunesse, Hamilton ne peut se d\xe9placer que d'une dalle \xe0 la fois et ne peut le faire en diagonale.") ]), Pha_Html.p([  ])([ Pha.text("Trouve un parcours pour r\xe9soudre l'\xe9nigme. Ca semble facile? Mais, cela est-il possible pour toutes les tailles de grille") ]), Pha_Html.p([  ])([ Pha.text("Dans le deuxi\xe8me mode de jeu, tu peux choisir la position de d\xe9part d'Hamilton ainsi que celle de la porte."), Pha_Html.br, Pha.text("Tu remarqueras qu'il n'y a pas toujours de solution."), Pha_Html.br, Pha.text("Trouve des crit\xe8res sur les positions d'Hamilton et de la porte pour qu'une solution soit possible.") ]) ];
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var config = UI_Template.card("Chemins")([ UI_Icons.iconSelectGroup(Game_Paths_Model.showMode)(Game_Paths_Model.eqMode)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Mode de jeu")([ Game_Paths_Model.Mode1.value, Game_Paths_Model.Mode2.value ])(Data_Lens_Getter.viewOn(state)(Game_Paths_Model["_mode"](Data_Lens_Internal_Forget.strongForget)))(Game_Paths_Model.selectModeA)(function (mode) {
              return function (opt) {
                  if (mode instanceof Game_Paths_Model.Mode1) {
                      return {
                          icon: new UI_Icon.IconSymbol("#paths-mode0"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Mode 1"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  if (mode instanceof Game_Paths_Model.Mode2) {
                      return {
                          icon: new UI_Icon.IconSymbol("#paths-mode1"),
                          selected: opt.selected,
                          tooltip: new Data_Maybe.Just("Mode 2"),
                          round: opt.round,
                          large: opt.large,
                          hidden: opt.hidden,
                          disabled: opt.disabled,
                          style: opt.style
                      };
                  };
                  throw new Error("Failed pattern match at Game.Paths.View (line 47, column 105 - line 49, column 84): " + [ mode.constructor.name ]);
              };
          }), UI_Icons.iconSizesGroup(Game_Paths_Model.pathGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ new Data_Tuple.Tuple(4, 6), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(3, 8) ])(true), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp, UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var hero = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Array.last(position))(function (h) {
              var v = Lib_Util.coords(columns)(h);
              return Pha_Html.use(0.0)(0.0)(80.0)(80.0)("#meeplehat")([ Pha_Html.key("hero"), Pha_Html["class'"]("paths-hero")(true), Pha_Html.style("transform")("translate(" + (Data_Show.show(Data_Show.showNumber)((Data_Int.toNumber(v.col) * 100.0 + 10.0) / Data_Int.toNumber(columns)) + ("%," + (Data_Show.show(Data_Show.showNumber)((Data_Int.toNumber(v.row) * 100.0 + 10.0) / Data_Int.toNumber(rows)) + "%)")))) ]);
          });
          var pathdec = Data_String_Common.joinWith(" ")(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
              return function (v) {
                  var v1 = Lib_Util.coords(columns)(v);
                  return [ (function () {
                      var $26 = i === 0;
                      if ($26) {
                          return "M";
                      };
                      return "L";
                  })(), Data_Show.show(Data_Show.showInt)((100 * v1.col | 0) + 50 | 0), Data_Show.show(Data_Show.showInt)((100 * v1.row | 0) + 50 | 0) ];
              };
          })(position)));
          var grid = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))(UI_Template.trackPointer(function (dictStrong) {
              return lens(dictStrong);
          })))([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html.viewBox("0 0 " + (Data_Show.show(Data_Show.showInt)(100 * columns | 0) + (" " + Data_Show.show(Data_Show.showInt)(100 * rows | 0)))) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.tabulate(rows * columns | 0)(function (index) {
              var v = Lib_Util.coords(columns)(index);
              return square({
                  darken: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && Data_Int.even(v.row + v.col | 0),
                  trap: Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(index)(position) && Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(index))(Data_Array.last(position)),
                  door: Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Lens_Getter.viewOn(state)(Game_Paths_Model["_exit"](Data_Lens_Internal_Forget.strongForget)))(new Data_Maybe.Just(index)),
                  x: Data_Int.toNumber(100 * v.col | 0),
                  y: Data_Int.toNumber(100 * v.row | 0)
              })([ Pha_Html.key(Data_Show.show(Data_Show.showInt)(index)), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Paths_Model.selectVertexA(index))) ]);
          }))([ Pha_Html.path(pathdec)([ Pha_Html["class'"]("paths-path")(true) ]), Pha.maybeN(hero), Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)))(function (pp) {
              var $32 = Data_Array["null"](position);
              if ($32) {
                  return heroCursor(pp);
              };
              var $33 = Data_Maybe.isNothing(Data_Lens_Getter.viewOn(state)(Game_Paths_Model["_exit"](Data_Lens_Internal_Forget.strongForget)));
              if ($33) {
                  return doorCursor(pp);
              };
              return Pha.emptyNode;
          })) ])) ]);
          var board = UI_Template.incDecGrid(Game_Paths_Model.pathGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Paths_Model.pathGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "GAGN\xc9"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Paths"] = $PS["Game.Paths"] || {};
  var exports = $PS["Game.Paths"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Paths_Model = $PS["Game.Paths.Model"];
  var Game_Paths_View = $PS["Game.Paths.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Paths_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.mapFlipped(Effect.functorEffect)(Game_Core.init(Game_Paths_Model.pathGame)(v))(State);
  }, function (v) {
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  }, function (lens) {
      return function (v) {
          return Game_Paths_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Queens.Model"] = $PS["Game.Queens.Model"] || {};
  var exports = $PS["Game.Queens.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];                
  var Rook = (function () {
      function Rook() {

      };
      Rook.value = new Rook();
      return Rook;
  })();
  var Bishop = (function () {
      function Bishop() {

      };
      Bishop.value = new Bishop();
      return Bishop;
  })();
  var King = (function () {
      function King() {

      };
      King.value = new King();
      return King;
  })();
  var Knight = (function () {
      function Knight() {

      };
      Knight.value = new Knight();
      return Knight;
  })();
  var Queen = (function () {
      function Queen() {

      };
      Queen.value = new Queen();
      return Queen;
  })();
  var Custom = (function () {
      function Custom() {

      };
      Custom.value = new Custom();
      return Custom;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var showPiece = new Data_Show.Show(function (v) {
      if (v instanceof Queen) {
          return "queen";
      };
      if (v instanceof King) {
          return "king";
      };
      if (v instanceof Rook) {
          return "rook";
      };
      if (v instanceof Bishop) {
          return "bishop";
      };
      if (v instanceof Knight) {
          return "knight";
      };
      return "custom";
  });
  var piecesList = [ Rook.value, Bishop.value, King.value, Knight.value, Queen.value ];
  var legalMoves = function (v) {
      return function (v1) {
          return function (v2) {
              if (v instanceof Queen) {
                  return ((((v1 * v1 | 0) - (v2 * v2 | 0) | 0) * v1 | 0) * v2 | 0) === 0;
              };
              if (v instanceof King) {
                  return ((v1 * v1 | 0) + (v2 * v2 | 0) | 0) <= 2;
              };
              if (v instanceof Rook) {
                  return (v1 * v2 | 0) === 0;
              };
              if (v instanceof Bishop) {
                  return ((v1 * v1 | 0) - (v2 * v2 | 0) | 0) === 0;
              };
              if (v instanceof Knight) {
                  return ((v1 * v1 | 0) + (v2 * v2 | 0) | 0) === 5;
              };
              return false;
          };
      };
  };
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 8,
          nbColumns: 8,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      selectedPiece: Queen.value,
      selectedSquare: Data_Maybe.Nothing.value,
      allowedPieces: [ Queen.value ],
      multiPieces: false
  });
  var eqPiece = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Rook && y instanceof Rook) {
              return true;
          };
          if (x instanceof Bishop && y instanceof Bishop) {
              return true;
          };
          if (x instanceof King && y instanceof King) {
              return true;
          };
          if (x instanceof Knight && y instanceof Knight) {
              return true;
          };
          if (x instanceof Queen && y instanceof Queen) {
              return true;
          };
          if (x instanceof Custom && y instanceof Custom) {
              return true;
          };
          if (x instanceof Empty && y instanceof Empty) {
              return true;
          };
          return false;
      };
  });
  var toggleAllowedPiece = function (piece) {
      return function (v) {
          return function (pieces) {
              if (!v) {
                  return [ piece ];
              };
              if (v) {
                  var pieces2 = Data_Array.filter(function (p2) {
                      return Data_Eq.eq(eqPiece)(p2)(piece) !== Data_Foldable.elem(Data_Foldable.foldableArray)(eqPiece)(p2)(pieces);
                  })(piecesList);
                  var $42 = Data_Array["null"](pieces2);
                  if ($42) {
                      return pieces;
                  };
                  return pieces2;
              };
              throw new Error("Failed pattern match at Game.Queens.Model (line 154, column 1 - line 154, column 70): " + [ piece.constructor.name, v.constructor.name, pieces.constructor.name ]);
          };
      };
  };
  var canCapture = function (state) {
      return function (piece) {
          return function (index1) {
              return function (index2) {
                  var v = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(index1)(index2);
                  var $44 = Data_Eq.notEq(eqPiece)(piece)(Custom.value);
                  if ($44) {
                      return index1 !== index2 && legalMoves(piece)(v.row)(v.col);
                  };
                  return true;
              };
          };
      };
  };
  var attackedBy = function (state) {
      return function (piece) {
          return function (index) {
              return Lib_Util.tabulate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(canCapture(state)(piece)(index));
          };
      };
  };
  var capturableSquares = function (state) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
          var $48 = Data_Eq.eq(eqPiece)(v.value1)(Empty.value);
          if ($48) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
          return Data_Array.zipWith(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(attackedBy(state)(v.value1)(v.value0));
      })(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(false))(Data_Array.mapWithIndex(Data_Tuple.Tuple.create)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  };
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _multiPieces = function (dictStrong) {
      var $58 = _ext(dictStrong);
      var $59 = Data_Lens_Lens.lens(function (v) {
          return v.multiPieces;
      })(function (v) {
          return function (v1) {
              return {
                  multiPieces: v1,
                  allowedPieces: v.allowedPieces,
                  selectedPiece: v.selectedPiece,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($60) {
          return $58($59($60));
      };
  };
  var toggleMultiPiecesA = Pha_Action.action(Data_Lens_Setter.over(_multiPieces(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)));
  var _selectedPiece = function (dictStrong) {
      var $61 = _ext(dictStrong);
      var $62 = Data_Lens_Lens.lens(function (v) {
          return v.selectedPiece;
      })(function (v) {
          return function (v1) {
              return {
                  selectedPiece: v1,
                  allowedPieces: v.allowedPieces,
                  multiPieces: v.multiPieces,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($63) {
          return $61($62($63));
      };
  };
  var selectPieceA = function (piece) {
      return Pha_Action.action(Data_Lens_Setter.set(_selectedPiece(Data_Profunctor_Strong.strongFn))(piece));
  };
  var _selectedSquare = function (dictStrong) {
      var $64 = _ext(dictStrong);
      var $65 = Data_Lens_Lens.lens(function (v) {
          return v.selectedSquare;
      })(function (v) {
          return function (v1) {
              return {
                  selectedSquare: v1,
                  allowedPieces: v.allowedPieces,
                  multiPieces: v.multiPieces,
                  selectedPiece: v.selectedPiece
              };
          };
      })(dictStrong);
      return function ($66) {
          return $64($65($66));
      };
  };
  var attackedBySelected = function (state) {
      return Data_Maybe.maybe(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(false))(attackedBy(state)(Data_Lens_Getter.viewOn(state)(_selectedPiece(Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Getter.viewOn(state)(_selectedSquare(Data_Lens_Internal_Forget.strongForget)));
  };
  var selectSquareA = function (a) {
      return Pha_Action.action(Data_Lens_Setter.set(_selectedSquare(Data_Profunctor_Strong.strongFn))(a));
  };
  var _allowedPieces = function (dictStrong) {
      var $67 = _ext(dictStrong);
      var $68 = Data_Lens_Lens.lens(function (v) {
          return v.allowedPieces;
      })(function (v) {
          return function (v1) {
              return {
                  allowedPieces: v1,
                  multiPieces: v.multiPieces,
                  selectedPiece: v.selectedPiece,
                  selectedSquare: v.selectedSquare
              };
          };
      })(dictStrong);
      return function ($69) {
          return $67($68($69));
      };
  };
  var pathGame = new Game_Core.Game(function (v) {
      return function (v1) {
          return true;
      };
  }, Data_Function["const"](Data_Maybe.Nothing.value), function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(Empty.value));
  }, function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Control_Category.identity(Control_Category.categoryFn))(Lib_Util.map2(capturableSquares(state))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(function (index) {
          return function (captured) {
              return function (piece) {
                  return !captured || Data_Eq.eq(eqPiece)(piece)(Empty.value);
              };
          };
      }));
  }, function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_selectedPiece(Data_Profunctor_Strong.strongFn))(Data_Maybe.fromMaybe(Queen.value)(Data_Array.head(Data_Lens_Getter.viewOn(state)(_allowedPieces(Data_Lens_Internal_Forget.strongForget)))))(state));
  }, function (state) {
      return function (index) {
          var selectedPiece = Data_Lens_Getter.viewOn(state)(_selectedPiece(Data_Lens_Internal_Forget.strongForget));
          return Data_Lens_Setter.over(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(index)(Data_Lens_Internal_Wander.wanderFunction))(function (t) {
              var $57 = Data_Eq.eq(eqPiece)(t)(selectedPiece);
              if ($57) {
                  return Empty.value;
              };
              return selectedPiece;
          })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, function (v) {
      return new Game_Core.SizeLimit(3, 3, 9, 9);
  });
  var playA = Game_Core["playA'"](pathGame)(function (v) {
      return {
          showWin: false
      };
  });
  var selectAllowedPieceA = function (piece) {
      return Game_Core.newGame(pathGame)(function (state) {
          return Data_Lens_Setter.over(_allowedPieces(Data_Profunctor_Strong.strongFn))(toggleAllowedPiece(piece)(Data_Lens_Getter.viewOn(state)(_multiPieces(Data_Lens_Internal_Forget.strongForget))))(state);
      });
  };
  exports["piecesList"] = piecesList;
  exports["Rook"] = Rook;
  exports["Bishop"] = Bishop;
  exports["King"] = King;
  exports["Knight"] = Knight;
  exports["Queen"] = Queen;
  exports["Custom"] = Custom;
  exports["Empty"] = Empty;
  exports["istate"] = istate;
  exports["_selectedPiece"] = _selectedPiece;
  exports["_selectedSquare"] = _selectedSquare;
  exports["_allowedPieces"] = _allowedPieces;
  exports["_multiPieces"] = _multiPieces;
  exports["capturableSquares"] = capturableSquares;
  exports["attackedBySelected"] = attackedBySelected;
  exports["playA"] = playA;
  exports["selectPieceA"] = selectPieceA;
  exports["selectSquareA"] = selectSquareA;
  exports["selectAllowedPieceA"] = selectAllowedPieceA;
  exports["toggleMultiPiecesA"] = toggleMultiPiecesA;
  exports["eqPiece"] = eqPiece;
  exports["showPiece"] = showPiece;
  exports["pathGame"] = pathGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Queens.View"] = $PS["Game.Queens.View"] || {};
  var exports = $PS["Game.Queens.View"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Queens_Model = $PS["Game.Queens.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var tooltip = function (v) {
      if (v instanceof Game_Queens_Model.Queen) {
          return "Reine";
      };
      if (v instanceof Game_Queens_Model.King) {
          return "Roi";
      };
      if (v instanceof Game_Queens_Model.Rook) {
          return "Tour";
      };
      if (v instanceof Game_Queens_Model.Bishop) {
          return "Fou";
      };
      if (v instanceof Game_Queens_Model.Knight) {
          return "Cavalier";
      };
      return "Pi\xe8ce personnalis\xe9e";
  };
  var square = function (v) {
      return function (props) {
          return Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("queens-square")(true), Pha_Html["class'"]("queens-square-capturable")(v.capturable), Pha_Html["class'"]("queens-square-nonavailable")(v.nonavailable), Pha_Html["class'"]("queens-square-selected")(v.selected) ])(props))((function () {
              var $20 = Data_Eq.eq(Game_Queens_Model.eqPiece)(v.piece)(Game_Queens_Model.Empty.value);
              if ($20) {
                  return [  ];
              };
              return [ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html["class'"]("queen-piece")(true) ])([ Pha.h("use")([ Pha_Html.href("#piece-" + Data_Show.show(Game_Queens_Model.showPiece)(v.piece)), Pha_Html.attr("x")("10%"), Pha_Html.attr("y")("10%"), Pha_Html.width("80%"), Pha_Html.height("80%"), Pha_Html["class'"]("queens-piece")(true) ])([  ]) ]) ];
          })());
      };
  };
  var view = function (lens) {
      return function (state) {
          var rules = [ Pha.text("Place le plus de pi\xe8ces possible sur ta grille sans qu'aucune ne soit menac\xe9e par une autre pi\xe8ce."), Pha_Html.br, Pha.text("Tu peux choisir de jouer avec diff\xe9rentes pi\xe8ces comme celles du jeu d'\xe9checs.") ];
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var pieceSelector = Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center gutter2 queens-pieceselector")(true) ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_allowedPieces"](Data_Lens_Internal_Forget.strongForget)))(function (piece) {
              var name = Data_Show.show(Game_Queens_Model.showPiece)(piece);
              return UI_Icons.iconbutton(state)(function (x) {
                  return {
                      icon: UI_Icon.IconSymbol.create("#piece-" + name),
                      selected: Data_Eq.eq(Game_Queens_Model.eqPiece)(piece)(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_selectedPiece"](Data_Lens_Internal_Forget.strongForget))),
                      tooltip: x.tooltip,
                      round: x.round,
                      large: x.large,
                      hidden: x.hidden,
                      disabled: x.disabled,
                      style: x.style
                  };
              })([ Pha_Html.key(name), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Queens_Model.selectPieceA(piece))) ]);
          }));
          var directions = [ 1, 2, 3, 0, 0, 4, 7, 6, 5 ];
          var config = UI_Template.card("Les reines")([ UI_Icons.iconSizesGroup(Game_Queens_Model.pathGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ new Data_Tuple.Tuple(4, 4), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(7, 7), new Data_Tuple.Tuple(8, 8) ])(true), UI_Icons.iconSelectGroupM(Game_Queens_Model.showPiece)(Game_Queens_Model.eqPiece)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Pi\xe8ces disponibles")(Game_Queens_Model.piecesList)(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_allowedPieces"](Data_Lens_Internal_Forget.strongForget)))(Game_Queens_Model.selectAllowedPieceA)(function (piece) {
              return function (opt) {
                  return {
                      icon: UI_Icon.IconSymbol.create("#piece-" + Data_Show.show(Game_Queens_Model.showPiece)(piece)),
                      selected: opt.selected,
                      tooltip: Data_Maybe.Just.create(tooltip(piece)),
                      round: opt.round,
                      large: opt.large,
                      hidden: opt.hidden,
                      disabled: opt.disabled,
                      style: opt.style
                  };
              };
          }), UI_Icons.icongroup("Options")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ UI_Icons.iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#customize"),
                  selected: Data_Eq.eq(Data_Maybe.eqMaybe(Game_Queens_Model.eqPiece))(Data_Array.head(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_allowedPieces"](Data_Lens_Internal_Forget.strongForget))))(new Data_Maybe.Just(Game_Queens_Model.Custom.value)),
                  tooltip: new Data_Maybe.Just("Cr\xe9e ta propre propre pi\xe8ce"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([  ]), UI_Icons.iconbutton(state)(function (v) {
              return {
                  icon: new UI_Icon.IconSymbol("#piece-mix"),
                  selected: Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_multiPieces"](Data_Lens_Internal_Forget.strongForget)),
                  tooltip: new Data_Maybe.Just("Mode mixte"),
                  round: v.round,
                  large: v.large,
                  hidden: v.hidden,
                  disabled: v.disabled,
                  style: v.style
              };
          })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Queens_Model.toggleMultiPiecesA)) ]) ])(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          }))) ]);
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var cursor = function (pp) {
              return Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-cursor")(true) ])(UI_Template.cursorStyle(pp)(rows)(columns)(80.0)))([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%") ])([ Pha.h("use")([ Pha_Html.href("#piece-" + Data_Show.show(Game_Queens_Model.showPiece)(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_selectedPiece"](Data_Lens_Internal_Forget.strongForget)))) ])([  ]) ]) ]);
          };
          var grid = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-board")(true) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))(UI_Template.trackPointer(function (dictStrong) {
              return lens(dictStrong);
          }))))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Lib_Util.map3(position)(Game_Queens_Model.attackedBySelected(state))(Game_Queens_Model.capturableSquares(state))(function (index) {
              return function (piece) {
                  return function (attacked) {
                      return function (capturable) {
                          return square({
                              piece: piece,
                              selected: attacked || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Lens_Getter.viewOn(state)(Game_Queens_Model["_selectedSquare"](Data_Lens_Internal_Forget.strongForget)))(new Data_Maybe.Just(index)),
                              nonavailable: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && (Data_Eq.notEq(Game_Queens_Model.eqPiece)(piece)(Game_Queens_Model.Empty.value) || capturable),
                              capturable: capturable
                          })([ Pha_Html.style("width")(Data_Show.show(Data_Show.showNumber)(100.0 / Data_Int.toNumber(columns)) + "%"), Pha_Html.style("height")(Data_Show.show(Data_Show.showNumber)(100.0 / Data_Int.toNumber(rows)) + "%"), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Queens_Model.playA(index))), Pha_Html.pointerenter(Pha_Action.lensAction(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Queens_Model.selectSquareA(new Data_Maybe.Just(index)))), Pha_Html.pointerleave(Pha_Action.lensAction(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game_Queens_Model.selectSquareA(Data_Maybe.Nothing.value))) ]);
                      };
                  };
              };
          }))(Data_Maybe.maybe([  ])((function () {
              var $25 = Control_Applicative.pure(Control_Applicative.applicativeArray);
              return function ($26) {
                  return $25(cursor($26));
              };
          })())(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)))));
          var board = Pha_Html["div'"]([  ])([ pieceSelector, UI_Template.incDecGrid(Game_Queens_Model.pathGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]) ]);
          return UI_Template.template(Game_Queens_Model.pathGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: ""
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Queens"] = $PS["Game.Queens"] || {};
  var exports = $PS["Game.Queens"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Queens_Model = $PS["Game.Queens.Model"];
  var Game_Queens_View = $PS["Game.Queens.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Queens_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Queens_Model.pathGame)(v));
  }, function (v) {
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  }, function (lens) {
      return function (v) {
          return Game_Queens_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Roue.Model"] = $PS["Game.Roue.Model"] || {};
  var exports = $PS["Game.Roue.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];                
  var Panel = (function () {
      function Panel(value0) {
          this.value0 = value0;
      };
      Panel.create = function (value0) {
          return new Panel(value0);
      };
      return Panel;
  })();
  var Wheel = (function () {
      function Wheel(value0) {
          this.value0 = value0;
      };
      Wheel.create = function (value0) {
          return new Wheel(value0);
      };
      return Wheel;
  })();
  var Board = (function () {
      function Board() {

      };
      Board.value = new Board();
      return Board;
  })();
  var istate = Game_Core.genState([  ])(Control_Category.identity(Control_Category.categoryFn))({
      rotation: 0,
      size: 5,
      dragged: Data_Maybe.Nothing.value
  });
  var eqBall = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Panel && y instanceof Panel) {
              return x.value0 === y.value0;
          };
          if (x instanceof Wheel && y instanceof Wheel) {
              return x.value0 === y.value0;
          };
          if (x instanceof Board && y instanceof Board) {
              return true;
          };
          return false;
      };
  });
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _rotation = function (dictStrong) {
      var $60 = _ext(dictStrong);
      var $61 = Data_Lens_Lens.lens(function (v) {
          return v.rotation;
      })(function (v) {
          return function (v1) {
              return {
                  rotation: v1,
                  dragged: v.dragged,
                  size: v.size
              };
          };
      })(dictStrong);
      return function ($62) {
          return $60($61($62));
      };
  };
  var aligned = function (state) {
      var rot = Data_Lens_Getter.viewOn(state)(_rotation(Data_Lens_Internal_Forget.strongForget));
      var n = Data_Array.length(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      return Data_Array.mapWithIndex(function (index) {
          return Data_Maybe.maybe(false)(function (c) {
              return c === Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(index + rot | 0)(n);
          });
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  };
  var validRotation$prime = function (state) {
      return Data_Array.length(Data_Array.filter(Control_Category.identity(Control_Category.categoryFn))(aligned(state))) === 1;
  };
  var validRotation = function (state) {
      return validRotation$prime(state) && Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Maybe.isJust)(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
  };
  var rotate = function (i) {
      return Data_Lens_Setter.over(_rotation(Data_Profunctor_Strong.strongFn))(Data_Semiring.add(Data_Semiring.semiringInt)(i));
  };
  var rotateA = function (i) {
      return Pha_Action.action(rotate(i));
  };
  var _size = function (dictStrong) {
      var $63 = _ext(dictStrong);
      var $64 = Data_Lens_Lens.lens(function (v) {
          return v.size;
      })(function (v) {
          return function (v1) {
              return {
                  size: v1,
                  dragged: v.dragged,
                  rotation: v.rotation
              };
          };
      })(dictStrong);
      return function ($65) {
          return $63($64($65));
      };
  };
  var checkA = (function () {
      var aux = function (h) {
          return function (v) {
              if (v === 0) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(h.updateState(Data_Lens_Setter.set(Game_Core["_showWin"](Data_Profunctor_Strong.strongFn))(true)))(function (v1) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(1000.0))(function () {
                          return h.updateState(Data_Lens_Setter.set(Game_Core["_showWin"](Data_Profunctor_Strong.strongFn))(false));
                      });
                  });
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(h.getState)(function (v1) {
                  var $45 = !validRotation(v1);
                  if ($45) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1);
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(h.updateState(rotate(1)))(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(600.0))(function () {
                          return aux(h)(v - 1 | 0);
                      });
                  });
              });
          };
      };
      return Game_Core.lockAction(Pha_Action.asyncAction(function (h) {
          return function (state) {
              return aux(h)(Data_Lens_Getter.viewOn(state)(_size(Data_Lens_Internal_Forget.strongForget)));
          };
      }));
  })();
  var roueGame = new Game_Core.Game(function (v) {
      return function (v1) {
          return true;
      };
  }, function (v) {
      return Data_Maybe.Nothing.value;
  }, function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(_size(Data_Lens_Internal_Forget.strongForget)))(Data_Maybe.Nothing.value));
  }, function (v) {
      return false;
  }, (function () {
      var $66 = Control_Applicative.pure(Lib_Random.applicativeRandom);
      var $67 = Data_Lens_Setter.set(_rotation(Data_Profunctor_Strong.strongFn))(0);
      return function ($68) {
          return $66($67($68));
      };
  })(), function (state) {
      return function (move) {
          var act = (function () {
              if (move.from instanceof Panel && move.to instanceof Wheel) {
                  return Data_Lens_Setter.set(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(move.to.value0)(Data_Lens_Internal_Wander.wanderFunction))(new Data_Maybe.Just(move.from.value0));
              };
              if (move.from instanceof Wheel && move.to instanceof Wheel) {
                  return Lib_Util.swap(move.from.value0)(move.to.value0);
              };
              if (move.from instanceof Wheel && move.to instanceof Board) {
                  return Data_Lens_Setter.set(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(move.from.value0)(Data_Lens_Internal_Wander.wanderFunction))(Data_Maybe.Nothing.value);
              };
              return Control_Category.identity(Control_Category.categoryFn);
          })();
          return act(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
      };
  }, Game_Core.defaultSizeLimit);
  var setSizeA = Game_Core["newGame'"](roueGame)(Data_Lens_Setter.set(_size(Data_Profunctor_Strong.strongFn)));
  var _dragged = function (dictStrong) {
      var $69 = _ext(dictStrong);
      var $70 = Data_Lens_Lens.lens(function (v) {
          return v.dragged;
      })(function (v) {
          return function (v1) {
              return {
                  dragged: v1,
                  rotation: v.rotation,
                  size: v.size
              };
          };
      })(dictStrong);
      return function ($71) {
          return $69($70($71));
      };
  };
  var deleteDraggedA = Pha_Action.action(function (state) {
      var state2 = Data_Lens_Setter.set(_dragged(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(state);
      return Data_Maybe.maybe(state2)(function (v) {
          if (v instanceof Wheel) {
              return Data_Lens_Setter.set((function () {
                  var $72 = Game_Core["_position"](Data_Profunctor_Strong.strongFn);
                  var $73 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(v.value0)(Data_Lens_Internal_Wander.wanderFunction);
                  return function ($74) {
                      return $72($73($74));
                  };
              })())(Data_Maybe.Nothing.value)(state2);
          };
          return state2;
      })(Data_Lens_Getter.viewOn(state)(_dragged(Data_Lens_Internal_Forget.strongForget)));
  });
  exports["Panel"] = Panel;
  exports["Wheel"] = Wheel;
  exports["istate"] = istate;
  exports["_rotation"] = _rotation;
  exports["_size"] = _size;
  exports["_dragged"] = _dragged;
  exports["aligned"] = aligned;
  exports["validRotation'"] = validRotation$prime;
  exports["validRotation"] = validRotation;
  exports["rotateA"] = rotateA;
  exports["setSizeA"] = setSizeA;
  exports["checkA"] = checkA;
  exports["deleteDraggedA"] = deleteDraggedA;
  exports["eqBall"] = eqBall;
  exports["roueGame"] = roueGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Roue.View"] = $PS["Game.Roue.View"] || {};
  var exports = $PS["Game.Roue.View"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Game_Core = $PS["Game.Core"];
  var Game_Roue_Model = $PS["Game.Roue.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var polarToCartesian = function (centerX) {
      return function (centerY) {
          return function (radius) {
              return function (angle) {
                  return {
                      x: centerX + radius * $$Math.cos(angle),
                      y: centerY + radius * $$Math.sin(angle)
                  };
              };
          };
      };
  };
  var pizza = function (cx) {
      return function (cy) {
          return function (radius) {
              return function (startAngle) {
                  return function (endAngle) {
                      var s = polarToCartesian(cx)(cy)(radius)(startAngle);
                      var e = polarToCartesian(cx)(cy)(radius)(endAngle);
                      return Data_String_Common.joinWith(" ")([ "M", Data_Show.show(Data_Show.showNumber)(cx), Data_Show.show(Data_Show.showNumber)(cy), "L", Data_Show.show(Data_Show.showNumber)(e.x), Data_Show.show(Data_Show.showNumber)(e.y), "A", Data_Show.show(Data_Show.showNumber)(radius), Data_Show.show(Data_Show.showNumber)(radius), "0 0 0", Data_Show.show(Data_Show.showNumber)(s.x), Data_Show.show(Data_Show.showNumber)(s.y), "L", Data_Show.show(Data_Show.showNumber)(cx), Data_Show.show(Data_Show.showNumber)(cy) ]);
                  };
              };
          };
      };
  };
  var cursor = function (v) {
      return function (color) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-cursor roue-select-color roue-cursor")(true), Pha_Html.style("left")(Data_Show.show(Data_Show.showNumber)(v.left) + "px"), Pha_Html.style("top")(Data_Show.show(Data_Show.showNumber)(v.top) + "px"), Pha_Html.style("background-color")(color) ])([  ]);
      };
  };
  var colors = [ "blue", "red", "magenta", "orange", "brown", "cyan", "gray", "black" ];
  var innerWheel = function (size) {
      return Pha_Html["div'"]([ Pha_Html["class'"]("roue-inner")(true) ])([ Pha_Html.svg([ Pha_Html.viewBox("0 0 100 100") ])(Data_Array.mapWithIndex(function (i) {
          return function (color) {
              return Pha_Html.path(pizza(50.0)(50.0)(50.0)((2.0 * $$Math.pi * (Data_Int.toNumber(i) - 0.5)) / Data_Int.toNumber(size))((2.0 * $$Math.pi * (Data_Int.toNumber(i) + 0.5)) / Data_Int.toNumber(size)))([ Pha_Html.fill(color), Pha_Html.stroke("black") ]);
          };
      })(Data_Array.take(size)(colors))) ]);
  };
  var view = function (lens) {
      return function (state) {
          var valid = Game_Roue_Model.validRotation(state);
          var size = Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_size"](Data_Lens_Internal_Forget.strongForget));
          var rules = [ Pha.text("blah blah") ];
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var outerWheel = Pha_Html["div'"]([ Pha_Html["class'"]("roue-outer")(true), Pha_Html.style("transform")("rotate(" + (Data_Show.show(Data_Show.showNumber)((360.0 * Data_Int.toNumber(Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_rotation"](Data_Lens_Internal_Forget.strongForget)))) / Data_Int.toNumber(size)) + "deg)")) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.svg([ Pha_Html.key("svg"), Pha_Html.viewBox("0 0 100 100") ])(Lib_Util.map2(position)(Game_Roue_Model.aligned(state))(function (i) {
              return function (pos) {
                  return function (align) {
                      return Pha_Html.path(pizza(50.0)(50.0)(50.0)((2.0 * $$Math.pi * (Data_Int.toNumber(i) - 0.5)) / Data_Int.toNumber(size))((2.0 * $$Math.pi * (Data_Int.toNumber(i) + 0.5)) / Data_Int.toNumber(size)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("roue-wheel-part")(true), Pha_Html.fill((function () {
                          var $18 = !align;
                          if ($18) {
                              return "#F0B27A";
                          };
                          var $19 = Game_Roue_Model["validRotation'"](state);
                          if ($19) {
                              return "lightgreen";
                          };
                          return "#F5B7B1";
                      })()) ])(UI_Template.dndItemProps(Game_Roue_Model.eqBall)(Game_Roue_Model.roueGame)(function (dictStrong) {
                          return lens(dictStrong);
                      })(function (dictStrong) {
                          return Game_Roue_Model["_dragged"](dictStrong);
                      })(Data_Maybe.isJust(pos))(true)(new Game_Roue_Model.Wheel(i))(state)));
                  };
              };
          })) ])(Data_Array.catMaybes(Data_Array.mapWithIndex(function (index) {
              return function (c) {
                  return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(c)(function (color) {
                      return Pha_Html["div'"]([ Pha_Html["class'"]("roue-outer-piece")(true), Pha_Html.key(Data_Show.show(Data_Show.showInt)(index)), Pha_Html.style("left")(Data_Show.show(Data_Show.showNumber)(44.0 + 40.0 * $$Math.cos((Data_Int.toNumber(index) * 2.0 * $$Math.pi) / Data_Int.toNumber(size))) + "%"), Pha_Html.style("top")(Data_Show.show(Data_Show.showNumber)(44.0 + 40.0 * $$Math.sin((Data_Int.toNumber(index) * 2.0 * $$Math.pi) / Data_Int.toNumber(size))) + "%"), Pha_Html.style("background-color")(Data_Maybe.fromMaybe("black")(Data_Array.index(colors)(color))) ])([  ]);
                  });
              };
          })(position))));
          var draggedColor = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Lens_Getter.viewOn(state)(Game_Roue_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)))(function (d) {
              var colorIndex = (function () {
                  if (d instanceof Game_Roue_Model.Panel) {
                      return d.value0;
                  };
                  if (d instanceof Game_Roue_Model.Wheel) {
                      return Data_Maybe.fromMaybe(-1 | 0)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(position)(d.value0)));
                  };
                  return -1 | 0;
              })();
              return Data_Array.index(colors)(colorIndex);
          });
          var config = UI_Template.card("Roue des couleurs")([ UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Nombre de couleurs")([ 4, 5, 6, 7, 8 ])(size)(Game_Roue_Model.setSizeA)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var board = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.dndBoardProps(Game_Roue_Model.eqBall)(Game_Roue_Model.roueGame)(function (dictStrong) {
              return lens(dictStrong);
          })(function (dictStrong) {
              return Game_Roue_Model["_dragged"](dictStrong);
          }))([ Pha_Html["class'"]("roue-board")(true), Pha_Html.pointerup(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Roue_Model.deleteDraggedA)) ]))([ Pha_Html["div'"]([ Pha_Html["class'"]("roue-buttons")(true) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary roue-button")(true), Pha_Html.disabled(Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Roue_Model.rotateA(-1 | 0))) ])([ Pha.text("\u21b6") ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.mapWithIndex(function (i) {
              return function (color) {
                  return Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("roue-select-color ui-flex-center")(true), Pha_Html.style("background-color")(color) ])(UI_Template.dndItemProps(Game_Roue_Model.eqBall)(Game_Roue_Model.roueGame)(function (dictStrong) {
                      return lens(dictStrong);
                  })(function (dictStrong) {
                      return Game_Roue_Model["_dragged"](dictStrong);
                  })(true)(false)(new Game_Roue_Model.Panel(i))(state)))((function () {
                      var $23 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(i))(position);
                      if ($23) {
                          return [ Pha_Html.span([  ])([ Pha.text("\u2713") ]) ];
                      };
                      return [  ];
                  })());
              };
          })(Data_Array.take(size)(colors)))([ Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary roue-button")(true), Pha_Html.disabled(Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Roue_Model.rotateA(1))) ])([ Pha.text("\u21b7") ]) ]))), Pha_Html["div'"]([ Pha_Html["class'"]("roue-roue")(true) ])([ outerWheel, innerWheel(size), Pha_Html.button([ Pha_Html["class'"]("ui-button ui-button-primary roue-validate")(true), Pha_Html.disabled(!valid || Data_Lens_Getter.viewOn(state)(Game_Core["_locked"](Data_Lens_Internal_Forget.strongForget))), Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Game_Roue_Model.checkA)) ])([ Pha.text("Valider") ]), Pha_Html["div'"]([ Pha_Html["class'"]("roue-valid-rotation")(true) ])([ (function () {
              if (valid) {
                  return Pha_Html.span([ Pha_Html["class'"]("valid")(true) ])([ Pha.text("\u2713") ]);
              };
              return Pha_Html.span([ Pha_Html["class'"]("invalid")(true) ])([ Pha.text("\u2717") ]);
          })() ]) ]), Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(draggedColor)) ]);
          return UI_Template.template(Game_Roue_Model.roueGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "GAGN\xc9"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Roue"] = $PS["Game.Roue"] || {};
  var exports = $PS["Game.Roue"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Roue_Model = $PS["Game.Roue.Model"];
  var Game_Roue_View = $PS["Game.Roue.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Roue_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Roue_Model.roueGame)(v));
  }, function (v) {
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  }, function (lens) {
      return function (v) {
          return Game_Roue_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Solitaire.Model"] = $PS["Game.Solitaire.Model"] || {};
  var exports = $PS["Game.Solitaire.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];                
  var FrenchBoard = (function () {
      function FrenchBoard() {

      };
      FrenchBoard.value = new FrenchBoard();
      return FrenchBoard;
  })();
  var EnglishBoard = (function () {
      function EnglishBoard() {

      };
      EnglishBoard.value = new EnglishBoard();
      return EnglishBoard;
  })();
  var CircleBoard = (function () {
      function CircleBoard() {

      };
      CircleBoard.value = new CircleBoard();
      return CircleBoard;
  })();
  var Grid3Board = (function () {
      function Grid3Board() {

      };
      Grid3Board.value = new Grid3Board();
      return Grid3Board;
  })();
  var RandomBoard = (function () {
      function RandomBoard() {

      };
      RandomBoard.value = new RandomBoard();
      return RandomBoard;
  })();
  var showMode = new Data_Show.Show(function (v) {
      return "board";
  });
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 5,
          nbColumns: 1,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      board: CircleBoard.value,
      holes: [  ],
      dragged: Data_Maybe.Nothing.value,
      "help'": 0
  });
  var generateBoard = function (rows) {
      return function (columns) {
          return function (startingHole) {
              return function (holeFilter) {
                  var holes = Lib_Util.tabulate2(rows)(columns)(holeFilter);
                  var position = Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(startingHole)(Data_Lens_Internal_Wander.wanderFunction))(false)(holes));
                  return {
                      holes: holes,
                      position: position,
                      customSize: false
                  };
              };
          };
      };
  };
  var boardMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof FrenchBoard && y instanceof FrenchBoard) {
              return true;
          };
          if (x instanceof EnglishBoard && y instanceof EnglishBoard) {
              return true;
          };
          if (x instanceof CircleBoard && y instanceof CircleBoard) {
              return true;
          };
          if (x instanceof Grid3Board && y instanceof Grid3Board) {
              return true;
          };
          if (x instanceof RandomBoard && y instanceof RandomBoard) {
              return true;
          };
          return false;
      };
  });
  var betweenMove = function (state) {
      return function (v) {
          var v1 = Lib_Util.dCoords(Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)))(v.from)(v.to);
          var $47 = ((v1.row * v1.row | 0) + (v1.col * v1.col | 0) | 0) === 4;
          if ($47) {
              return Data_Maybe.Just.create(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v.from + v.to | 0)(2));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var betweenInCircle = function (from) {
      return function (to) {
          return function (size) {
              var $52 = (from - to | 0) === 2 || (to - from | 0) === 2;
              if ($52) {
                  return Data_Maybe.Just.create(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(from + to | 0)(2));
              };
              var $53 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(to - from | 0)(size) === 2;
              if ($53) {
                  return Data_Maybe.Just.create(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(from + 1 | 0)(size));
              };
              var $54 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(from - to | 0)(size) === 2;
              if ($54) {
                  return Data_Maybe.Just.create(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(to + 1 | 0)(size));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _help = function (dictStrong) {
      var $88 = _ext(dictStrong);
      var $89 = Data_Lens_Lens.lens(function (v) {
          return v["help'"];
      })(function (v) {
          return function (v1) {
              return {
                  "help'": v1,
                  board: v.board,
                  dragged: v.dragged,
                  holes: v.holes
              };
          };
      })(dictStrong);
      return function ($90) {
          return $88($89($90));
      };
  };
  var toggleHelpA = Pha_Action.action(Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))(function (x) {
      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(x + 1 | 0)(3);
  }));
  var _holes = function (dictStrong) {
      var $91 = _ext(dictStrong);
      var $92 = Data_Lens_Lens.lens(function (v) {
          return v.holes;
      })(function (v) {
          return function (v1) {
              return {
                  holes: v1,
                  board: v.board,
                  dragged: v.dragged,
                  "help'": v["help'"]
              };
          };
      })(dictStrong);
      return function ($93) {
          return $91($92($93));
      };
  };
  var _dragged = function (dictStrong) {
      var $94 = _ext(dictStrong);
      var $95 = Data_Lens_Lens.lens(function (v) {
          return v.dragged;
      })(function (v) {
          return function (v1) {
              return {
                  dragged: v1,
                  board: v.board,
                  "help'": v["help'"],
                  holes: v.holes
              };
          };
      })(dictStrong);
      return function ($96) {
          return $94($95($96));
      };
  };
  var _board = function (dictStrong) {
      var $97 = _ext(dictStrong);
      var $98 = Data_Lens_Lens.lens(function (v) {
          return v.board;
      })(function (v) {
          return function (v1) {
              return {
                  board: v1,
                  dragged: v.dragged,
                  "help'": v["help'"],
                  holes: v.holes
              };
          };
      })(dictStrong);
      return function ($99) {
          return $97($98($99));
      };
  };
  var betweenMove2 = function (state) {
      return function (v) {
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var $63 = Data_Eq.eq(boardMode)(Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget)))(CircleBoard.value);
          if ($63) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(betweenInCircle(v.from)(v.to)(rows))(function (v1) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((function () {
                      var $65 = rows === 4 && Data_Maybe.maybe(false)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(v1));
                      if ($65) {
                          return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v1 + 2 | 0)(4);
                      };
                      return v1;
                  })());
              });
          };
          return betweenMove(state)(v);
      };
  };
  var solitaireGame = new Game_Core.Game(function (state) {
      return function (v) {
          return Data_Maybe.fromMaybe(false)((function () {
              var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
              return Control_Bind.bind(Data_Maybe.bindMaybe)(betweenMove2(state)(v))(function (v1) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v.from))(function (v2) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v1))(function (v3) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(position)(v.to))(function (v4) {
                              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(Data_Lens_Getter.viewOn(state)(_holes(Data_Lens_Internal_Forget.strongForget)))(v.to))(function (v5) {
                                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v2 && (v3 && (v5 && !v4)));
                              });
                          });
                      });
                  });
              });
          })());
      };
  }, function (v) {
      return Data_Maybe.Nothing.value;
  }, (function () {
      var $100 = Control_Applicative.pure(Lib_Random.applicativeRandom);
      var $101 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($102) {
          return $100($101($102));
      };
  })(), function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Control_Category.identity(Control_Category.categoryFn))(Data_Array.mapWithIndex(function (i) {
          return function (val) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (d) {
                  return Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Game_Core.canPlay(solitaireGame))(state)({
                      from: i,
                      to: i + d | 0
                  });
              })([ 2, -2 | 0, 2 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0, (-2 | 0) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0, Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) - 2 | 0 ]);
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  }, function (state) {
      var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
      var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
      var v = (function () {
          var v1 = Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget));
          if (v1 instanceof EnglishBoard) {
              return generateBoard(7)(7)(24)(function (row) {
                  return function (col) {
                      return Data_Ord.min(Data_Ord.ordInt)(row)(6 - row | 0) >= 2 || Data_Ord.min(Data_Ord.ordInt)(col)(6 - col | 0) >= 2;
                  };
              });
          };
          if (v1 instanceof FrenchBoard) {
              return generateBoard(7)(7)(24)(function (row) {
                  return function (col) {
                      return (Data_Ord.min(Data_Ord.ordInt)(row)(6 - row | 0) + Data_Ord.min(Data_Ord.ordInt)(col)(6 - col | 0) | 0) >= 2;
                  };
              });
          };
          if (v1 instanceof CircleBoard) {
              return {
                  holes: Data_Array.replicate(rows)(true),
                  position: Data_Functor.mapFlipped(Lib_Random.functorRandom)(Lib_Random.randomInt(rows))(function (x) {
                      return Lib_Util.tabulate(rows)(Data_Eq.notEq(Data_Eq.eqInt)(x));
                  }),
                  customSize: true
              };
          };
          if (v1 instanceof Grid3Board) {
              return {
                  holes: Data_Array.replicate(3 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(true),
                  position: Control_Applicative.pure(Lib_Random.applicativeRandom)(Lib_Util.tabulate(3 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(function (v2) {
                      return v2 < (2 * columns | 0);
                  })),
                  customSize: true
              };
          };
          if (v1 instanceof RandomBoard) {
              return {
                  holes: Data_Array.replicate(3 * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(true),
                  position: Data_Functor.mapFlipped(Lib_Random.functorRandom)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Lib_Random.applicativeRandom)(Data_Array.replicate(columns)(Lib_Random.randomBool)))(function (bools) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(bools)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(columns)(true))(Data_Functor.mapFlipped(Data_Functor.functorArray)(bools)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))));
                  }),
                  customSize: true
              };
          };
          throw new Error("Failed pattern match at Game.Solitaire.Model (line 98, column 13 - line 116, column 18): " + [ v1.constructor.name ]);
      })();
      return Data_Functor.mapFlipped(Lib_Random.functorRandom)(v.position)(function (p) {
          return Data_Lens_Setter.set(Game_Core["_customSize"](Data_Profunctor_Strong.strongFn))(v.customSize)(Data_Lens_Setter.set(Game_Core["_position"](Data_Profunctor_Strong.strongFn))(p)(Data_Lens_Setter.set(_holes(Data_Profunctor_Strong.strongFn))(v.holes)(state)));
      });
  }, function (state) {
      return function (v) {
          return Data_Maybe.maybe(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(function (between) {
              return Data_Array.updateAtIndices(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(v.from, false), new Data_Tuple.Tuple(between, false), new Data_Tuple.Tuple(v.to, true) ])(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)));
          })(betweenMove2(state)(v));
      };
  }, function (state) {
      var v = Data_Lens_Getter.viewOn(state)(_board(Data_Lens_Internal_Forget.strongForget));
      if (v instanceof CircleBoard) {
          return new Game_Core.SizeLimit(3, 1, 12, 1);
      };
      if (v instanceof Grid3Board) {
          return new Game_Core.SizeLimit(3, 1, 3, 9);
      };
      if (v instanceof RandomBoard) {
          return new Game_Core.SizeLimit(3, 1, 3, 9);
      };
      return new Game_Core.SizeLimit(7, 7, 7, 7);
  });
  var setBoardA = function (board) {
      return Game_Core.newGame(solitaireGame)(function (state) {
          var st2 = Data_Lens_Setter.set(_board(Data_Profunctor_Strong.strongFn))(board)(state);
          if (board instanceof CircleBoard) {
              return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(1)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(6)(st2));
          };
          if (board instanceof Grid3Board) {
              return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(5)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(3)(st2));
          };
          if (board instanceof RandomBoard) {
              return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(5)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(3)(st2));
          };
          return Data_Lens_Setter.set(Game_Core["_nbColumns"](Data_Profunctor_Strong.strongFn))(7)(Data_Lens_Setter.set(Game_Core["_nbRows"](Data_Profunctor_Strong.strongFn))(7)(st2));
      });
  };
  exports["FrenchBoard"] = FrenchBoard;
  exports["EnglishBoard"] = EnglishBoard;
  exports["CircleBoard"] = CircleBoard;
  exports["Grid3Board"] = Grid3Board;
  exports["RandomBoard"] = RandomBoard;
  exports["istate"] = istate;
  exports["_board"] = _board;
  exports["_holes"] = _holes;
  exports["_dragged"] = _dragged;
  exports["_help"] = _help;
  exports["setBoardA"] = setBoardA;
  exports["toggleHelpA"] = toggleHelpA;
  exports["boardMode"] = boardMode;
  exports["showMode"] = showMode;
  exports["solitaireGame"] = solitaireGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Solitaire.View"] = $PS["Game.Solitaire.View"] || {};
  var exports = $PS["Game.Solitaire.View"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Game_Solitaire_Model = $PS["Game.Solitaire.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var $$Math = $PS["Math"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var tricolor = function (i) {
      return function (columns) {
          return function (help) {
              var v = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(columns) + (help * Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(columns) | 0) | 0)(3);
              if (v === 0) {
                  return "red";
              };
              if (v === 1) {
                  return "blue";
              };
              return "green";
          };
      };
  };
  var cursor = function (pp) {
      return function (v) {
          return Pha_Html.circle(0.0)(0.0)(20.0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.attr("pointer-events")("none"), Pha_Html.fill("url(#soli-peg)") ])(UI_Template.svgCursorStyle(pp)));
      };
  };
  var view = function (lens) {
      return function (state) {
          var rules = [ Pha.text("Jeu du solitaire"), Pha_Html.br, Pha.text("blah blah") ];
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var nbPegs = Data_Array.length(Data_Array.filter(Control_Category.identity(Control_Category.categoryFn))(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
          var s = (function () {
              var $24 = nbPegs > 1;
              if ($24) {
                  return "s";
              };
              return "";
          })();
          var winTitle = Data_Show.show(Data_Show.showInt)(nbPegs) + (" jeton" + (s + (" restant" + s)));
          var isCircleBoard = Data_Eq.eq(Game_Solitaire_Model.boardMode)(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_board"](Data_Lens_Internal_Forget.strongForget)))(Game_Solitaire_Model.CircleBoard.value);
          var config = (function () {
              var ihelp = UI_Icons.iconbutton(state)(function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#help"),
                      selected: Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_help"](Data_Lens_Internal_Forget.strongForget)) > 0,
                      tooltip: new Data_Maybe.Just("Aide"),
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                  return lens(dictStrong);
              })(Game_Solitaire_Model.toggleHelpA)) ]);
              var boards = [ Game_Solitaire_Model.CircleBoard.value, Game_Solitaire_Model.Grid3Board.value, Game_Solitaire_Model.RandomBoard.value, Game_Solitaire_Model.EnglishBoard.value, Game_Solitaire_Model.FrenchBoard.value ];
              return UI_Template.card("Jeu du solitaire")([ UI_Icons.iconSelectGroup(Game_Solitaire_Model.showMode)(Game_Solitaire_Model.boardMode)(function (dictStrong) {
                  return lens(dictStrong);
              })(state)("Plateau")(boards)(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_board"](Data_Lens_Internal_Forget.strongForget)))(Game_Solitaire_Model.setBoardA)(function (i) {
                  return function (opt) {
                      if (i instanceof Game_Solitaire_Model.CircleBoard) {
                          return {
                              icon: new UI_Icon.IconSymbol("#circle"),
                              selected: opt.selected,
                              tooltip: new Data_Maybe.Just("Cercle"),
                              round: opt.round,
                              large: opt.large,
                              hidden: opt.hidden,
                              disabled: opt.disabled,
                              style: opt.style
                          };
                      };
                      if (i instanceof Game_Solitaire_Model.Grid3Board) {
                          return {
                              icon: new UI_Icon.IconText("3xN"),
                              selected: opt.selected,
                              tooltip: new Data_Maybe.Just("3xN"),
                              round: opt.round,
                              large: opt.large,
                              hidden: opt.hidden,
                              disabled: opt.disabled,
                              style: opt.style
                          };
                      };
                      if (i instanceof Game_Solitaire_Model.RandomBoard) {
                          return {
                              icon: new UI_Icon.IconSymbol("#shuffle"),
                              selected: opt.selected,
                              tooltip: new Data_Maybe.Just("Al\xe9atoire"),
                              round: opt.round,
                              large: opt.large,
                              hidden: opt.hidden,
                              disabled: opt.disabled,
                              style: opt.style
                          };
                      };
                      if (i instanceof Game_Solitaire_Model.EnglishBoard) {
                          return {
                              icon: new UI_Icon.IconSymbol("#bread"),
                              selected: opt.selected,
                              tooltip: new Data_Maybe.Just("Anglais"),
                              round: opt.round,
                              large: opt.large,
                              hidden: opt.hidden,
                              disabled: opt.disabled,
                              style: opt.style
                          };
                      };
                      if (i instanceof Game_Solitaire_Model.FrenchBoard) {
                          return {
                              icon: new UI_Icon.IconSymbol("#tea"),
                              selected: opt.selected,
                              tooltip: new Data_Maybe.Just("Fran\xe7ais"),
                              round: opt.round,
                              large: opt.large,
                              hidden: opt.hidden,
                              disabled: opt.disabled,
                              style: opt.style
                          };
                      };
                      throw new Error("Failed pattern match at Game.Solitaire.View (line 45, column 93 - line 50, column 89): " + [ i.constructor.name ]);
                  };
              }), UI_Icons.icongroup("Options")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ihelp ])(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.iundo, UI_Icons.iredo, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
                  return x(function (dictStrong) {
                      return lens(dictStrong);
                  })(state);
              }))) ]);
          })();
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var itemStyle = function (i) {
              var v = Lib_Util.coords(columns)(i);
              if (isCircleBoard) {
                  return Pha_Html.translate(125.0 + $$Math.sin((2.0 * $$Math.pi * Data_Int.toNumber(i)) / Data_Int.toNumber(rows)) * 90.0)(125.0 + $$Math.cos((2.0 * $$Math.pi * Data_Int.toNumber(i)) / Data_Int.toNumber(rows)) * 90.0);
              };
              return Pha_Html.translate(50.0 * Data_Int.toNumber(v.col) + 25.0)(50.0 * Data_Int.toNumber(v.row) + 25.0);
          };
          var grid = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("ui-board")(true) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.dndBoardProps(Data_Eq.eqInt)(Game_Solitaire_Model.solitaireGame)(function (dictStrong) {
              return lens(dictStrong);
          })(function (dictStrong) {
              return Game_Solitaire_Model["_dragged"](dictStrong);
          }))((function () {
              if (isCircleBoard) {
                  return [ Pha_Html.style("width")("100%"), Pha_Html.style("height")("100%") ];
              };
              return UI_Template.gridStyle(rows)(columns)(5);
          })())))([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html.viewBox((function () {
              if (isCircleBoard) {
                  return "0 0 250 250";
              };
              return "0 0 " + (Data_Show.show(Data_Show.showInt)(50 * columns | 0) + (" " + Data_Show.show(Data_Show.showInt)(50 * rows | 0)));
          })()) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha.whenN(isCircleBoard)(function (v) {
              return Pha_Html.circle(125.0)(125.0)(90.0)([ Pha_Html.stroke("grey"), Pha_Html.fill("transparent"), Pha_Html.strokeWidth("5") ]);
          }) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.concat(Data_Array.mapWithIndex(function (i) {
              return function (val) {
                  var $32 = !val;
                  if ($32) {
                      return [  ];
                  };
                  return [ Pha.whenN(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_help"](Data_Lens_Internal_Forget.strongForget)) > 0 && !isCircleBoard)(function (v) {
                      return Pha_Html.rect(-25.0)(-25.0)(50.0)(50.0)([ Pha_Html.key("rect" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html.fill(tricolor(i)(columns)(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_help"](Data_Lens_Internal_Forget.strongForget)))), Pha_Html.style("transform")(itemStyle(i)) ]);
                  }), Pha_Html.circle(0.0)(0.0)(17.0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.key("h" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html.fill("url(#soli-hole)"), Pha_Html["class'"]("solitaire-hole")(true), Pha_Html.style("transform")(itemStyle(i)) ])(UI_Template.dndItemProps(Data_Eq.eqInt)(Game_Solitaire_Model.solitaireGame)(function (dictStrong) {
                      return lens(dictStrong);
                  })(function (dictStrong) {
                      return Game_Solitaire_Model["_dragged"](dictStrong);
                  })(false)(true)(i)(state))) ];
              };
          })(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_holes"](Data_Lens_Internal_Forget.strongForget)))))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.mapWithIndex(function (i) {
              return function (val) {
                  return Pha.whenN(val)(function (v) {
                      return Pha_Html.circle(0.0)(0.0)(20.0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.key("p" + Data_Show.show(Data_Show.showInt)(i)), Pha_Html.fill("url(#soli-peg)"), Pha_Html["class'"]("solitaire-peg")(true), Pha_Html.style("transform")(itemStyle(i)) ])(UI_Template.dndItemProps(Data_Eq.eqInt)(Game_Solitaire_Model.solitaireGame)(function (dictStrong) {
                          return lens(dictStrong);
                      })(function (dictStrong) {
                          return Game_Solitaire_Model["_dragged"](dictStrong);
                      })(true)(false)(i)(state)));
                  });
              };
          })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))))([ Pha.maybeN(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(cursor)(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Getter.viewOn(state)(Game_Solitaire_Model["_dragged"](Data_Lens_Internal_Forget.strongForget)))) ])))) ]);
          var board = UI_Template.incDecGrid(Game_Solitaire_Model.solitaireGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Solitaire_Model.solitaireGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: winTitle
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Solitaire"] = $PS["Game.Solitaire"] || {};
  var exports = $PS["Game.Solitaire"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Solitaire_Model = $PS["Game.Solitaire.Model"];
  var Game_Solitaire_View = $PS["Game.Solitaire.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Solitaire_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Solitaire_Model.solitaireGame)(v));
  }, Data_Function["const"](Data_Monoid.mempty(Pha_Action.semigroupMonoid)), function (lens) {
      return function (v) {
          return Game_Solitaire_View.view(function (dictStrong) {
              var $9 = lens(dictStrong);
              var $10 = is(dictStrong.Profunctor0());
              return function ($11) {
                  return $9($10($11));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Tiling.Model"] = $PS["Game.Tiling.Model"] || {};
  var exports = $PS["Game.Tiling.Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Game_Core = $PS["Game.Core"];
  var Lib_Random = $PS["Lib.Random"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha_Action = $PS["Pha.Action"];                
  var Type1 = (function () {
      function Type1() {

      };
      Type1.value = new Type1();
      return Type1;
  })();
  var Type2 = (function () {
      function Type2() {

      };
      Type2.value = new Type2();
      return Type2;
  })();
  var Type3 = (function () {
      function Type3() {

      };
      Type3.value = new Type3();
      return Type3;
  })();
  var translate = function (v) {
      return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return {
              row: v1.row + v.row | 0,
              col: v1.col + v.col | 0
          };
      });
  };
  var sinks = function (state) {
      return Data_Array.catMaybes(Data_Array.mapWithIndex(function (i) {
          return function (v) {
              var $42 = v === (-1 | 0);
              if ($42) {
                  return new Data_Maybe.Just(i);
              };
              return Data_Maybe.Nothing.value;
          };
      })(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget))));
  };
  var showTileType = new Data_Show.Show(function (v) {
      if (v instanceof Type1) {
          return "beast1";
      };
      if (v instanceof Type2) {
          return "beast2";
      };
      if (v instanceof Type3) {
          return "beast3";
      };
      throw new Error("Failed pattern match at Game.Tiling.Model (line 14, column 1 - line 17, column 26): " + [ v.constructor.name ]);
  });
  var rotate90 = Data_Functor.map(Data_Functor.functorArray)(function (v) {
      return {
          row: v.col,
          col: -v.row | 0
      };
  });
  var rotate = function ($copy_v) {
      return function ($copy_t) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, t) {
              if (v === 0) {
                  $tco_done = true;
                  return t;
              };
              $tco_var_v = v - 1 | 0;
              $copy_t = rotate90(t);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_t);
          };
          return $tco_result;
      };
  };
  var putSinkA = function (i) {
      return Pha_Action.action(Data_Lens_Setter.set((function () {
          var $66 = Game_Core["_position"](Data_Profunctor_Strong.strongFn);
          var $67 = Data_Lens_Index.ix(Data_Lens_Index.indexArray)(i)(Data_Lens_Internal_Wander.wanderFunction);
          return function ($68) {
              return $66($67($68));
          };
      })())(-1 | 0));
  };
  var istate = Game_Core.genState([  ])(function (v) {
      return {
          position: v.position,
          history: v.history,
          redoHistory: v.redoHistory,
          dialog: v.dialog,
          turn: v.turn,
          nbRows: 5,
          nbColumns: 5,
          customSize: v.customSize,
          mode: v.mode,
          help: v.help,
          locked: v.locked,
          showWin: v.showWin,
          pointer: v.pointer
      };
  })({
      rotation: 0,
      tileType: Type1.value,
      tile: [  ],
      nbSinks: 0,
      hoverSquare: Data_Maybe.Nothing.value
  });
  var getTile = function (v) {
      if (v instanceof Type1) {
          return [ {
              row: 0,
              col: 0
          }, {
              row: 0,
              col: 1
          } ];
      };
      if (v instanceof Type2) {
          return [ {
              row: 0,
              col: 0
          }, {
              row: 0,
              col: 1
          }, {
              row: 0,
              col: -1 | 0
          } ];
      };
      if (v instanceof Type3) {
          return [ {
              row: 0,
              col: 0
          }, {
              row: 0,
              col: 1
          }, {
              row: 1,
              col: 0
          } ];
      };
      throw new Error("Failed pattern match at Game.Tiling.Model (line 19, column 1 - line 19, column 28): " + [ v.constructor.name ]);
  };
  var eqTileType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Type1 && y instanceof Type1) {
              return true;
          };
          if (x instanceof Type2 && y instanceof Type2) {
              return true;
          };
          if (x instanceof Type3 && y instanceof Type3) {
              return true;
          };
          return false;
      };
  });
  var canPutTile = function (state) {
      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (index) {
          return Data_Maybe.maybe(false)(Data_Eq.eq(Data_Eq.eqInt)(0))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(index));
      });
  };
  var _ext = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (x) {
              return new Game_Core.State(v.value0, x);
          };
      })(dictStrong);
  };
  var _hoverSquare = function (dictStrong) {
      var $69 = _ext(dictStrong);
      var $70 = Data_Lens_Lens.lens(function (v) {
          return v.hoverSquare;
      })(function (v) {
          return function (v1) {
              return {
                  hoverSquare: v1,
                  nbSinks: v.nbSinks,
                  rotation: v.rotation,
                  tile: v.tile,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($71) {
          return $69($70($71));
      };
  };
  var setHoverSquareA = function (a) {
      return Pha_Action.action(Data_Lens_Setter.set(_hoverSquare(Data_Profunctor_Strong.strongFn))(a));
  };
  var _nbSinks = function (dictStrong) {
      var $72 = _ext(dictStrong);
      var $73 = Data_Lens_Lens.lens(function (v) {
          return v.nbSinks;
      })(function (v) {
          return function (v1) {
              return {
                  nbSinks: v1,
                  hoverSquare: v.hoverSquare,
                  rotation: v.rotation,
                  tile: v.tile,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($74) {
          return $72($73($74));
      };
  };
  var _rotation = function (dictStrong) {
      var $75 = _ext(dictStrong);
      var $76 = Data_Lens_Lens.lens(function (v) {
          return v.rotation;
      })(function (v) {
          return function (v1) {
              return {
                  rotation: v1,
                  hoverSquare: v.hoverSquare,
                  nbSinks: v.nbSinks,
                  tile: v.tile,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($77) {
          return $75($76($77));
      };
  };
  var rotateA = Pha_Action.action(Data_Lens_Setter.over(_rotation(Data_Profunctor_Strong.strongFn))(Data_Semiring.add(Data_Semiring.semiringInt)(1)));
  var onKeyDown = function (v) {
      if (v === " ") {
          return rotateA;
      };
      return Data_Monoid.mempty(Pha_Action.semigroupMonoid);
  };
  var _tile = function (dictStrong) {
      var $78 = _ext(dictStrong);
      var $79 = Data_Lens_Lens.lens(function (v) {
          return v.tile;
      })(function (v) {
          return function (v1) {
              return {
                  tile: v1,
                  hoverSquare: v.hoverSquare,
                  nbSinks: v.nbSinks,
                  rotation: v.rotation,
                  tileType: v.tileType
              };
          };
      })(dictStrong);
      return function ($80) {
          return $78($79($80));
      };
  };
  var placeTile = function (state) {
      return function (index) {
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(translate(Lib_Util.coords(columns)(index))(rotate(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_Lens_Getter.viewOn(state)(_rotation(Data_Lens_Internal_Forget.strongForget)))(4))(Data_Lens_Getter.viewOn(state)(_tile(Data_Lens_Internal_Forget.strongForget)))))(function (v) {
              var $60 = 0 <= v.col && v.col < columns;
              if ($60) {
                  return (v.row * columns | 0) + v.col | 0;
              };
              return -1 | 0;
          });
      };
  };
  var _tileType = function (dictStrong) {
      var $81 = _ext(dictStrong);
      var $82 = Data_Lens_Lens.lens(function (v) {
          return v.tileType;
      })(function (v) {
          return function (v1) {
              return {
                  tileType: v1,
                  hoverSquare: v.hoverSquare,
                  nbSinks: v.nbSinks,
                  rotation: v.rotation,
                  tile: v.tile
              };
          };
      })(dictStrong);
      return function ($83) {
          return $81($82($83));
      };
  };
  var tilingGame = new Game_Core.Game(function (state) {
      return function (index) {
          return canPutTile(state)(placeTile(state)(index)) || Data_Maybe.maybe(false)(function (v) {
              return v > 0;
          })(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(index));
      };
  }, function (v) {
      return Data_Maybe.Nothing.value;
  }, function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Array.replicate(Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget)) * Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget)) | 0)(0));
  }, (function () {
      var $84 = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.notEq(Data_Eq.eqInt)(0));
      var $85 = Data_Lens_Getter.view(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
      return function ($86) {
          return $84($85($86));
      };
  })(), function (state) {
      return Control_Applicative.pure(Lib_Random.applicativeRandom)(Data_Lens_Setter.set(_rotation(Data_Profunctor_Strong.strongFn))(0)(Data_Lens_Setter.set(_tile(Data_Profunctor_Strong.strongFn))(getTile(Data_Lens_Getter.viewOn(state)(_tileType(Data_Lens_Internal_Forget.strongForget))))(state)));
  }, function (state) {
      return function (index) {
          var tilePos = placeTile(state)(index);
          var pos = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var $63 = canPutTile(state)(tilePos);
          if ($63) {
              var m = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Ord.max(Data_Ord.ordInt))(0)(pos) + 1 | 0;
              return Data_Array.mapWithIndex(function (i) {
                  return function (x) {
                      var $64 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(i)(tilePos);
                      if ($64) {
                          return m;
                      };
                      return x;
                  };
              })(pos);
          };
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(pos)(function (x) {
              var $65 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(x))(Data_Array.index(pos)(index));
              if ($65) {
                  return 0;
              };
              return x;
          });
      };
  }, Data_Function["const"](new Game_Core.SizeLimit(3, 3, 10, 10)));
  var clickOnCellA = function (a) {
      return Pha_Action.ifThenElseA(function (s) {
          return function (e) {
              return Data_Array.length(sinks(s)) < Data_Lens_Getter.viewOn(s)(_nbSinks(Data_Lens_Internal_Forget.strongForget));
          };
      })(putSinkA(a))(Game_Core.playA(tilingGame)(a));
  };
  var inConflict = function (state) {
      return Data_Maybe.maybe(false)(function (sqr) {
          return Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Array.index(Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget)))(sqr))(new Data_Maybe.Just(0)) || Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Game_Core.canPlay(tilingGame))(state)(sqr);
      })(Data_Lens_Getter.viewOn(state)(_hoverSquare(Data_Lens_Internal_Forget.strongForget)));
  };
  var setNbSinksA = Game_Core["newGame'"](tilingGame)(Data_Lens_Setter.set(_nbSinks(Data_Profunctor_Strong.strongFn)));
  var setTileA = Game_Core["newGame'"](tilingGame)(Data_Lens_Setter.set(_tileType(Data_Profunctor_Strong.strongFn)));
  exports["Type1"] = Type1;
  exports["Type2"] = Type2;
  exports["Type3"] = Type3;
  exports["istate"] = istate;
  exports["_rotation"] = _rotation;
  exports["_tile"] = _tile;
  exports["_tileType"] = _tileType;
  exports["_nbSinks"] = _nbSinks;
  exports["sinks"] = sinks;
  exports["setNbSinksA"] = setNbSinksA;
  exports["setTileA"] = setTileA;
  exports["clickOnCellA"] = clickOnCellA;
  exports["rotateA"] = rotateA;
  exports["setHoverSquareA"] = setHoverSquareA;
  exports["inConflict"] = inConflict;
  exports["onKeyDown"] = onKeyDown;
  exports["eqTileType"] = eqTileType;
  exports["showTileType"] = showTileType;
  exports["tilingGame"] = tilingGame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Tiling.View"] = $PS["Game.Tiling.View"] || {};
  var exports = $PS["Game.Tiling.View"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Game_Core = $PS["Game.Core"];
  var Game_Tiling_Model = $PS["Game.Tiling.Model"];
  var Lib_Util = $PS["Lib.Util"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Event = $PS["Pha.Event"];
  var Pha_Html = $PS["Pha.Html"];
  var UI_Icon = $PS["UI.Icon"];
  var UI_Icons = $PS["UI.Icons"];
  var UI_Template = $PS["UI.Template"];                
  var square = function (v) {
      return function (props) {
          return Pha_Html.g(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("tiling-darken")(v.isBlack), Pha_Html.transform("translate(" + (Data_Show.show(Data_Show.showInt)(50 * v.col | 0) + ("," + (Data_Show.show(Data_Show.showInt)(50 * v.row | 0) + ")")))) ])(props))([ Pha_Html.rect(0.0)(0.0)(50.0)(50.0)([ Pha_Html.key("conc"), Pha_Html.fill("url(#concrete)") ]), Pha.whenN(v.hasBlock)(function (v1) {
              return Pha_Html.use(0.0)(0.0)(50.0)(50.0)("#tile2")([ Pha_Html.key("tile") ]);
          }), Pha.whenN(v.hasSink)(function (v1) {
              return Pha_Html.use(0.0)(0.0)(50.0)(50.0)("#sink")([ Pha_Html.key("sink") ]);
          }) ]);
      };
  };
  var view = function (lens) {
      return function (state) {
          var tileCursor = function (pp) {
              return Pha_Html.g(UI_Template.svgCursorStyle(pp))([ Pha_Html.g([ Pha_Html["class'"]("tiling-cursor")(true), Pha_Html.style("transform")("rotate(" + (Data_Show.show(Data_Show.showInt)(90 * Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_rotation"](Data_Lens_Internal_Forget.strongForget)) | 0) + "deg)")) ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_tile"](Data_Lens_Internal_Forget.strongForget)))(function (v) {
                  return Pha_Html.use(50.0 * Data_Int.toNumber(v.col) - 25.0)(50.0 * Data_Int.toNumber(v.row) - 25.0)(50.0)(50.0)("#tile2")([ Pha_Html.attr("pointer-events")("none"), Pha_Html.attr("opacity")((function () {
                      var $30 = Game_Tiling_Model.inConflict(state);
                      if ($30) {
                          return "0.3";
                      };
                      return "0.8";
                  })()) ]);
              })) ]);
          };
          var sinkCursor = function (pp) {
              return Pha_Html.use(-25.0)(-25.0)(50.0)(50.0)("#sink")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html.attr("pointer-events")("none") ])(UI_Template.svgCursorStyle(pp)));
          };
          var rules = [ Pha.text("blah blah") ];
          var rows = Data_Lens_Getter.viewOn(state)(Game_Core["_nbRows"](Data_Lens_Internal_Forget.strongForget));
          var position = Data_Lens_Getter.viewOn(state)(Game_Core["_position"](Data_Lens_Internal_Forget.strongForget));
          var config = UI_Template.card("Carrelage")([ UI_Icons.iconSizesGroup(Game_Tiling_Model.tilingGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ new Data_Tuple.Tuple(4, 5), new Data_Tuple.Tuple(5, 5), new Data_Tuple.Tuple(5, 6), new Data_Tuple.Tuple(7, 7) ])(true), UI_Icons.iconSelectGroup(Game_Tiling_Model.showTileType)(Game_Tiling_Model.eqTileType)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Motif du pav\xe9")([ Game_Tiling_Model.Type1.value, Game_Tiling_Model.Type2.value, Game_Tiling_Model.Type3.value ])(Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_tileType"](Data_Lens_Internal_Forget.strongForget)))(Game_Tiling_Model.setTileA)(function (t) {
              return function (v) {
                  return {
                      icon: new UI_Icon.IconSymbol("#" + Data_Show.show(Game_Tiling_Model.showTileType)(t)),
                      selected: v.selected,
                      tooltip: v.tooltip,
                      round: v.round,
                      large: v.large,
                      hidden: v.hidden,
                      disabled: v.disabled,
                      style: v.style
                  };
              };
          }), UI_Icons.iconSelectGroup(Data_Show.showInt)(Data_Eq.eqInt)(function (dictStrong) {
              return lens(dictStrong);
          })(state)("Nombre d'\xe9viers")([ 0, 1, 2 ])(Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_nbSinks"](Data_Lens_Internal_Forget.strongForget)))(Game_Tiling_Model.setNbSinksA)(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))), UI_Icons.icongroup("Options")(Data_Functor.mapFlipped(Data_Functor.functorArray)([ UI_Icons.ihelp, UI_Icons.ireset, UI_Icons.irules ])(function (x) {
              return x(function (dictStrong) {
                  return lens(dictStrong);
              })(state);
          })) ]);
          var columns = Data_Lens_Getter.viewOn(state)(Game_Core["_nbColumns"](Data_Lens_Internal_Forget.strongForget));
          var border = function (i) {
              return function (di) {
                  return Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Array.index(position)(i))(Data_Array.index(position)(i + di | 0));
              };
          };
          var grid = Pha_Html["div'"](Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.gridStyle(rows)(columns)(5))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(UI_Template.trackPointer(function (dictStrong) {
              return lens(dictStrong);
          }))([ Pha_Html["class'"]("ui-board")(true), Pha_Html.contextmenu(Pha_Action.lensAction(function (dictStrong) {
              return lens(dictStrong);
          })(Data_Semigroup.append(Pha_Action.semigroupAction)(Pha_Event.preventDefaultA)(Game_Tiling_Model.rotateA))) ])))([ Pha_Html.svg([ Pha_Html.width("100%"), Pha_Html.height("100%"), Pha_Html.viewBox("0 0 " + (Data_Show.show(Data_Show.showInt)(50 * columns | 0) + (" " + Data_Show.show(Data_Show.showInt)(50 * rows | 0)))) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.mapWithIndex(function (index) {
              return function (pos) {
                  var v = Lib_Util.coords(columns)(index);
                  return square({
                      isBlack: Data_Lens_Getter.viewOn(state)(Game_Core["_help"](Data_Lens_Internal_Forget.strongForget)) && Data_Int.even(v.row + v.col | 0),
                      hasBlock: pos > 0,
                      hasSink: pos === (-1 | 0),
                      row: v.row,
                      col: v.col
                  })([ Pha_Html.click(Pha_Action.lensAction(function (dictStrong) {
                      return lens(dictStrong);
                  })(Game_Tiling_Model.clickOnCellA(index))), Pha_Html.pointerenter(Pha_Action.lensAction(function (dictStrong) {
                      return lens(dictStrong);
                  })(Game_Tiling_Model.setHoverSquareA(new Data_Maybe.Just(index)))), Pha_Html.pointerleave(Pha_Action.lensAction(function (dictStrong) {
                      return lens(dictStrong);
                  })(Game_Tiling_Model.setHoverSquareA(Data_Maybe.Nothing.value))) ]);
              };
          })(position))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.mapWithIndex(function (index) {
              return function (pos) {
                  var v = Lib_Util.coords(columns)(index);
                  return Pha_Html.g([ Pha_Html.transform("translate(" + (Data_Show.show(Data_Show.showInt)(50 * v.col | 0) + ("," + (Data_Show.show(Data_Show.showInt)(50 * v.row | 0) + ")")))) ])([ Pha.whenN(pos > 0 && border(index)(-1 | 0))(function (v1) {
                      return Pha_Html.line(0.0)(0.0)(0.0)(50.0)([ Pha_Html.stroke("#000"), Pha_Html.strokeWidth("2") ]);
                  }), Pha.whenN(pos > 0 && border(index)(1))(function (v1) {
                      return Pha_Html.line(50.0)(0.0)(50.0)(50.0)([ Pha_Html.stroke("#000"), Pha_Html.strokeWidth("2") ]);
                  }), Pha.whenN(pos > 0 && border(index)(-columns | 0))(function (v1) {
                      return Pha_Html.line(0.0)(0.0)(50.0)(0.0)([ Pha_Html.stroke("#000"), Pha_Html.strokeWidth("2") ]);
                  }), Pha.whenN(pos > 0 && border(index)(columns))(function (v1) {
                      return Pha_Html.line(0.0)(50.0)(50.0)(50.0)([ Pha_Html.stroke("#000"), Pha_Html.strokeWidth("2") ]);
                  }) ]);
              };
          })(position))([ Pha.maybeN(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $39 = Data_Array.length(Game_Tiling_Model.sinks(state)) < Data_Lens_Getter.viewOn(state)(Game_Tiling_Model["_nbSinks"](Data_Lens_Internal_Forget.strongForget));
              if ($39) {
                  return sinkCursor;
              };
              return tileCursor;
          })())(Data_Lens_Getter.viewOn(state)(Game_Core["_pointer"](Data_Lens_Internal_Forget.strongForget)))) ]))) ]);
          var board = UI_Template.incDecGrid(Game_Tiling_Model.tilingGame)(function (dictStrong) {
              return lens(dictStrong);
          })(state)([ grid ]);
          return UI_Template.template(Game_Tiling_Model.tilingGame)(function (dictStrong) {
              return lens(dictStrong);
          })({
              config: config,
              board: board,
              rules: rules,
              winTitle: "GAGN\xc9"
          })(state);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Tiling"] = $PS["Game.Tiling"] || {};
  var exports = $PS["Game.Tiling"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Core = $PS["Game.Core"];
  var Game_Tiling_Model = $PS["Game.Tiling.Model"];
  var Game_Tiling_View = $PS["Game.Tiling.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Tiling_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(function (v) {
      return Data_Functor.map(Effect.functorEffect)(State)(Game_Core.init(Game_Tiling_Model.tilingGame)(v));
  }, function (a) {
      return Pha_Action.lensAction(function (dictStrong) {
          return is(dictStrong.Profunctor0());
      })(Game_Tiling_Model.onKeyDown(a));
  }, function (lens) {
      return function (v) {
          return Game_Tiling_View.view(function (dictStrong) {
              var $10 = lens(dictStrong);
              var $11 = is(dictStrong.Profunctor0());
              return function ($12) {
                  return $10($11($12));
              };
          })(v);
      };
  });
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Valise.Model"] = $PS["Game.Valise.Model"] || {};
  var exports = $PS["Game.Valise.Model"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Pha_Action = $PS["Pha.Action"];                
  var istate = {
      isOpen: false,
      help: "",
      helpVisible: false,
      isSwitchOn: false,
      pawPassings: 0
  };
  var enterA = Pha_Action.asyncAction(function (v) {
      return function (v1) {
          return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(function (st) {
              return {
                  isOpen: false,
                  helpVisible: false,
                  help: st.help,
                  isSwitchOn: st.isSwitchOn,
                  pawPassings: st.pawPassings
              };
          }))(function (v2) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(1500.0))(function () {
                  return v.updateState(function (v3) {
                      return {
                          isOpen: true,
                          helpVisible: v3.helpVisible,
                          help: v3.help,
                          isSwitchOn: v3.isSwitchOn,
                          pawPassings: v3.pawPassings
                      };
                  });
              });
          });
      };
  });                                                                                                                                                                            
  var _helpVisible = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.helpVisible;
      })(function (v) {
          return function (v1) {
              return {
                  helpVisible: v1,
                  help: v.help,
                  isOpen: v.isOpen,
                  isSwitchOn: v.isSwitchOn,
                  pawPassings: v.pawPassings
              };
          };
      })(dictStrong);
  };
  var _help = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.help;
      })(function (v) {
          return function (v1) {
              return {
                  help: v1,
                  helpVisible: v.helpVisible,
                  isOpen: v.isOpen,
                  isSwitchOn: v.isSwitchOn,
                  pawPassings: v.pawPassings
              };
          };
      })(dictStrong);
  };
  var showHelpA = function (help) {
      return Pha_Action.action((function () {
          var $25 = Data_Lens_Setter.over(_help(Data_Profunctor_Strong.strongFn))((function () {
              var $24 = help === "";
              if ($24) {
                  return Control_Category.identity(Control_Category.categoryFn);
              };
              return Data_Function["const"](help);
          })());
          var $26 = Data_Lens_Setter.set(_helpVisible(Data_Profunctor_Strong.strongFn))(help !== "");
          return function ($27) {
              return $25($26($27));
          };
      })());
  };
  exports["istate"] = istate;
  exports["showHelpA"] = showHelpA;
  exports["enterA"] = enterA;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Valise.View"] = $PS["Game.Valise.View"] || {};
  var exports = $PS["Game.Valise.View"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Game_Valise_Model = $PS["Game.Valise.Model"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Html = $PS["Pha.Html"];                
  var valise = function (lens) {
      return function (state) {
          var object = function (v) {
              return function (x$prime) {
                  return function (y$prime) {
                      return function (w$prime) {
                          return function (h$prime) {
                              return function (props) {
                                  return function (children) {
                                      return Pha_Html.g([ Pha_Html.transform("translate(" + (Data_Show.show(Data_Show.showInt)(x$prime) + (" " + (Data_Show.show(Data_Show.showInt)(y$prime) + ")")))) ])([ Pha_Html.g(props)([ Pha_Html.svg([ Pha_Html["class'"]("valise-object ui-touch-action-none")(true), Pha_Html["class'"]("draggable")(v.drag), Pha_Html.width(Data_Show.show(Data_Show.showInt)(w$prime)), Pha_Html.height(Data_Show.show(Data_Show.showInt)(h$prime)), Pha_Html.pointerenter(Pha_Action.lensAction(function (dictStrong) {
                                          return lens(dictStrong);
                                      })(Game_Valise_Model.showHelpA(v.help))), Pha_Html.pointerleave(Pha_Action.lensAction(function (dictStrong) {
                                          return lens(dictStrong);
                                      })(Game_Valise_Model.showHelpA(""))) ])([ Pha.h("use")([ Pha_Html.href("#" + v.symbol), Pha_Html["class'"]("valise-symbol")(true) ])([  ]), Pha.maybeN(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.link)(function (l) {
                                          return Pha_Html.a([ Pha_Html.href("#" + l) ])([ Pha.h("rect")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pha_Html["class'"]("valise-object-link")(true), Pha_Html.fill("transparent"), Pha_Html.width("100%"), Pha_Html.height("100%") ])(children))([  ]) ]);
                                      })) ]) ]) ]);
                                  };
                              };
                          };
                      };
                  };
              };
          };
          return Pha_Html.svg([ Pha_Html.viewBox("0 0 825 690") ])([ Pha.h("use")([ Pha_Html.href("#valise"), Pha_Html["class'"]("valise-close")(true), Pha_Html.width("100%"), Pha_Html.height("100%") ])([  ]), Pha_Html.g([ Pha_Html["class'"]("valise-open")(true) ])([ Pha.h("use")([ Pha_Html.href("#openvalise") ])([  ]), object({
              symbol: "switch",
              link: Data_Maybe.Nothing.value,
              help: "",
              drag: false
          })(300)(460)(42)(60)([  ])([  ]), object({
              symbol: "bulbon",
              link: new Data_Maybe.Just("noirblanc"),
              help: "Jeu: tour noir, tout blanc",
              drag: false
          })(477)(280)(48)(48)([  ])([  ]), object({
              symbol: "frog2",
              link: new Data_Maybe.Just("frog"),
              help: "Jeu: la grenouille",
              drag: false
          })(549)(320)(35)(34)([ Pha_Html.fill("#bcd35f") ])([  ]), object({
              symbol: "hanoibot",
              link: new Data_Maybe.Just("solitaire"),
              help: "Jeu: solitaire",
              drag: false
          })(500)(430)(75)(51)([  ])([  ]), object({
              symbol: "knight",
              link: new Data_Maybe.Just("queens"),
              help: "Jeu: les 8 reines",
              drag: false
          })(461)(380)(24)(48)([ Pha_Html.transform("rotate(40)") ])([  ]), object({
              symbol: "pen",
              link: Data_Maybe.Nothing.value,
              help: "Jeu: dessin (non impl\xe9ment\xe9)",
              drag: false
          })(610)(400)(60)(60)([  ])([  ]), object({
              symbol: "stack",
              link: new Data_Maybe.Just("jetons"),
              help: "Jeu: jetons",
              drag: false
          })(350)(500)(50)(50)([  ])([  ]), object({
              symbol: "wheel",
              link: new Data_Maybe.Just("roue"),
              help: "Jeu: roue des couleurs",
              drag: false
          })(400)(205)(50)(50)([ Pha_Html.transform("scale(1,0.8)") ])([  ]), object({
              symbol: "card",
              link: new Data_Maybe.Just("nim"),
              help: "Jeu: Poker Nim",
              drag: false
          })(450)(130)(40)(50)([ Pha_Html.transform("rotate(30)") ])([  ]), object({
              symbol: "tile",
              link: new Data_Maybe.Just("tiling"),
              help: "Jeu: carrelage",
              drag: false
          })(280)(400)(120)(60)([  ])([  ]), object({
              symbol: "tricolor",
              link: new Data_Maybe.Just("baseball"),
              help: "Jeu: baseball multicolore",
              drag: false
          })(350)(330)(90)(60)([  ])([  ]), object({
              symbol: "race",
              link: new Data_Maybe.Just("paths"),
              help: "Jeu: chemins",
              drag: false
          })(450)(445)(64)(64)([ Pha_Html.transform("rotate(40)") ])([  ]), object({
              symbol: "quiet",
              link: Data_Maybe.Nothing.value,
              help: "Jeu: preuve sans mot",
              drag: false
          })(180)(130)(50)(50)([  ])([  ]), object({
              symbol: "chocolate",
              link: new Data_Maybe.Just("chocolat"),
              help: "Jeu: chocolat",
              drag: false
          })(200)(200)(60)(60)([ Pha_Html.transform("rotate(40)") ])([  ]) ]) ]);
      };
  };
  var view = function (lens) {
      return function (state) {
          return Pha_Html["div'"]([ Pha_Html["class'"]("ui-flex-center valise-main-container")(true), Pha_Html["class'"]("open")(state.isOpen) ])([ Pha_Html["div'"]([  ])([ Pha_Html["div'"]([ Pha_Html["class'"]("valise-logo")(true) ])([ Pha_Html.svguse("#logo")([  ]) ]), Pha_Html["div'"]([ Pha_Html["class'"]("valise-container")(true) ])([ valise(function (dictStrong) {
              return lens(dictStrong);
          })(state), Pha_Html["div'"]([ Pha_Html["class'"]("valise-help")(true), Pha_Html["class'"]("visible")(state.helpVisible && state.help !== "") ])([ Pha.text(state.help) ]) ]) ]) ]);
      };
  };
  exports["view"] = view;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Game.Valise"] = $PS["Game.Valise"] || {};
  var exports = $PS["Game.Valise"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Game = $PS["Game"];
  var Game_Valise_Model = $PS["Game.Valise.Model"];
  var Game_Valise_View = $PS["Game.Valise.View"];
  var Pha_Action = $PS["Pha.Action"];                
  var State = function (x) {
      return x;
  };
  var state = Game_Valise_Model.istate;
  var is = function (dictProfunctor) {
      return Data_Lens_Iso.iso(function (v) {
          return v;
      })(State)(dictProfunctor);
  };
  var cgame = new Game.CGame(Control_Applicative.pure(Effect.applicativeEffect), Data_Function["const"](Data_Monoid.mempty(Pha_Action.semigroupMonoid)), function (lens) {
      return function (v) {
          return Game_Valise_View.view(function (dictStrong) {
              var $7 = lens(dictStrong);
              var $8 = is(dictStrong.Profunctor0());
              return function ($9) {
                  return $7($8($9));
              };
          })(v);
      };
  });
  exports["is"] = is;
  exports["state"] = state;
  exports["cgame"] = cgame;
})(PS);
(function(exports) {
  exports.getLocationHref = () => window.location.href;
})(PS["Main"] = PS["Main"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var $foreign = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Game = $PS["Game"];
  var Game_Baseball = $PS["Game.Baseball"];
  var Game_Chocolat = $PS["Game.Chocolat"];
  var Game_Frog = $PS["Game.Frog"];
  var Game_Jetons = $PS["Game.Jetons"];
  var Game_Nim = $PS["Game.Nim"];
  var Game_Noirblanc = $PS["Game.Noirblanc"];
  var Game_Paths = $PS["Game.Paths"];
  var Game_Queens = $PS["Game.Queens"];
  var Game_Roue = $PS["Game.Roue"];
  var Game_Solitaire = $PS["Game.Solitaire"];
  var Game_Tiling = $PS["Game.Tiling"];
  var Game_Valise = $PS["Game.Valise"];
  var Game_Valise_Model = $PS["Game.Valise.Model"];
  var Pha = $PS["Pha"];
  var Pha_Action = $PS["Pha.Action"];
  var Pha_Event = $PS["Pha.Event"];
  var Pha_Html = $PS["Pha.Html"];                
  var extractLocation = function (url) {
      return function (defaultValue) {
          return Data_Maybe.maybe(defaultValue)(function (i) {
              return Data_String_CodePoints.drop(i + 1 | 0)(url);
          })(Data_String_CodePoints.indexOf("#")(url));
      };
  };
  var _valise = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.valise;
      })(function (v) {
          return function (v1) {
              return {
                  valise: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling
              };
          };
      })(dictStrong);
  };
  var hashChange = function (hash) {
      return Pha_Action.asyncAction(function (v) {
          return function (v1) {
              var location = extractLocation(hash)("valise");
              return Control_Bind.bind(Effect_Aff.bindAff)(v.updateState(function (v2) {
                  return {
                      location: location,
                      anim: true,
                      baseball: v2.baseball,
                      chocolat: v2.chocolat,
                      frog: v2.frog,
                      jetons: v2.jetons,
                      nim: v2.nim,
                      noirblanc: v2.noirblanc,
                      paths: v2.paths,
                      queens: v2.queens,
                      roue: v2.roue,
                      solitaire: v2.solitaire,
                      tiling: v2.tiling,
                      valise: v2.valise
                  };
              }))(function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.forkAff(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(100.0))(function () {
                      return v.updateState(function (v3) {
                          return {
                              location: location,
                              anim: false,
                              baseball: v3.baseball,
                              chocolat: v3.chocolat,
                              frog: v3.frog,
                              jetons: v3.jetons,
                              nim: v3.nim,
                              noirblanc: v3.noirblanc,
                              paths: v3.paths,
                              queens: v3.queens,
                              roue: v3.roue,
                              solitaire: v3.solitaire,
                              tiling: v3.tiling,
                              valise: v3.valise
                          };
                      });
                  })))(function (v3) {
                      var $87 = location === "valise" || location === "";
                      if ($87) {
                          return v.dispatch(Pha_Action.lensAction(function (dictStrong) {
                              var $107 = _valise(dictStrong);
                              var $108 = Game_Valise.is(dictStrong.Profunctor0());
                              return function ($109) {
                                  return $107($108($109));
                              };
                          })(Game_Valise_Model.enterA));
                      };
                      return v.getState;
                  });
              });
          };
      });
  };
  var init2 = Pha_Action["withPayload'"](hashChange)(function (e) {
      return $foreign.getLocationHref;
  });
  var _tiling = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.tiling;
      })(function (v) {
          return function (v1) {
              return {
                  tiling: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _solitaire = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.solitaire;
      })(function (v) {
          return function (v1) {
              return {
                  solitaire: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _roue = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.roue;
      })(function (v) {
          return function (v1) {
              return {
                  roue: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _queens = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.queens;
      })(function (v) {
          return function (v1) {
              return {
                  queens: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _paths = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.paths;
      })(function (v) {
          return function (v1) {
              return {
                  paths: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _noirblanc = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.noirblanc;
      })(function (v) {
          return function (v1) {
              return {
                  noirblanc: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _nim = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.nim;
      })(function (v) {
          return function (v1) {
              return {
                  nim: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _jetons = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.jetons;
      })(function (v) {
          return function (v1) {
              return {
                  jetons: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _frog = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.frog;
      })(function (v) {
          return function (v1) {
              return {
                  frog: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  chocolat: v.chocolat,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _chocolat = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.chocolat;
      })(function (v) {
          return function (v1) {
              return {
                  chocolat: v1,
                  anim: v.anim,
                  baseball: v.baseball,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var _baseball = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.baseball;
      })(function (v) {
          return function (v1) {
              return {
                  baseball: v1,
                  anim: v.anim,
                  chocolat: v.chocolat,
                  frog: v.frog,
                  jetons: v.jetons,
                  location: v.location,
                  nim: v.nim,
                  noirblanc: v.noirblanc,
                  paths: v.paths,
                  queens: v.queens,
                  roue: v.roue,
                  solitaire: v.solitaire,
                  tiling: v.tiling,
                  valise: v.valise
              };
          };
      })(dictStrong);
  };
  var sliceFn = function (state) {
      return function (fn) {
          if (state.location === "baseball") {
              return fn(Game_Baseball.cgame)(function (dictStrong) {
                  return _baseball(dictStrong);
              });
          };
          if (state.location === "chocolat") {
              return fn(Game_Chocolat.cgame)(function (dictStrong) {
                  return _chocolat(dictStrong);
              });
          };
          if (state.location === "frog") {
              return fn(Game_Frog.cgame)(function (dictStrong) {
                  return _frog(dictStrong);
              });
          };
          if (state.location === "jetons") {
              return fn(Game_Jetons.cgame)(function (dictStrong) {
                  return _jetons(dictStrong);
              });
          };
          if (state.location === "noirblanc") {
              return fn(Game_Noirblanc.cgame)(function (dictStrong) {
                  return _noirblanc(dictStrong);
              });
          };
          if (state.location === "paths") {
              return fn(Game_Paths.cgame)(function (dictStrong) {
                  return _paths(dictStrong);
              });
          };
          if (state.location === "roue") {
              return fn(Game_Roue.cgame)(function (dictStrong) {
                  return _roue(dictStrong);
              });
          };
          if (state.location === "queens") {
              return fn(Game_Queens.cgame)(function (dictStrong) {
                  return _queens(dictStrong);
              });
          };
          if (state.location === "solitaire") {
              return fn(Game_Solitaire.cgame)(function (dictStrong) {
                  return _solitaire(dictStrong);
              });
          };
          if (state.location === "tiling") {
              return fn(Game_Tiling.cgame)(function (dictStrong) {
                  return _tiling(dictStrong);
              });
          };
          if (state.location === "nim") {
              return fn(Game_Nim.cgame)(function (dictStrong) {
                  return _nim(dictStrong);
              });
          };
          return fn(Game_Valise.cgame)(function (dictStrong) {
              return _valise(dictStrong);
          });
      };
  };
  var onKeyDown = function (k) {
      return Pha_Action.asyncAction(function (v) {
          return function (state) {
              return Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(state))(function (k$prime) {
                  return v.dispatch(sliceFn(state)(function (dictCGame) {
                      return function (lens) {
                          return Pha_Action.lensAction(function (dictStrong) {
                              return lens(dictStrong);
                          })(Game.onKeyDown(dictCGame)(k$prime));
                      };
                  }));
              })(k);
          };
      });
  };
  var viewGame = function (st) {
      return sliceFn(st)(function (dictCGame) {
          return function (lens) {
              return Game.view(dictCGame)(function (dictStrong) {
                  return lens(dictStrong);
              })(Data_Lens_Getter.viewOn(st)(lens(Data_Lens_Internal_Forget.strongForget)));
          };
      });
  };
  var viewG = function (state) {
      return Pha_Html["div'"]([ Pha_Html.key(state.location), Pha_Html["class'"]("main-main-container")(true), Pha_Html["class'"]("valise")(state.location === "valise"), Pha_Html["class'"]("appear")(state.anim) ])([ Pha.whenN(state.location !== "valise")(function (v) {
          return Pha_Html.a([ Pha_Html["class'"]("main-minivalise-link")(true), Pha_Html.href("#valise") ])([ Pha_Html.svguse("#valise")([  ]) ]);
      }), viewGame(state) ]);
  };
  var main = function __do() {
      var v = $foreign.getLocationHref();
      var location = extractLocation(v)("valise");
      var v1 = Game.init(Game_Baseball.cgame)(Game_Baseball.state)();
      var v2 = Game.init(Game_Chocolat.cgame)(Game_Chocolat.state)();
      var v3 = Game.init(Game_Frog.cgame)(Game_Frog.state)();
      var v4 = Game.init(Game_Jetons.cgame)(Game_Jetons.state)();
      var v5 = Game.init(Game_Nim.cgame)(Game_Nim.state)();
      var v6 = Game.init(Game_Noirblanc.cgame)(Game_Noirblanc.state)();
      var v7 = Game.init(Game_Paths.cgame)(Game_Paths.state)();
      var v8 = Game.init(Game_Queens.cgame)(Game_Queens.state)();
      var v9 = Game.init(Game_Roue.cgame)(Game_Roue.state)();
      var v10 = Game.init(Game_Solitaire.cgame)(Game_Solitaire.state)();
      var v11 = Game.init(Game_Tiling.cgame)(Game_Tiling.state)();
      var v12 = Game.init(Game_Valise.cgame)(Game_Valise.state)();
      var state = {
          baseball: v1,
          chocolat: v2,
          frog: v3,
          jetons: v4,
          nim: v5,
          noirblanc: v6,
          paths: v7,
          queens: v8,
          roue: v9,
          solitaire: v10,
          tiling: v11,
          valise: v12,
          location: location,
          anim: false
      };
      return Pha.app({
          state: state,
          view: viewG,
          node: "root",
          events: [ new Data_Tuple.Tuple("keydown", Pha_Action.withPayload(onKeyDown)(Pha_Event.key)), new Data_Tuple.Tuple("hashchange", Pha_Action["withPayload'"](hashChange)(function (e) {
              return $foreign.getLocationHref;
          })) ],
          init: init2
      })();
  };
  exports["extractLocation"] = extractLocation;
  exports["_baseball"] = _baseball;
  exports["_chocolat"] = _chocolat;
  exports["_frog"] = _frog;
  exports["_jetons"] = _jetons;
  exports["_nim"] = _nim;
  exports["_noirblanc"] = _noirblanc;
  exports["_paths"] = _paths;
  exports["_queens"] = _queens;
  exports["_roue"] = _roue;
  exports["_solitaire"] = _solitaire;
  exports["_tiling"] = _tiling;
  exports["_valise"] = _valise;
  exports["hashChange"] = hashChange;
  exports["init2"] = init2;
  exports["sliceFn"] = sliceFn;
  exports["onKeyDown"] = onKeyDown;
  exports["viewG"] = viewG;
  exports["viewGame"] = viewGame;
  exports["main"] = main;
  exports["getLocationHref"] = $foreign.getLocationHref;
})(PS);
PS["Main"].main();