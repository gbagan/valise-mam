module Game.Jetons.Model where

import Prelude

-- export default template({
--     state: {
--        rows: 4,
--        columns: 4

--        sizeLimit: [1, 2, 6, 12],
    

    initialPosition state = duplicate (state.rows * state.columns) 1

    play state (Move from to) =
        let position = state^._position in
        fromMaybe position $ do
            pfrom <- position !! from
            position # updateAt from 0 >>= modifyAt to (+ pfrom)
    
    canPlay state (Move from, to) =
        let position = state^._position in
        fromMaybe false $ do
            let {row, col} = dCoords columns from to in
            pfrom <- position !! from
            pto <- position !! to
            pure (pfrom > 0 && pfrom <= pto && row * row + col * col === 1)
    
    isLevelFinished state =
            (0 .. length position - 1) # all \i ->
                let x = fromMaybe 0 $ position !! i
                    y = if (i+1) `mod` columns === 0 then 0 else fromMaybe 0 $ position !! i+1
                    z = fromMaybe 0 $ position !! i+columns in
                x * (y + z) == 0
    
    objective = "minimize",
    function = nbNonEmptyCells
    params = attrs('columns,rows')
    isCustomLevel _ = false

nbNonEmptyCells St{position} = position # filter (_ > 0) # length
